//From ItemSlot, move to Main.shopSellbackHelper
@@ -449,9 +450,13 @@
 						}
 						break;
 					case 3:
-						Main.mouseItem.netDefaults(inv[slot].netID);
+						if (!PlayerHooks.CanBuyItem(player, Main.npc[player.talkNPC], inv, inv[slot]))
+							break;
+						
+						Main.mouseItem = inv[slot].Clone();
+						Main.mouseItem.stack = 1;
 						if (inv[slot].buyOnce)
-							Main.mouseItem.Prefix(inv[slot].prefix);
+							Main.mouseItem.value *= 5; // preserve item value for items sold to the shop
 						else
 							Main.mouseItem.Prefix(-1);
 						Main.mouseItem.position = player.Center - new Vector2(Main.mouseItem.width, Main.mouseItem.headSlot) / 2f;

//Netplay
@@ -456,16 +696,21 @@
 				}
 
 				int num3 = 0;
+				if (NetMessage.buffer.Any(b => b.checkBytes) || Clients.Any(c => c.PendingTermination)) {
+					InvokeOnMainThread(() => {
+						for (int k = 0; k < 256; k++) {
+							if (NetMessage.buffer[k].checkBytes)
+								NetMessage.CheckBytes(k);
+
+							if (Clients[k].PendingTermination) {
+								Clients[k].Reset();
+								NetMessage.SyncDisconnectedPlayer(k);
+							}
+						}
+					});
+				}
+
 				for (int k = 0; k < 256; k++) {
-					if (NetMessage.buffer[k].checkBytes)
-						NetMessage.CheckBytes(k);
-
-					if (Clients[k].PendingTermination) {
-						Clients[k].Reset();
-						NetMessage.SyncDisconnectedPlayer(k);
-						continue;
-					}
-
 					if (Clients[k].IsConnected()) {
 						if (!Clients[k].IsActive)
 							Clients[k].State = 0;

//Player.ApplyAnnimation was moved
 		private void ApplyAnimation(Item sItem) {
 			if (sItem.melee) {
-				itemAnimation = (int)((float)sItem.useAnimation * meleeSpeed);
-				itemAnimationMax = (int)((float)sItem.useAnimation * meleeSpeed);
+				itemAnimation = PlayerHooks.TotalMeleeTime(sItem.useAnimation * meleeSpeed, this, sItem);
+				itemAnimationMax = itemAnimation;
 			}
 			else if (sItem.createTile >= 0) {
-				itemAnimation = (int)((float)sItem.useAnimation * tileSpeed);
-				itemAnimationMax = (int)((float)sItem.useAnimation * tileSpeed);
+				itemAnimation = PlayerHooks.TotalMeleeTime(sItem.useAnimation * tileSpeed, this, sItem);
+				itemAnimationMax = itemAnimation;
 			}
 			else if (sItem.createWall >= 0) {
-				itemAnimation = (int)((float)sItem.useAnimation * wallSpeed);
-				itemAnimationMax = (int)((float)sItem.useAnimation * wallSpeed);
+				itemAnimation = PlayerHooks.TotalMeleeTime(sItem.useAnimation * wallSpeed, this, sItem);
+				itemAnimationMax = itemAnimation;
 			}
 			else {
-				itemAnimation = sItem.useAnimation;
-				itemAnimationMax = sItem.useAnimation;
-				reuseDelay = sItem.reuseDelay;
+				itemAnimation = PlayerHooks.TotalMeleeTime(sItem.useAnimation, this, sItem);
+				itemAnimationMax = itemAnimation;
+				reuseDelay = (int)(sItem.reuseDelay / PlayerHooks.TotalUseTimeMultiplier(this, sItem));
 			}
 		}

//"Enable Developer Mode" button
@@ -38128,6 +38945,27 @@
 				Vector2 origin2 = fontMouseText.MeasureString(text5);
 				origin2.X *= 0.5f;
 				origin2.Y *= 0.5f;
+				if (menuMode == 0 && !ModCompile.DeveloperMode) {
+					origin2.Y *= 2;
+					var text = "Enable Developer Mode";
+					// measure and draw text from bottom right
+					var textSize = fontMouseText.MeasureString(text);
+					var pos = new Vector2(screenWidth - 10f + num106, screenHeight - 2f + num107);
+					var d_color = color12;
+					if (num105 == 4) // final draw
+					{
+						var rect = new Microsoft.Xna.Framework.Rectangle((int)(pos.X - textSize.X), (int)(pos.Y - textSize.Y), (int)textSize.X, (int)textSize.Y);
+						bool mouseover = rect.Contains(mouseX, mouseY);
+						d_color = mouseover ? highVersionColor : new Microsoft.Xna.Framework.Color(120, 120, 120, 76);
+						if (mouseover && mouseLeftRelease && mouseLeft) {
+							PlaySound(SoundID.MenuOpen);
+							menuMode = Interface.developerModeHelpID;

+						}


+					}
+
+					spriteBatch.DrawString(fontMouseText, text, pos, d_color, 0f, textSize, 1f, SpriteEffects.None, 0f);
+				}
+
 				spriteBatch.DrawString(fontMouseText, text5, new Vector2((float)screenWidth - origin2.X + (float)num106 - 10f, (float)screenHeight - origin2.Y + (float)num107 - 2f), color12, 0f, origin2, 1f, SpriteEffects.None, 0f);

 			}
 