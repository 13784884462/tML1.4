--- src/Terraria/Terraria/Player.cs
+++ src/tModLoader/Terraria/Player.cs
@@ -34,6 +_,10 @@
 using Terraria.UI.Gamepad;
 using Terraria.Utilities;
 using Terraria.WorldBuilding;
+using Terraria.ModLoader;
+using Terraria.ModLoader.Exceptions;
+using Terraria.ModLoader.IO;
+using Terraria.ModLoader.UI;
 
 namespace Terraria
 {
@@ -184,15 +_,21 @@
 
 			public static void PlayerConnect(int playerIndex) {
 				PressurePlateHelper.ResetPlayer(playerIndex);
+				PlayerHooks.PlayerConnect(playerIndex);
 			}
 
 			public static void PlayerDisconnect(int playerIndex) {
 				PressurePlateHelper.ResetPlayer(playerIndex);
+				PlayerHooks.PlayerDisconnect(playerIndex);
 			}
 
 			public static void EnterWorld(int playerIndex) {
+				Logging.Terraria.InfoFormat("Entering world with player: {0}, IsCloud={1}", Main.ActivePlayerFileData.Name, Main.ActivePlayerFileData.IsCloudSave);
+				Interface.ResetData();
 				if (Hooks.OnEnterWorld != null)
 					Hooks.OnEnterWorld(Main.player[playerIndex]);
+
+				PlayerHooks.OnEnterWorld(playerIndex);
 			}
 		}
 
@@ -390,9 +_,9 @@
 			}
 		}
 
 		public int emoteTime;
 		public CreativeUnlocksTracker creativeTracker;
-		private static byte[] ENCRYPTION_KEY = new UnicodeEncoding().GetBytes("h3y_gUyZ");
+		internal static byte[] ENCRYPTION_KEY = new UnicodeEncoding().GetBytes("h3y_gUyZ");
 		public OverheadMessage chatOverhead;
 		public SelectionRadial DpadRadial = new SelectionRadial();
 		public SelectionRadial CircularRadial = new SelectionRadial(SelectionRadial.SelectionMode.RadialCircular);
@@ -683,7 +_,7 @@
 		public bool poundRelease;
 		public float ghostFade;
 		public float ghostDir = 1f;
-		public const int maxBuffs = 22;
+		public static int MaxBuffs => 22 + BuffLoader.extraPlayerBuffCount;
 		public int[] buffType = new int[22];
 		public int[] buffTime = new int[22];
 		public bool[] buffImmune = new bool[323];
@@ -1037,6 +_,12 @@
 		public int meleeCrit = 4;
 		public int magicCrit = 4;
 		public int rangedCrit = 4;
+		public float allDamage; // added to better support new damage classes
+		public float allDamageMult;
+		public float meleeDamageMult;
+		public float rangedDamageMult;
+		public float magicDamageMult;
+		public float minionDamageMult;
 		public float meleeDamage = 1f;
 		public float magicDamage = 1f;
 		public float rangedDamage = 1f;
@@ -1080,8 +_,26 @@
 		public bool oldAdjWater;
 		public bool oldAdjHoney;
 		public bool oldAdjLava;
-		public bool[] adjTile = new bool[623];
-		public bool[] oldAdjTile = new bool[623];
+		private bool[] _adjTile = new bool[TileLoader.TileCount];
+		public bool[] adjTile {
+			get {
+				if (_adjTile.Length != TileLoader.TileCount)
+					Array.Resize(ref _adjTile, TileLoader.TileCount);
+
+				return _adjTile;
+			}
+			set { _adjTile = value; }
+		}
+		private bool[] _oldAdjTile = new bool[TileLoader.TileCount];
+		public bool[] oldAdjTile {
+			get {
+				if (_oldAdjTile.Length != TileLoader.TileCount)
+					Array.Resize(ref _oldAdjTile, TileLoader.TileCount);
+
+				return _oldAdjTile;
+			}
+			set { _oldAdjTile = value; }
+		}
 		public static int defaultItemGrabRange = 42;
 		private static float itemGrabSpeed = 0.45f;
 		private static float itemGrabSpeedMax = 4f;
@@ -1519,7 +_,16 @@
 			}
 
 			int num = Item.NewItem((int)position.X, (int)position.Y, width, height, inventory[selectedItem].type);
-			if (!flag2 && inventory[selectedItem].type == 8 && inventory[selectedItem].stack > 1) {
+			bool dryTorch = false;
+			bool wetTorch = false;
+			bool glowstick = false;
+			inventory[selectedItem].modItem?.AutoLightSelect(ref dryTorch, ref wetTorch, ref glowstick);
+			int type = inventory[selectedItem].type;
+			if (!flag2 && inventory[selectedItem].stack > 1 && (dryTorch || wetTorch || type == 8 || type == 427 || type == 428 || type == 429 || type == 430 || type == 431 || type == 432 || type == 433 || type == 523 || type == 974 || type == 1245 || type == 1333 || type == 2274 || type == 3004 || type == 3045 || type == 3114)) {
+				Item torch = inventory[selectedItem].Clone();
+				torch.stack = 1;
+				torch.position = Main.item[num].position;
+				Main.item[num] = torch;
 				inventory[selectedItem].stack--;
 			}
 			else {
@@ -1999,7 +_,9 @@
 		public void ApplyItemTime(Item sItem) {
+			int totalUseTime = PlayerHooks.TotalUseTime(sItem.useTime, this, sItem);
-			SetItemTime(sItem.useTime);
+			SetItemTime(totalUseTime);
 		}
 
 		public void ApplyItemTime(Item sItem, float multiplier) {
+			int totalUseTime = PlayerHooks.TotalUseTime((int)(sItem.useTime * multiplier), this, sItem);
-			SetItemTime((int)((float)sItem.useTime * multiplier));
+			SetItemTime(totalUseTime);
 		}
@@ -2270,6 +_,7 @@
 				Item item = GetItem(whoAmI, Main.guideItem, getItemInDropItemCheck);
 				if (item.stack > 0) {
 					int num = Item.NewItem((int)position.X, (int)position.Y, width, height, item.type, item.stack, noBroadcast: false, Main.guideItem.prefix, noGrabDelay: true);
+					Main.item[num] = item.Clone();
 					Main.item[num].newAndShiny = false;
 					if (Main.netMode == 1)
 						NetMessage.SendData(21, -1, -1, null, num, 1f);
@@ -2283,6 +_,7 @@
 				Item item2 = GetItem(whoAmI, Main.reforgeItem, getItemInDropItemCheck);
 				if (item2.stack > 0) {
 					int num2 = Item.NewItem((int)position.X, (int)position.Y, width, height, item2.type, item2.stack, noBroadcast: false, Main.reforgeItem.prefix, noGrabDelay: true);
+					Main.item[num2] = item2.Clone();
 					Main.item[num2].newAndShiny = false;
 					if (Main.netMode == 1)
 						NetMessage.SendData(21, -1, -1, null, num2, 1f);
@@ -2318,6 +_,7 @@
 				Item item3 = GetItem(whoAmI, Main.mouseItem, getItemInDropItemCheck);
 				if (item3.stack > 0) {
 					int num3 = Item.NewItem((int)position.X, (int)position.Y, width, height, item3.type, item3.stack, noBroadcast: false, Main.mouseItem.prefix, noGrabDelay: true);
+					Main.item[num3] = item3.Clone();
 					Main.item[num3].newAndShiny = false;
 					if (Main.netMode == 1)
 						NetMessage.SendData(21, -1, -1, null, num3, 1f);
@@ -2400,11 +_,13 @@
 			}
 		}
 
+		public bool HasBuff(int type) => FindBuffIndex(type) != -1;
+
 		public int FindBuffIndex(int type) {
 			if (buffImmune[type])
 				return -1;
 
-			for (int i = 0; i < 22; i++) {
+			for (int i = 0; i < MaxBuffs; i++) {
 				if (buffTime[i] >= 1 && buffType[i] == type)
 					return i;
 			}
@@ -2438,7 +_,7 @@
 			int num = -1;
 			while (num == -1) {
 				int num2 = -1;
-				for (int i = 0; i < 22; i++) {
+				for (int i = 0; i < MaxBuffs; i++) {
 					if (!Main.debuff[buffType[i]]) {
 						num2 = i;
 						break;
@@ -2448,7 +_,7 @@
 				if (num2 == -1)
 					return false;
 
-				for (int j = num2; j < 22; j++) {
+				for (int j = num2; j < MaxBuffs; j++) {
 					if (buffType[j] == 0) {
 						num = j;
 						break;
@@ -2487,7 +_,7 @@
 			if (!Main.vanityPet[type])
 				return;
 
-			for (int j = 0; j < 22; j++) {
+			for (int j = 0; j < MaxBuffs; j++) {
 				if (Main.vanityPet[buffType[j]])
 					DelBuff(j);
 			}
@@ -2493,13 +_,15 @@
 			}
 		}
 
 		private bool AddBuff_TryUpdatingExistingBuffTime(int type, int time) {
 			bool result = false;
-			for (int i = 0; i < 22; i++) {
+			for (int i = 0; i < MaxBuffs; i++) {
 				if (buffType[i] != type)
 					continue;
 
+				if (BuffLoader.ReApply(type, this, time, i)) {
+				}
-				if (type == 94) {
+				else if (type == 94) {
 					buffTime[i] += time;
 					if (buffTime[i] > manaSickTimeMax)
 						buffTime[i] = manaSickTimeMax;
@@ -2518,7 +_,7 @@
 		private int AddBuff_DetermineBuffTimeToAdd(int type, int time1) {
 			int num = time1;
-			if (Main.expertMode && whoAmI == Main.myPlayer && (type == 20 || type == 22 || type == 23 || type == 24 || type == 30 || type == 31 || type == 32 || type == 33 || type == 35 || type == 36 || type == 39 || type == 44 || type == 46 || type == 47 || type == 69 || type == 70 || type == 80))
+			if (Main.expertMode && whoAmI == Main.myPlayer && BuffLoader.LongerExpertDebuff(type))
 				num = (int)(Main.GameModeInfo.DebuffTimeMultiplier * (float)num);
 
 			return num;
 		}
@@ -2526,24 +_,28 @@
 		public void DelBuff(int b) {
 			buffTime[b] = 0;
 			buffType[b] = 0;
-			for (int i = 0; i < 21; i++) {
-				if (buffTime[i] != 0 && buffType[i] != 0)
-					continue;
-
-				for (int j = i + 1; j < 22; j++) {
-					if (buffTime[j] > 0 && buffType[j] > 0) {
-						buffTime[i] = buffTime[j];
-						buffType[i] = buffType[j];
-						buffTime[j] = 0;
-						buffType[j] = 0;
-						break;
-					}
+			//single pass compactor (vanilla is n^2)
+			int packedIdx = 0;
+			for (int i = 0; i < MaxBuffs - 1; i++) {
+				if (buffTime[i] == 0 || buffType[i] == 0)
+					continue;
+
+				if (packedIdx < i) {
+					buffTime[packedIdx] = buffTime[i];
+					buffType[packedIdx] = buffType[i];
+					buffTime[i] = 0;
+					buffType[i] = 0;
 				}
+
+				packedIdx++;
 			}
 		}
 
 		public void ClearBuff(int type) {
+			if (type == 0)
+				return;
+
-			for (int i = 0; i < 22; i++) {
+			for (int i = 0; i < MaxBuffs; i++) {
 				if (buffType[i] == type)
 					DelBuff(i);
 			}
@@ -2551,7 +_,7 @@
 
 		public int CountBuffs() {
 			int num = 0;
-			for (int i = 0; i < 22; i++) {
+			for (int i = 0; i < MaxBuffs; i++) {
 				if (buffType[num] > 0)
 					num++;
 			}
@@ -2559,6 +_,20 @@
 			return num;
 		}
 
+		public int GetHealLife(Item item, bool quickHeal = false) {
+			int healValue = item.healLife;
+			ItemLoader.GetHealLife(item, this, quickHeal, ref healValue);
+			PlayerHooks.GetHealLife(this, item, quickHeal, ref healValue);
+			return healValue > 0 ? healValue : 0;
+		}
+
+		public int GetHealMana(Item item, bool quickHeal = false) {
+			int healValue = item.healMana;
+			ItemLoader.GetHealMana(item, this, quickHeal, ref healValue);
+			PlayerHooks.GetHealMana(this, item, quickHeal, ref healValue);
+			return healValue > 0 ? healValue : 0;
+		}
+
 		public void QuickHeal() {
 			if (cursed || CCed || dead || statLife == statLifeMax2 || potionDelay > 0)
 				return;
@@ -2579,24 +_,29 @@
 				}
 			}
 
+			ItemLoader.UseItem(item, this);
+			int healLife = GetHealLife(item, true);
+			int healMana = GetHealMana(item, true);
-			statLife += item.healLife;
+			statLife += healLife;
-			statMana += item.healMana;
+			statMana += healMana;
 			if (statLife > statLifeMax2)
 				statLife = statLifeMax2;
 
 			if (statMana > statManaMax2)
 				statMana = statManaMax2;
 
-			if (item.healLife > 0 && Main.myPlayer == whoAmI)
-				HealEffect(item.healLife);
+			if (healLife > 0 && Main.myPlayer == whoAmI)
+				HealEffect(healLife, true);
 
-			if (item.healMana > 0) {
+			if (healMana > 0) {
 				AddBuff(94, manaSickTime);
 				if (Main.myPlayer == whoAmI)
-					ManaEffect(item.healMana);
+					ManaEffect(healMana);
 			}
 
+			if (ItemLoader.ConsumeItem(item, this))
-			item.stack--;
+				item.stack--;
+
 			if (item.stack <= 0)
 				item.TurnToAir();
 
@@ -2610,10 +_,13 @@
 			for (int i = 0; i < 58; i++) {
 				Item item = inventory[i];
 				if (item.stack <= 0 || item.type <= 0 || !item.potion || item.healLife <= 0)
+					continue;				
+				
+				if(!ItemLoader.CanUseItem(item, this))
 					continue;
 
-				int num3 = item.healLife - num;
+				int num3 = GetHealLife(item, true) - num;
 				if (item.type == 227 && num3 < 0) {
 					num3 += 30;
 					if (num3 > 0)
 						num3 = 0;
@@ -2641,7 +_,7 @@
 			int num = 0;
 			while (true) {
 				if (num < 58) {
-					if (inventory[num].stack > 0 && inventory[num].type > 0 && inventory[num].healMana > 0 && (potionDelay == 0 || !inventory[num].potion))
+					if (inventory[num].stack > 0 && inventory[num].type > 0 && inventory[num].healMana > 0 && (potionDelay == 0 || !inventory[num].potion) && ItemLoader.CanUseItem(inventory[num], this))
 						break;
 
 					num++;
@@ -2663,24 +_,29 @@
 				}
 			}
 
-			statLife += inventory[num].healLife;
-			statMana += inventory[num].healMana;
+			ItemLoader.UseItem(inventory[num], this);
+			int healLife = GetHealLife(inventory[num], true);
+			int healMana = GetHealMana(inventory[num], true);
+			statLife += healLife;
+			statMana += healMana;
 			if (statLife > statLifeMax2)
 				statLife = statLifeMax2;
 
 			if (statMana > statManaMax2)
 				statMana = statManaMax2;
 
-			if (inventory[num].healLife > 0 && Main.myPlayer == whoAmI)
-				HealEffect(inventory[num].healLife);
+			if (healLife > 0 && Main.myPlayer == whoAmI)
+				HealEffect(healLife, true);
 
-			if (inventory[num].healMana > 0) {
+			if (healMana > 0) {
 				AddBuff(94, manaSickTime);
 				if (Main.myPlayer == whoAmI)
-					ManaEffect(inventory[num].healMana);
+					ManaEffect(healMana);
 			}
 
+			if (ItemLoader.ConsumeItem(inventory[num], this))
-			inventory[num].stack--;
+				inventory[num].stack--;
+
 			if (inventory[num].stack <= 0)
 				inventory[num].TurnToAir();
 
@@ -2689,7 +_,7 @@
 
 		public Item QuickMana_GetItemToUse() {
 			for (int i = 0; i < 58; i++) {
-				if (inventory[i].stack > 0 && inventory[i].type > 0 && inventory[i].healMana > 0 && (potionDelay == 0 || !inventory[i].potion))
+				if (inventory[i].stack > 0 && inventory[i].type > 0 && inventory[i].healMana > 0 && (potionDelay == 0 || !inventory[i].potion) && ItemLoader.CanUseItem(inventory[i], this))
 					return inventory[i];
 			}
 
@@ -2722,8 +_,8 @@
-			if (CountBuffs() != 22) {
+			if (CountBuffs() != MaxBuffs) {
 				for (int i = 0; i < 58; i++) {
 					Item item2 = inventory[i];
 					if (item2.stack <= 0 || item2.type <= 0 || item2.buffType <= 0 || item2.summon)
 						continue;
 
 					int num2 = item2.buffType;
-					bool flag = QuickBuff_ShouldBotherUsingThisBuff(num2);
+					bool flag = ItemLoader.CanUseItem(item2], this) && QuickBuff_ShouldBotherUsingThisBuff(num2);
@@ -2730,4 +_,8 @@
 					if (item2.mana > 0 && flag) {
+						if (CheckMana(item2, -1, true, true))
+							manaRegenDelay = (int)maxRegenDelay;
+
+						goto SkipManaCode;
 						if (statMana >= (int)((float)item2.mana * manaCost)) {
 							manaRegenDelay = (int)maxRegenDelay;
 							statMana -= (int)((float)item2.mana * manaCost);
@@ -2738,5 +_,6 @@
 					}
 
+					SkipManaCode:
 					if (whoAmI == Main.myPlayer && item2.type == 603 && !Main.runningCollectorsEdition)
 						flag = false;
 
@@ -2755,6 +_,7 @@
 					if (!flag)
 						continue;
 
+					ItemLoader.UseItem(item2, this);
 					legacySoundStyle = item2.UseSound;
 					int num3 = item2.buffTime;
 					if (num3 == 0)
@@ -2762,10 +_,12 @@
 
 					AddBuff(num2, num3);
 					if (item2.consumable) {
+						if (ItemLoader.ConsumeItem(item2, this))
-						item2.stack--;
+							item2.stack--;
+
 						if (item2.stack <= 0)
 							item2.TurnToAir();
 					}
 
 					if (CountBuffs() == 22)
 						break;
@@ -2865,6 +_,7 @@
 				if (item != null && item.mountType != -1 && mount.CanMount(item.mountType, this)) {
 					if (!QuickMinecartSnap()) {
 						mount.SetMount(item.mountType, this);
+						ItemLoader.UseItem(item, this);
 						if (item.UseSound != null)
 							SoundEngine.PlaySound(item.UseSound, base.Center);
 					}
@@ -2936,12 +_,12 @@
 
 		public Item QuickMount_GetItemToUse() {
 			Item item = null;
-			if (item == null && miscEquips[3].mountType != -1 && !MountID.Sets.Cart[miscEquips[3].mountType])
+			if (item == null && miscEquips[3].mountType != -1 && !MountID.Sets.Cart[miscEquips[3].mountType] && ItemLoader.CanUseItem(miscEquips[3], this))
 				item = miscEquips[3];
 
 			if (item == null) {
 				for (int i = 0; i < 58; i++) {
-					if (inventory[i].mountType != -1 && !MountID.Sets.Cart[inventory[i].mountType]) {
+					if (inventory[i].mountType != -1 && !MountID.Sets.Cart[inventory[i].mountType] && ItemLoader.CanUseItem(inventory[i], this)) {
 						item = inventory[i];
 						break;
 					}
@@ -3001,7 +_,12 @@
 			if (item == null)
 				return;
 
+			bool? modCanGrapple = ProjectileLoader.CanUseGrapple(item.shoot, this);
+			if (modCanGrapple.HasValue) {
+				if (!modCanGrapple.Value)
+					item = null;
+			}
-			if (item.shoot == 73) {
+			else if (item.shoot == 73) {
 				int num2 = 0;
 				for (int i = 0; i < 1000; i++) {
 					if (Main.projectile[i].active && Main.projectile[i].owner == Main.myPlayer && (Main.projectile[i].type == 73 || Main.projectile[i].type == 74))
@@ -3076,9 +_,16 @@
 			float shootSpeed = item.shootSpeed;
 			int damage = item.damage;
 			float knockBack = item.knockBack;
+			bool? modSingleHook = ProjectileLoader.SingleGrappleHook(num8, this);
+			bool modSingleHookFalse = modSingleHook.HasValue ? !modSingleHook.Value : false;
+			bool modSingleHookTrue = modSingleHook.HasValue ? modSingleHook.Value : false;
-			if (num7 == 13 || num7 == 32 || num7 == 315 || (num7 >= 230 && num7 <= 235) || num7 == 331 || num7 == 753 || num7 == 865 || num7 == 935) {
+			if ((num7 == 13 || num7 == 32 || num7 == 315 || (num7 >= 230 && num7 <= 235) || num7 == 331 || num7 == 753 || num7 == 865 || num7 == 935 || modSingleHookTrue) && !modSingleHookFalse) {
 				grappling[0] = -1;
 				grapCount = 0;
 				for (int num8 = 0; num8 < 1000; num8++) {
 					if (Main.projectile[num8].active && Main.projectile[num8].owner == whoAmI) {
+						bool? modSingleHook2 = ProjectileLoader.SingleGrappleHook(Main.projectile[num8].type, this);
+						if (modSingleHook2.HasValue && !modSingleHook2.Value)
+							continue;
+
 						switch (Main.projectile[num8].type) {
@@ -3172,6 +_,8 @@
 				}
 			}
 
+			ProjectileLoader.UseGrapple(this, ref num7);
+
 			Vector2 vector = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
 			float num21 = (float)Main.mouseX + Main.screenPosition.X - vector.X;
 			float num22 = (float)Main.mouseY + Main.screenPosition.Y - vector.Y;
@@ -3524,7 +_,7 @@
 			}
 
 			if (!crystalLeaf || petalTimer != 0)
-				return;
+				goto End;
 
 			_ = inventory[selectedItem].type;
 			int num5 = 0;
@@ -3537,7 +_,7 @@
 					continue;
 				}
 
-				return;
+				goto End;
 			}
 
 			petalTimer = 50;
@@ -3549,9 +_,17 @@
 			num6 *= num8;
 			num7 *= num8;
 			Projectile.NewProjectile(Main.projectile[num5].Center.X - 4f, Main.projectile[num5].Center.Y, num6, num7, 227, crystalLeafDamage, crystalLeafKB, whoAmI);
+
+			End:
+
+			PlayerHooks.OnHitAnything(this, x, y, victim);
 		}
 
 		public void openPresent() {
+			if (!ItemLoader.PreOpenVanillaBag("present", this, 0))
+				return;
+
+			ItemLoader.OpenVanillaBag("present", this, 0);
 			if (Main.rand.Next(15) == 0 && Main.hardMode) {
 				int number = Item.NewItem((int)position.X, (int)position.Y, width, height, 602);
 				if (Main.netMode == 1)
@@ -3775,7 +_,31 @@
 						break;
 					}
 			}
+			NPCLoader.blockLoot.Clear(); // clear blockloot
+			// TODO: return statements above probably break this.
 		}
+
+		/// <summary>
+		/// Will spawn an item like QuickSpawnItem, but clones it (handy when you need to retain item infos)
+		/// </summary>
+		/// <param name="item">The item you want to be cloned</param>
+		/// <param name="stack">The stack to give the item. Note that this will override maxStack if it's higher.</param>
+		public void QuickSpawnClonedItem(Item item, int stack = 1) {
+			int index = Item.NewItem((int)position.X, (int)position.Y, width, height, item.type, stack, false, -1, false, false);
+			Main.item[index] = item.Clone();
+			Main.item[index].whoAmI = index;
+			Main.item[index].position = position;
+			if (stack != Main.item[index].stack)
+				Main.item[index].stack = stack;
+
+			// Sync the item for mp
+			if (Main.netMode == NetmodeID.MultiplayerClient)
+				NetMessage.SendData(MessageID.SyncItem, -1, -1, null, index, 1f, 0f, 0f, 0, 0, 0);
+		}
+
+		public void QuickSpawnItem(Item item, int stack = 1) {
+			QuickSpawnItem(item.type, stack);
+ 		}
 
 		public void QuickSpawnItem(int item, int stack = 1) {
 			int number = Item.NewItem((int)position.X, (int)position.Y, width, height, item, stack, noBroadcast: false, -1);
@@ -3784,6 +_,10 @@
 		}
 
 		public void OpenBossBag(int type) {
+			if (!ItemLoader.PreOpenVanillaBag("bossBag", this, type))
+				return;
+
+			ItemLoader.OpenVanillaBag("bossBag", this, type);
 			switch (type) {
 				case 3318: {
 						if (Main.rand.Next(2) == 0)
@@ -4217,8 +_,11 @@
 			if (type == 4957)
 				num11 = 657;
 
+			ItemLoader.OpenBossBag(type, this, ref num11);
-			if (num11 <= 0)
+			if (num11 <= 0) {
+				NPCLoader.blockLoot.Clear(); // clear blockloot
 				return;
+			}
 
 			NPC nPC = new NPC();
 			nPC.SetDefaults(num11);
@@ -4265,9 +_,13 @@
 				value -= (float)num15;
 				QuickSpawnItem(71, num15);
 			}
+			NPCLoader.blockLoot.Clear(); // clear blockloot
 		}
 
-		private void TryGettingDevArmor() {
+		public void TryGettingDevArmor() {
+			if (ModLoader.Default.ModLoaderMod.TryGettingPatreonOrDevArmor(this))
+				return;
+
 			if (Main.rand.Next(20) == 0) {
 				switch (Main.rand.Next(18)) {
 					case 0:
@@ -4388,3 +_,7 @@
 		}
 
 		public void OpenFishingCrate(int crateItemID) {
+			if (!ItemLoader.PreOpenVanillaBag("crate", this, crateItemID))
+				return;
+
+			ItemLoader.OpenVanillaBag("crate", this, crateItemID);
@@ -5666,6 +_,8 @@
 				if (Main.netMode == 1)
 					NetMessage.SendData(21, -1, -1, null, number65, 1f);
 			}
+
+			NPCLoader.blockLoot.Clear(); // clear blockloot
 		}
 
 		public int CountItem(int type, int stopCountingAt = 0) {
@@ -5693,7 +_,9 @@
 
 			for (int i = num; i != num2; i += num3) {
 				if (inventory[i].stack > 0 && inventory[i].type == type) {
+					if (ItemLoader.ConsumeItem(inventory[i], this))
-					inventory[i].stack--;
+						inventory[i].stack--;
+
 					if (inventory[i].stack <= 0)
 						inventory[i].SetDefaults();
 
@@ -5737,8 +_,12 @@
 		}
 
 		public void OpenLockBox() {
+			if (!ItemLoader.PreOpenVanillaBag("lockBox", this, 0))
+				return;
+
+			ItemLoader.OpenVanillaBag("lockBox", this, 0);
 			bool flag = true;
 			while (flag) {
 				flag = false;
 				int num = 0;
 				int num2 = Main.rand.Next(7);
@@ -5776,9 +_,15 @@
 						NetMessage.SendData(21, -1, -1, null, number2, 1f);
 				}
 			}
+
+			NPCLoader.blockLoot.Clear(); // clear blockloot
 		}
 
 		public void OpenHerbBag() {
+			if (!ItemLoader.PreOpenVanillaBag("herbBag", this, 0))
+				return;
+
+			ItemLoader.OpenVanillaBag("herbBag", this, 0);
 			int num = Main.rand.Next(2, 5);
 			if (Main.rand.Next(3) == 0)
 				num++;
@@ -5835,31 +_,36 @@
 				if (Main.netMode == 1)
 					NetMessage.SendData(21, -1, -1, null, number, 1f);
 			}
+			NPCLoader.blockLoot.Clear(); // clear blockloot
 		}
 
 		public void OpenCanofWorms() {
 			QuickSpawnItem(2002, Main.rand.Next(5, 9));
 			if (Main.rand.Next(10) < 3)
 				QuickSpawnItem(3191, Main.rand.Next(1, 3));
 
 			if (Main.rand.Next(20) == 0)
 				QuickSpawnItem(2895);
 		}
 
 		public void OpenOyster() {
 			if (Main.rand.Next(5) == 0) {
 				if (Main.rand.Next(25) == 0)
 					QuickSpawnItem(4414);
 				else if (Main.rand.Next(5) == 0)
 					QuickSpawnItem(4413);
 				else
 					QuickSpawnItem(4412);
 			}
 
 			QuickSpawnItem(4411);
 		}
 
 		public void OpenGoodieBag() {
+			if (!ItemLoader.PreOpenVanillaBag("goodieBag", this, 0))
+				return;
+
+			ItemLoader.OpenVanillaBag("goodieBag", this, 0);
 			if (Main.rand.Next(150) == 0) {
 				int number = Item.NewItem((int)position.X, (int)position.Y, width, height, 1810);
 				if (Main.netMode == 1)
@@ -6147,6 +_,7 @@
 						break;
 					}
 			}
+			NPCLoader.blockLoot.Clear(); // clear blockloot
 		}
 
 		public void UpdateDyes() {
@@ -6192,36 +_,36 @@
 		private void UpdateItemDye(bool effectiveEquipmentSlot, bool armorHidden, Item armorItem, Item dyeItem) {
 			if (!armorItem.IsAir && (!(effectiveEquipmentSlot && armorHidden) || armorItem.wingSlot > 0 || armorItem.type == 934 || armorItem.type == 4341 || armorItem.type == 4563)) {
-				if (armorItem.handOnSlot > 0 && armorItem.handOnSlot < 22)
+					if (armorItem.handOnSlot > 0)
 					cHandOn = dyeItem.dye;
 
-				if (armorItem.handOffSlot > 0 && armorItem.handOffSlot < 14)
+					if (armorItem.handOffSlot > 0)
 					cHandOff = dyeItem.dye;
 
-				if (armorItem.backSlot > 0 && armorItem.backSlot < 30)
+					if (armorItem.backSlot > 0)
 					cBack = dyeItem.dye;
 
-				if (armorItem.frontSlot > 0 && armorItem.frontSlot < 9)
+					if (armorItem.frontSlot > 0)
 					cFront = dyeItem.dye;
 
-				if (armorItem.shoeSlot > 0 && armorItem.shoeSlot < 25)
+					if (armorItem.shoeSlot > 0)
 					cShoe = dyeItem.dye;
 
-				if (armorItem.waistSlot > 0 && armorItem.waistSlot < 17)
+					if (armorItem.waistSlot > 0)
 					cWaist = dyeItem.dye;
 
-				if (armorItem.shieldSlot > 0 && armorItem.shieldSlot < 10)
+					if (armorItem.shieldSlot > 0)
 					cShield = dyeItem.dye;
 
-				if (armorItem.neckSlot > 0 && armorItem.neckSlot < 11)
+					if (armorItem.neckSlot > 0)
 					cNeck = dyeItem.dye;
 
-				if (armorItem.faceSlot > 0 && armorItem.faceSlot < 16)
+					if (armorItem.faceSlot > 0)
 					cFace = dyeItem.dye;
 
-				if (armorItem.balloonSlot > 0 && armorItem.balloonSlot < 18)
+					if (armorItem.balloonSlot > 0)
 					cBalloon = dyeItem.dye;
 
-				if (armorItem.wingSlot > 0 && armorItem.wingSlot < 47)
+					if (armorItem.wingSlot > 0)
 					cWings = dyeItem.dye;
 
 				if (armorItem.type == 934)
@@ -6261,13 +_,14 @@
 			if (soulDrain > 0 && whoAmI == Main.myPlayer)
 				AddBuff(151, 2);
 
-			for (int j = 0; j < 22; j++) {
+			for (int j = 0; j < MaxBuffs; j++) {
 				if (buffType[j] <= 0 || buffTime[j] <= 0)
 					continue;
 
 				if (whoAmI == Main.myPlayer && !BuffID.Sets.TimeLeftDoesNotDecrease[buffType[j]])
 					buffTime[j]--;
 
+				int originalIndex = j;
 				if (buffType[j] == 1) {
 					lavaImmune = true;
 					fireWalk = true;
@@ -6510,10 +_,13 @@
 					}
 				}
 				else if (buffType[j] == 117) {
+					allDamage += 0.1f;
+					/*
 					meleeDamage += 0.1f;
 					rangedDamage += 0.1f;
 					magicDamage += 0.1f;
 					minionDamage += 0.1f;
+					*/
 				}
 				else if (buffType[j] == 119) {
 					loveStruck = true;
@@ -6558,7 +_,7 @@
 							j--;
 						}
 						else {
-							for (int m = 0; m < 22; m++) {
+							for (int m = 0; m < MaxBuffs; m++) {
 								if (buffType[m] >= 95 && buffType[m] <= 95 + num4 - 1) {
 									DelBuff(m);
 									m--;
@@ -6586,7 +_,7 @@
 							j--;
 						}
 						else {
-							for (int n = 0; n < 22; n++) {
+							for (int n = 0; n < MaxBuffs; n++) {
 								if (buffType[n] >= 170 && buffType[n] <= 170 + num5 - 1) {
 									DelBuff(n);
 									n--;
@@ -6610,7 +_,7 @@
 							j--;
 						}
 						else {
-							for (int num7 = 0; num7 < 22; num7++) {
+							for (int num7 = 0; num7 < MaxBuffs; num7++) {
 								if (buffType[num7] >= 98 && buffType[num7] <= 98 + num6 - 1) {
 									DelBuff(num7);
 									num7--;
@@ -6640,7 +_,7 @@
 							j--;
 						}
 						else {
-							for (int num10 = 0; num10 < 22; num10++) {
+							for (int num10 = 0; num10 < MaxBuffs; num10++) {
 								if (buffType[num10] >= 176 && buffType[num10] <= 178 + num9 - 1) {
 									DelBuff(num10);
 									num10--;
@@ -6665,7 +_,7 @@
 							j--;
 						}
 						else {
-							for (int num13 = 0; num13 < 22; num13++) {
+							for (int num13 = 0; num13 < MaxBuffs; num13++) {
 								if (buffType[num13] >= 173 && buffType[num13] <= 175 + num12 - 1) {
 									DelBuff(num13);
 									num13--;
@@ -6692,7 +_,7 @@
 							j--;
 						}
 						else {
-							for (int num16 = 0; num16 < 22; num16++) {
+							for (int num16 = 0; num16 < MaxBuffs; num16++) {
 								if (buffType[num16] >= 179 && buffType[num16] <= 181 + num15 - 1) {
 									DelBuff(num16);
 									num16--;
@@ -6709,10 +_,13 @@
 					}
 
 					float num17 = 0.15f * (float)nebulaLevelDamage;
+					allDamage += num17;
+					/*
 					meleeDamage += num17;
 					rangedDamage += num17;
 					magicDamage += num17;
 					minionDamage += num17;
+					*/
 				}
 				else if (buffType[j] == 62) {
 					if ((double)statLife <= (double)statLifeMax2 * 0.5) {
@@ -7082,14 +_,18 @@
 
 				if (armor[k].prefix == 80)
 					meleeSpeed += 0.04f;
+
+				ItemLoader.UpdateEquip(armor[k], this);
 			}
+		}
 
-			bool flag = false;
-			bool flag2 = false;
-			bool flag3 = false;
-			for (int l = 3; l < 8 + extraAccessorySlots; l++) {
+		public void VanillaUpdateAccessory(int i, Item item, bool hideVisual, ref bool flag, ref bool flag2, ref bool flag3) {
+			// for (int l = 3; l < 8 + this.extraAccessorySlots; l++)
+			// fake array and loop to keep patches small
+			var armor = new[] { item }; int l = 0;
+			{
 				if (armor[l].expertOnly && !Main.expertMode)
-					continue;
+					return;
 
 				if (armor[l].type == 3810 || armor[l].type == 3809 || armor[l].type == 3812 || armor[l].type == 3811)
 					dd2Accessory = true;
@@ -7331,10 +_,13 @@
 						}
 					}
 
+					allDamage += 0.2f;
+					/*
 					meleeDamage += 0.2f;
 					magicDamage += 0.2f;
 					rangedDamage += 0.2f;
 					minionDamage += 0.2f;
+					*/
 				}
 				else if (buffType[j] == 41) {
 					buffTime[j] = 18000;
@@ -7715,14 +_,15 @@
 					wellFed = true;
 					statDefense += 2;
 					meleeCrit += 2;
+					allDamage += 0.05f;
-					meleeDamage += 0.05f;
+					//meleeDamage += 0.05f;
 					meleeSpeed += 0.05f;
 					magicCrit += 2;
-					magicDamage += 0.05f;
+					//magicDamage += 0.05f;
 					rangedCrit += 2;
-					rangedDamage += 0.05f;
+					//rangedDamage += 0.05f;
-					minionDamage += 0.05f;
+					//minionDamage += 0.05f;
 					minionKB += 0.5f;
 					moveSpeed += 0.2f;
 					pickSpeed -= 0.05f;
 				}
@@ -7780,5 +_,7 @@
 				else if (buffType[j] == 79) {
 					meleeEnchant = 8;
 				}
+				if (j == originalIndex)
+					BuffLoader.Update(buffType[j], this, ref j);
 			}
 
@@ -8050,12 +_,14 @@
 			}
 		}
 
-		public void UpdateEquips(int i) {
+		//public void UpdateEquips(int i) {
+		public void VanillaUpdateInventory(Item item) {
 			if (inventory[selectedItem].type == 277 && (!mount.Active || !mount.Cart))
 				trident = true;
 
-			for (int j = 0; j < 58; j++) {
+			//for (int j = 0; j < 58; j++)
+			{
-				int type = inventory[j].type;
+				int type = item.type;
 				if ((type == 15 || type == 707) && accWatch < 1)
 					accWatch = 1;
 
@@ -8068,26 +_,28 @@
 
 				if (armor[l].type == 3869)
 					Main.musicBox2 = 39;
-			}
-
-			if (dd2Accessory) {
-				minionDamage += 0.1f;
-				maxTurrets++;
-			}
-
-			for (int m = 3; m < 8 + extraAccessorySlots; m++) {
-				if (armor[m].wingSlot > 0) {
-					if (!hideVisual[m] || (velocity.Y != 0f && !mount.Active))
-						wings = armor[m].wingSlot;
-
-					wingsLogic = armor[m].wingSlot;
-				}
-			}
-
-			for (int n = 13; n < 18 + extraAccessorySlots; n++) {
-				int type3 = armor[n].type;
-				if (armor[n].wingSlot > 0)
-					wings = armor[n].wingSlot;
+
+				if (SoundLoader.itemToMusic.ContainsKey(armor[l].type))
+					Main.musicBox2 = SoundLoader.itemToMusic[armor[l].type];
+			}
+			postMusicBoxes:
+
+			if (armor[l].wingSlot > 0) {
+				if (!hideVisual || velocity.Y != 0f && !mount.Active)
+					wings = armor[l].wingSlot;
+
+				wingsLogic = armor[l].wingSlot;
+			}
+
+			ItemLoader.UpdateAccessory(armor[l], this, hideVisual);
+		}
+
+		public void VanillaUpdateVanityAccessory(Item item) {
+			//for (int n = 13; n < 18 + this.extraAccessorySlots; n++)
+			{
+				int type3 = item.type;
+				if (item.wingSlot > 0)
+					wings = item.wingSlot;
 
 				if (type3 == 861 || type3 == 3110 || type3 == 485) {
 					hideWolf = false;
@@ -8099,7 +_,37 @@
 					forceMerman = true;
 				}
 			}
+		}
 
+		public void UpdateEquips(int i) //Noise for the Diff
+		{
+			for (int j = 0; j < 58; j++) {
+				VanillaUpdateInventory(inventory[j]);
+			}
+
+			for (int k = 0; k < 8 + extraAccessorySlots; k++) {
+				VanillaUpdateEquip(armor[k]);
+			}
+
+			bool flag = false;
+			bool flag2 = false;
+			bool flag3 = false;
+			for (int l = 3; l < 8 + extraAccessorySlots; l++) {
+				VanillaUpdateAccessory(i, armor[l], hideVisual[l], ref flag, ref flag2, ref flag3);
+			}
+
+			if (dd2Accessory) {
+				minionDamage += 0.1f;
+				maxTurrets++;
+			}
+
+			PlayerHooks.UpdateEquips(this, ref flag, ref flag2, ref flag3);
+			//wing loop merged into VanillaUpdateAccessory
+			for (int n = 13; n < 18 + extraAccessorySlots; n++) {
+				VanillaUpdateVanityAccessory(armor[n]);
+			}
+
+			PlayerHooks.UpdateVanityAccessories(this);
 			if (whoAmI == Main.myPlayer && Main.clock && accWatch < 3)
 				accWatch++;
 
@@ -8127,14 +_,22 @@
 
 				if (type == 4743)
 					hasFootball = true;
+
+				ItemLoader.UpdateInventory(item, this);
 			}
+		}
 
 			if (inventory[58].type == 4743)
 				hasFootball = true;
 
+		public void VanillaUpdateEquip(Item item) {
-			for (int k = 0; k < 10; k++) {
+			// for (int k = 0; k < 10; k++)
+			// fake array and loop to keep patches small
+			Item[] armor = {item};
+			int k = 0;
+			{
 				if (!IsAValidEquipmentSlotForIteration(k) || (armor[k].expertOnly && !Main.expertMode))
-					continue;
+					return;
 
 				int type2 = armor[k].type;
 				if ((type2 == 15 || type2 == 707) && accWatch < 1)
@@ -8344,10 +_,13 @@
 					armorPenetration += 5;
 
 				if (armor[k].type == 2277) {
+					allDamage += 0.05f;
+					/*
 					magicDamage += 0.05f;
 					meleeDamage += 0.05f;
 					rangedDamage += 0.05f;
 					minionDamage += 0.05f;
+					*/
 					magicCrit += 5;
 					rangedCrit += 5;
 					meleeCrit += 5;
@@ -8400,10 +_,13 @@
 					meleeSpeed += 0.07f;
 
 				if (armor[k].type == 792 || armor[k].type == 793 || armor[k].type == 794) {
+					allDamage += 0.02f;
+					/*
 					meleeDamage += 0.02f;
 					rangedDamage += 0.02f;
 					magicDamage += 0.02f;
 					minionDamage += 0.02f;
+					*/
 				}
 
 				if (armor[k].type == 371) {
@@ -8940,31 +_,43 @@
 				}
 
 				if (armor[k].prefix == 69) {
+					allDamage += 0.01f;
+					/*
 					meleeDamage += 0.01f;
 					rangedDamage += 0.01f;
 					magicDamage += 0.01f;
 					minionDamage += 0.01f;
+					*/
 				}
 
 				if (armor[k].prefix == 70) {
+					allDamage += 0.02f;
+					/*
 					meleeDamage += 0.02f;
 					rangedDamage += 0.02f;
 					magicDamage += 0.02f;
 					minionDamage += 0.02f;
+					*/
 				}
 
 				if (armor[k].prefix == 71) {
+					allDamage += 0.03f;
+					/*
 					meleeDamage += 0.03f;
 					rangedDamage += 0.03f;
 					magicDamage += 0.03f;
 					minionDamage += 0.03f;
+					*/
 				}
 
 				if (armor[k].prefix == 72) {
+					allDamage += 0.04f;
+					/*
 					meleeDamage += 0.04f;
 					rangedDamage += 0.04f;
 					magicDamage += 0.04f;
 					minionDamage += 0.04f;
+					*/
 				}
 
 				if (armor[k].prefix == 73)
@@ -9003,13 +_,14 @@
 			if (skyStoneEffects) {
 				lifeRegen += 2;
 				statDefense += 4;
 				meleeSpeed += 0.1f;
-				meleeDamage += 0.1f;
+				allDamage += 0.1f;
+				//meleeDamage += 0.1f;
 				meleeCrit += 2;
-				rangedDamage += 0.1f;
+				//rangedDamage += 0.1f;
 				rangedCrit += 2;
-				magicDamage += 0.1f;
+				//magicDamage += 0.1f;
 				magicCrit += 2;
 				pickSpeed -= 0.15f;
-				minionDamage += 0.1f;
+				//minionDamage += 0.1f;
 				minionKB += 0.5f;
@@ -9210,6 +_,8 @@
 				}
 			}
 
+			TileLoader.DisableSmartCursor(Main.tile[num, num2], ref flag);
+
 			int tileBoost = item.tileBoost;
 			int num3 = 0;
 			if (item.type == 1071 || item.type == 1543 || item.type == 1072 || item.type == 1544) {
@@ -9345,12 +_,15 @@
 			if (currentItem.type == 3015) {
 				aggro -= 400;
 				meleeCrit += 5;
 				magicCrit += 5;
 				rangedCrit += 5;
+				allDamage += 0.05f;
+				/*
 				meleeDamage += 0.05f;
 				magicDamage += 0.05f;
 				rangedDamage += 0.05f;
 				minionDamage += 0.05f;
+				*/
 			}
 
 			if (currentItem.type == 3016)
@@ -9533,11 +_,14 @@
 			if (currentItem.type == 1301) {
 				meleeCrit += 8;
 				rangedCrit += 8;
 				magicCrit += 8;
+				allDamage += 0.1f;
+				/*
 				meleeDamage += 0.1f;
 				rangedDamage += 0.1f;
 				magicDamage += 0.1f;
 				minionDamage += 0.1f;
+				*/
 			}
 
 			if (currentItem.type == 982) {
@@ -9712,6 +_,6 @@
 			if (currentItem.type == 861) {
 				accMerman = true;
 				wolfAcc = true;
-				if (hideVisibleAccessory[itemSlot]) {
+					if (hideVisual) {
 					hideMerman = true;
 					hideWolf = true;
@@ -9750,5 +_,5 @@
 			if (currentItem.type == 485) {
 				wolfAcc = true;
-				if (hideVisibleAccessory[itemSlot])
+				if (hideVisual)
 					hideWolf = true;
 			}
@@ -9909,6 +_,6 @@
 			if (currentItem.type == 3110) {
 				accMerman = true;
 				wolfAcc = true;
-				if (hideVisibleAccessory[itemSlot]) {
+						if (hideVisual) {
 					hideMerman = true;
 					hideWolf = true;
@@ -9942,6 +_,3 @@
 			if (currentItem.type == 935) {
+				allDamage += 0.12f;
-				magicDamage += 0.12f;
-				meleeDamage += 0.12f;
-				rangedDamage += 0.12f;
-				minionDamage += 0.12f;
 			}
@@ -10037,6 +_,6 @@
 			if (currentItem.type == 497) {
 				accMerman = true;
-				if (hideVisibleAccessory[itemSlot])
+				if (hideVisual)
 					hideMerman = true;
 			}
 
@@ -10060,8 +_,9 @@
 			if (Main.myPlayer != whoAmI)
-				return;
+				//return;
+				goto postMusicBoxes; // TODO: double check wings logic, etc.
 
-			if (currentItem.type == 576 && Main.rand.Next(540) == 0 && Main.curMusic > 0 && Main.curMusic <= 89) {
+			if (currentItem.type == 576 && Main.rand.Next(540) == 0 && Main.curMusic > 0) {
 				SoundEngine.PlaySound(SoundID.Item166, base.Center);
 				int num3 = -1;
 				if (Main.curMusic == 1)
 					num3 = 0;
@@ -10223,9 +_,13 @@
 				else if (Main.curMusic == 89)
 					currentItem.SetDefaults(5044);
-				else if (Main.curMusic > 13)
+				else if (Main.curMusic > 13 && Main.curMusic < Main.maxMusic)
 					currentItem.SetDefaults(1596 + Main.curMusic - 14);
 				else if (num3 != -1)
+					;//Silence
+				else if (Main.curMusic < Main.maxMusic)
 					currentItem.SetDefaults(num3 + 562);
+				else if (SoundLoader.musicToItem.ContainsKey(Main.curMusic))
+					currentItem.SetDefaults(SoundLoader.musicToItem[Main.curMusic]);
 			}
 
 			ApplyMusicBox(currentItem);
@@ -10445,10 +_,13 @@
 
 			if (head == 112 && body == 75 && legs == 64) {
 				setBonus = Language.GetTextValue("ArmorSetBonus.Pumpkin");
+				allDamage += 0.1f;
+				/*
 				meleeDamage += 0.1f;
 				magicDamage += 0.1f;
 				rangedDamage += 0.1f;
 				minionDamage += 0.1f;
+				*/
 			}
 
 			if (head == 22 && body == 14 && legs == 14) {
@@ -10501,7 +_,7 @@
 					beetleCounter += 200f;
 
 				if (num != beetleOrbs && beetleOrbs > 0) {
-					for (int j = 0; j < 22; j++) {
+					for (int j = 0; j < MaxBuffs; j++) {
 						if (buffType[j] >= 98 && buffType[j] <= 100 && buffType[j] != 97 + num)
 							DelBuff(j);
 					}
@@ -10514,7 +_,7 @@
 				int num5 = 180;
 				if (beetleCounter >= (float)num5) {
 					if (beetleOrbs > 0 && beetleOrbs < 3) {
-						for (int k = 0; k < 22; k++) {
+						for (int k = 0; k < MaxBuffs; k++) {
 							if (buffType[k] >= 95 && buffType[k] <= 96)
 								DelBuff(k);
 						}
@@ -10651,7 +_,7 @@
 				AddBuff(60, 18000);
 			}
 			else if (crystalLeaf) {
-				for (int n = 0; n < 22; n++) {
+				for (int n = 0; n < MaxBuffs; n++) {
 					if (buffType[n] == 60)
 						DelBuff(n);
 				}
@@ -10797,7 +_,7 @@
 				int num9 = 180;
 				if (solarCounter >= num9) {
 					if (solarShields > 0 && solarShields < 3) {
-						for (int num10 = 0; num10 < 22; num10++) {
+						for (int num10 = 0; num10 < MaxBuffs; num10++) {
 							if (buffType[num10] >= 170 && buffType[num10] <= 171)
 								DelBuff(num10);
 						}
@@ -10938,8 +_,10 @@
 				setMonkT2 = true;
 				maxTurrets++;
 			}
 
 			ApplyArmorSoundAndDustChanges();
+
+			ItemLoader.UpdateArmorSet(this, armor[0], armor[1], armor[2]);
 		}
 
 		public void UpdateSocialShadow() {
@@ -10987,6 +_,7 @@
 							num10 = 4;
 							break;
 					}
+					TileLoader.FixSmartInteractCoords(tile2.type, ref num9, ref num10, ref num11, ref num12, ref num13, ref num14);
 
 					if (num9 == 0 || num10 == 0)
 						continue;
@@ -11028,6 +_,9 @@
 					if (!nPC.active || !nPC.townNPC || !nPC.Hitbox.Intersects(value6))
 						continue;
 
+					if (!NPCLoader.CanChat(nPC, nPC.townNPC))
+						continue;
+
 					Main.SmartInteractNPCsNearby.Add(num18);
 					if (!flag4) {
 						float num19 = nPC.Hitbox.Distance(point);
@@ -11184,6 +_,8 @@
 			bool flag6 = ZoneRain && ZoneSnow;
 			bool flag7 = point.Y > Main.maxTilesY - 320;
 			bool flag8 = ZoneOverworldHeight && (point.X < 380 || point.X > Main.maxTilesX - 380);
+			// TODO, are these flags a problem?
+			PlayerHooks.UpdateBiomes(this);
 			ManageSpecialBiomeVisuals("Stardust", ZoneTowerStardust, value4 - new Vector2(0f, 10f));
 			ManageSpecialBiomeVisuals("Nebula", ZoneTowerNebula, value3 - new Vector2(0f, 10f));
 			ManageSpecialBiomeVisuals("Vortex", ZoneTowerVortex, value2 - new Vector2(0f, 10f));
@@ -11322,6 +_,7 @@
 				}
 			}
 
+			PlayerHooks.UpdateBiomeVisuals(this);
 			if (!dead) {
 				Point point2 = base.Center.ToTileCoordinates();
 				if (WorldGen.InWorld(point2.X, point2.Y, 1)) {
@@ -11534,8 +_,9 @@
 			hasFloatingTube = false;
 			hasUnicornHorn = false;
 			leinforsHair = false;
+			PlayerHooks.UpdateDead(this);
 			gravDir = 1f;
-			for (int i = 0; i < 22; i++) {
+			for (int i = 0; i < MaxBuffs; i++) {
 				if (buffType[i] <= 0 || !Main.persistentBuff[buffType[i]]) {
 					buffTime[i] = 0;
 					buffType[i] = 0;
@@ -11720,9 +_,18 @@
 				if (toolStrategy == 0 || toolStrategy == 4) {
 					float num = Math.Abs((float)Main.mouseX + Main.screenPosition.X - (position.X + (float)(width / 2)));
 					float num2 = Math.Abs((float)Main.mouseY + Main.screenPosition.Y - (position.Y + (float)(height / 2))) * 1.3f;
 					if ((float)Math.Sqrt(num * num + num2 * num2) > 200f)
 						toolStrategy = 5;
 				}
 
+				int modSelect = TileLoader.AutoSelect(tX, tY, this);
+				if (modSelect >= 0) {
+					if (nonTorch == -1)
+						nonTorch = selectedItem;
+
+					selectedItem = modSelect;
+					return;
+				}
+
 				SmartSelect_PickToolForStrategy(tX, tY, toolStrategy, wetTile);
 				_lastSmartCursorToolStrategy = toolStrategy;
@@ -11786,16 +_,16 @@
 						}
 						break;
 					case 4:
-						if (inventory[i].type != 282 && inventory[i].type != 286 && inventory[i].type != 3002 && inventory[i].type != 3112 && inventory[i].type != 4776 && inventory[i].type != 930 && ItemID.Sets.Torches[type] && !ItemID.Sets.WaterTorches[type]) {
+						if (inventory[i].type != 282 && inventory[i].type != 286 && inventory[i].type != 3002 && inventory[i].type != 3112 && inventory[i].type != 4776 && inventory[i].type != 930 && ItemID.Sets.Torches[type] && !ItemID.Sets.WaterTorches[type] && !ItemID.Sets.Glowsticks[type]) {
 							if (nonTorch == -1)
 								nonTorch = selectedItem;
 
-							if (inventory[selectedItem].createTile != 4)
+							if (!TileLoader.IsTorch(inventory[selectedItem].createTile))
 								selectedItem = i;
 
 							break;
 						}
-						if ((type == 282 || type == 286 || type == 3002 || type == 3112 || type == 4776) && wetTile) {
+						if ((type == 282 || type == 286 || type == 3002 || type == 3112 || type == 4776 || ItemID.Sets.Glowsticks[type]) && wetTile) {
 							SmartSelect_SelectItem(i);
 							return;
 						}
@@ -11821,10 +_,10 @@
 					case 5:
 						if (ItemID.Sets.Torches[type]) {
 							if (nonTorch == -1)
 								nonTorch = selectedItem;
 
-							if (inventory[selectedItem].createTile != 4)
+							if (!TileLoader.IsTorch(inventory[selectedItem].createTile))
 								selectedItem = i;
 
 							break;
 						}
@@ -11849,6 +_,7 @@
 							case 286:
 							case 3002:
 							case 3112:
 							case 4776:
+							case int thisType when ItemID.Sets.Glowsticks[thisType]:
 								SmartSelect_SelectItem(i);
 								return;
@@ -12344,10 +_,16 @@
 			lifeRegen = 0;
 			manaCost = 1f;
 			meleeSpeed = 1f;
+			allDamage = 1f;
 			meleeDamage = 1f;
 			rangedDamage = 1f;
 			magicDamage = 1f;
 			minionDamage = 1f;
+			allDamageMult = 1f;
+			meleeDamageMult = 1f;
+			rangedDamageMult = 1f;
+			magicDamageMult = 1f;
+			minionDamageMult = 1f;
 			meleeCrit = 4;
 			rangedCrit = 4;
 			magicCrit = 4;
@@ -12711,6 +_,7 @@
 			}
 
 			mount.CheckMountBuff(this);
+			PlayerHooks.ResetEffects(this);
 		}
 
 		private void UpdateLadyBugLuckTime() {
@@ -12835,6 +_,7 @@
 				lifeRegen -= 100;
 			}
 
+			PlayerHooks.UpdateBadLifeRegen(this);
 			if (honey && lifeRegen < 0) {
 				lifeRegen += 4;
 				if (lifeRegen > 0)
@@ -12879,6 +_,7 @@
 			if (whoAmI == Main.myPlayer && Main.SceneMetrics.HasHeartLantern)
 				lifeRegen += 2;
 
+			PlayerHooks.UpdateLifeRegen(this);
 			if (bleed)
 				lifeRegenTime = 0;
 
@@ -12943,6 +_,7 @@
 			if (rabid)
 				num2 = ((!shinyStone) ? (num2 / 2f) : (num2 * 0.75f));
 
+			PlayerHooks.NaturalLifeRegen(this, ref num2);
 			float num4 = (float)statLifeMax2 / 400f * 0.85f + 0.15f;
 			num2 *= num4;
 			lifeRegen += (int)Math.Round(num2);
@@ -13108,8 +_,8 @@
 
 		public void UpdateJumpHeight() {
 			if (mount.Active) {
-				jumpHeight = mount.JumpHeight(velocity.X);
+				jumpHeight = mount.JumpHeight(this, velocity.X);
-				jumpSpeed = mount.JumpSpeed(velocity.X);
+				jumpSpeed = mount.JumpSpeed(this, velocity.X);
 			}
 			else {
 				if (jumpBoost) {
@@ -14837,7 +_,9 @@
 				float num5 = 0.1f;
 				if (wingsLogic == 26) {
 					num2 = 0.75f;
+					//patch file: num2, num5
 					num5 = 0.15f;
 					num4 = 1f;
+					//patch file: num, num3, num4
 					num3 = 2.5f;
 					num = 0.125f;
@@ -14935,6 +_,7 @@
 						num = 0.15f;
 				}
 
+				ItemLoader.VerticalWingSpeeds(this, ref num2, ref num5, ref num4, ref num3, ref num);
 				velocity.Y -= num * gravDir;
 				if (gravDir == 1f) {
 					if (velocity.Y > 0f)
@@ -15376,6 +_,7 @@
 			if (Main.projectile[grappling[0]].type >= 646 && Main.projectile[grappling[0]].type <= 649)
 				num9 = 16f;
 
+			ProjectileLoader.GrapplePullSpeed(Main.projectile[grappling[0]], this, ref num9);
 			float num10 = num8;
 			num10 = ((!(num8 > num9)) ? 1f : (num9 / num8));
 			preferedPlayerVelocityX *= num10;
@@ -16010,7 +_,8 @@
 			slippy = (num3 == 161 || num3 == 162 || num3 == 163 || num3 == 164 || num3 == 200 || num3 == 127);
 			slippy2 = (num3 == 197);
 			powerrun = (num3 == 198);
 			runningOnSand = (TileID.Sets.Conversion.Sand[num3] || TileID.Sets.Conversion.Sandstone[num3] || TileID.Sets.Conversion.HardenedSand[num3]);
+			TileLoader.FloorVisuals(num3, this);
 			if (Main.tile[num - 1, num2].slope() != 0 || Main.tile[num, num2].slope() != 0 || Main.tile[num + 1, num2].slope() != 0)
 				num3 = -1;
 
@@ -16048,7 +_,7 @@
 		}
 
 		private void MakeFloorDust(bool Falling, int type) {
-			if (type != 147 && type != 25 && type != 53 && type != 189 && type != 0 && type != 123 && type != 57 && type != 112 && type != 116 && type != 196 && type != 193 && type != 195 && type != 197 && type != 199 && type != 229 && type != 371 && type != 460)
+			if (type != 147 && type != 25 && type != 53 && type != 189 && type != 0 && type != 123 && type != 57 && type != 112 && type != 116 && type != 196 && type != 193 && type != 195 && type != 197 && type != 199 && type != 229 && type != 371 && type != 460 && !TileLoader.HasWalkDust(type))
 				return;
 
 			int num = 1;
@@ -16058,6 +_,7 @@
 			for (int i = 0; i < num; i++) {
 				bool flag = true;
 				int num2 = 76;
+				//patch file: type, num2, flag
 				if (type == 53)
 					num2 = 32;
 
@@ -16128,6 +_,7 @@
 				if (type == 197)
 					newColor = new Color(97, 200, 255, 100);
 
+				TileLoader.WalkDust(type, ref num2, ref flag, ref newColor);
 				if (!Falling) {
 					float num3 = Math.Abs(velocity.X) / 3f;
 					if ((float)Main.rand.Next(100) > num3 * 100f)
@@ -16506,7 +_,8 @@
 			if (!active || flag)
 				return;
 
 			UpdateMiscCounter();
+			PlayerHooks.PreUpdate(this);
 			infernoCounter++;
 			if (infernoCounter >= 180)
 				infernoCounter = 0;
@@ -16669,6 +_,7 @@
 					dJumpEffectUnicorn = false;
 				}
 				else {
+					bool isCustomWings = ItemLoader.WingUpdate(this, flag19);
 					if (flag19) {
 						if (wings == 10 && Main.rand.Next(2) == 0) {
 							int num42 = 4;
@@ -16852,6 +_,7 @@
 						}
 					}
 
+					PlayerHooks.SetControls(this);
 					if (controlInv) {
 						if (releaseInventory)
 							ToggleInv();
@@ -17224,11 +_,5 @@
 					}
 
-					bool flag12 = false;
-					for (int num23 = 3; num23 < 10; num23++) {
-						if (armor[num23].stack > 0 && armor[num23].wingSlot > -1)
-							flag12 = true;
-					}
-
 					if (stoned) {
 						int num24 = (int)(((float)num18 * gravDir - 2f) * 20f);
 						if (num24 > 0) {
@@ -17236,7 +_,7 @@
 							immune = false;
 						}
 					}
-					else if (((gravDir == 1f && num18 > num17) || (gravDir == -1f && num18 < -num17)) && !noFallDmg && !flag12) {
+					else if (((gravDir == 1f && num18 > num17) || (gravDir == -1f && num18 < -num17)) && !noFallDmg && wingsLogic == 0) {
 						immune = false;
 						int num25 = (int)((float)num18 * gravDir - (float)num17) * 10;
 						if (mount.Active)
@@ -17366,7 +_,7 @@
 							}
 						}
 					}
-					else {
+					else if (!isCustomWings) {
 						int num94 = 4;
 						if (wings == 32)
 							num94 = 3;
@@ -17379,12 +_,14 @@
 					AddBuff(194, 2, quiet: false);
 			}
 
+			PlayerHooks.PreUpdateBuffs(this);
-			for (int num26 = 0; num26 < 323; num26++) {
+			for (int num26 = 0; num26 < BuffLoader.BuffCount; num26++) {
 				buffImmune[num26] = false;
 			}
 
 			UpdateProjectileCaches(i);
 			UpdateBuffs(i);
+			PlayerHooks.PostUpdateBuffs(this);
 			if (whoAmI == Main.myPlayer) {
 				if (!onFire && !poisoned)
 					trapDebuffSource = false;
@@ -17428,7 +_,7 @@
 			hideWolf = false;
 			forceWerewolf = false;
 			if (whoAmI == Main.myPlayer) {
-				for (int num27 = 0; num27 < 22; num27++) {
+				for (int num27 = 0; num27 < MaxBuffs; num27++) {
 					if (buffType[num27] > 0 && buffTime[num27] <= 0)
 						DelBuff(num27);
 				}
@@ -17481,6 +_,7 @@
 
 			UpdateArmorLights();
 			UpdateArmorSets(i);
+			PlayerHooks.PostUpdateEquips(this); // TODO, move down?
 			if (maxTurretsOld != maxTurrets) {
 				UpdateMaxTurrets();
 				maxTurretsOld = maxTurrets;
@@ -17625,5 +_,5 @@
 			}
 
 			if (manaSick)
-				magicDamage *= 1f - manaSickReduction;
+				magicDamageMult *= 1f - manaSickReduction;
 
@@ -17680,6 +_,7 @@
 			}
 
 			meleeSpeed = 1f / meleeSpeed;
+			PlayerHooks.PostUpdateMiscEffects(this);
 			UpdateLifeRegen();
 			soulDrain = 0;
 			UpdateManaRegen();
@@ -17692,7 +_,7 @@
 			runAcceleration *= moveSpeed;
 			maxRunSpeed *= moveSpeed;
 			UpdateJumpHeight();
-			for (int num33 = 0; num33 < 22; num33++) {
+			for (int num33 = 0; num33 < MaxBuffs; num33++) {
 				if (buffType[num33] > 0 && buffTime[num33] > 0 && buffImmune[buffType[num33]])
 					DelBuff(num33);
 			}
@@ -17703,12 +_,9 @@
 			if (witheredArmor)
 				statDefense /= 2;
 
 			if (witheredWeapon) {
-				meleeDamage *= 0.5f;
+				allDamageMult *= 0.5f;
-				rangedDamage *= 0.5f;
-				magicDamage *= 0.5f;
-				minionDamage *= 0.5f;
 			}
 
 			lastTileRangeX = tileRangeX;
 			lastTileRangeY = tileRangeY;
@@ -18206,6 +_,7 @@
 						mount.UpdateDrill(this, controlUp, controlDown);
 				}
 
+				PlayerHooks.PostUpdateRunSpeeds(this);
 				HorizontalMovement();
 				if (gravControl) {
 					if (controlUp && releaseUp) {
@@ -18308,4 +_,4 @@
 						rocketTime = 0;
 					}
 
-					if (flag20 && wings != 4 && wings != 22 && wings != 0 && wings != 24 && wings != 28 && wings != 30 && wings != 33 && wings != 45) {
+					if (flag20 && wings != 4 && wings != 22 && wings != 0 && wings != 24 && wings != 28 && wings != 30 && wings != 33 && wings != 45 && !isCustomWings) {
@@ -18551,7 +_,7 @@
 											wingFrame = 0;
 									}
 								}
-								else if (wings != 22 && wings != 28) {
+								else if (wings != 22 && wings != 28 && !isCustomWings) {
 									if (wings == 30) {
 										wingFrameCounter++;
 										int num62 = 5;
@@ -18758,7 +_,7 @@
 				}
 
 				if (flag22 && Main.myPlayer == whoAmI) {
-					for (int num79 = 0; num79 < 22; num79++) {
+					for (int num79 = 0; num79 < MaxBuffs; num79++) {
 						if (buffType[num79] == 38)
 							DelBuff(num79);
 					}
@@ -18969,7 +_,7 @@
 
 			if (num83) {
 				if (onFire && !lavaWet) {
-					for (int num84 = 0; num84 < 22; num84++) {
+					for (int num84 = 0; num84 < MaxBuffs; num84++) {
 						if (buffType[num84] == 24)
 							DelBuff(num84);
 					}
@@ -19215,6 +_,7 @@
 			if (vortexDebuff)
 				base.velocity.Y = base.velocity.Y * 0.8f + (float)Math.Cos(base.Center.X % 120f / 120f * ((float)Math.PI * 2f)) * 5f * 0.2f;
 
+			PlayerHooks.PreUpdateMovement(this);
 			if (tongued) {
 				base.position += base.velocity;
 				flag28 = false;
@@ -19254,7 +_,7 @@
 					if (!flag5)
 						Projectile.NewProjectile(myX * 16 + 8, num18 * 16 + 2, 0f, 0f, 419 + Main.rand.Next(4), 0, 0f, whoAmI, myX, num18);
 				}
-				else if (Main.tile[myX, myY].type == 4 || Main.tile[myX, myY].type == 13 || Main.tile[myX, myY].type == 33 || Main.tile[myX, myY].type == 49 || (Main.tile[myX, myY].type == 50 && Main.tile[myX, myY].frameX == 90) || Main.tile[myX, myY].type == 174) {
+				else if (TileLoader.IsTorch(Main.tile[myX, myY].type) || Main.tile[myX, myY].type == 13 || Main.tile[myX, myY].type == 33 || Main.tile[myX, myY].type == 49 || (Main.tile[myX, myY].type == 50 && Main.tile[myX, myY].frameX == 90) || Main.tile[myX, myY].type == 174) {
 					flag2 = true;
 					WorldGen.KillTile(myX, myY);
 					GamepadEnableGrappleCooldown();
@@ -19304,7 +_,8 @@
 			grappling[0] = -1;
 			grapCount = 0;
 			UpdateReleaseUseTile();
 			UpdateAdvancedShadows();
+			PlayerHooks.PostUpdate(this);
 		}
 
 		private void UpdateControlHolds() {
@@ -19440,8 +_,9 @@
 				if (wingStats.AccRunSpeedOverride != -1f && wingStats.AccRunSpeedOverride > accRunSpeed)
 					accRunSpeed = wingStats.AccRunSpeedOverride;
 
 				runAcceleration *= wingStats.AccRunAccelerationMult;
 			}
+			ItemLoader.HorizontalWingSpeeds(this);
 
 			if (wingsLogic == 45)
 				runSlowdown *= 6f;
@@ -20750,6 +_,9 @@
 						break;
 				}
 
+				if (!NPCLoader.CanHitPlayer(Main.npc[i], this, ref specialHitSetter) || !PlayerHooks.CanBeHitByNPC(this, Main.npc[i], ref specialHitSetter))
+					continue;
+
 				if ((specialHitSetter == -1 && immune) || (dash == 2 && i == eocHit && eocDash > 0) || npcTypeNoAggro[Main.npc[i].type])
 					continue;
 
@@ -20785,5 +_,8 @@
 					if (num5 > 0 && HasNPCBannerBuff(num5))
 						num4 = ((!Main.expertMode) ? ((int)((float)num4 * ItemID.Sets.BannerStrength[Item.BannerToItem(num5)].NormalDamageReceived)) : ((int)((float)num4 * ItemID.Sets.BannerStrength[Item.BannerToItem(num5)].ExpertDamageReceived)));
 
+				bool crit = false;
+				NPCLoader.ModifyHitPlayer(Main.npc[i], this, ref num4, ref crit);
+				PlayerHooks.ModifyHitByNPC(this, Main.npc[i], ref num4, ref crit);
 					if (whoAmI == Main.myPlayer && num2 > 0f && !immune && !Main.npc[i].dontTakeDamage) {
 						int num6 = (int)((float)num4 * num2);
@@ -20786,6 +_,8 @@
 					showItemIcon2 = num27;
 				}
 			}
+
+			TileLoader.MouseOver(myX, myY);
 		}
 
 		public Color ChatColor() {
@@ -20799,7 +_,11 @@
 					if (!immune && !flag2)
 						StatusFromNPC(Main.npc[i]);
 
-					if (flag)
-						Hurt(PlayerDeathReason.ByNPC(i), num4, num3, pvp: false, quiet: false, Crit: false, specialHitSetter);
+					if (flag) {
+						int realDamage = (int)Hurt(PlayerDeathReason.ByNPC(i), num4, num3, pvp: false, quiet: false, Crit: false, specialHitSetter);
+						//TODO, what is this flag?, have these parameters changed? (int)this.Hurt(num146, num145, false, false, Lang.deathMsg(-1, num140, -1, -1, 0, 0), crit, num141);
+						NPCLoader.OnHitPlayer(Main.npc[i], this, realDamage, crit);
+						PlayerHooks.OnHitByNPC(this, Main.npc[i], realDamage, crit);
+					}
 
 					if (num) {
@@ -20875,4 +_,6 @@
 		}
 
 		public void ItemCheck_ManageRightClickFeatures() {
+			//ItemLoader.AltFunctionUse(this.inventory[this.selectedItem], this)
+			// TODO, reintegrate AltFunctionUse
 			bool flag = selectedItem != 58 && controlUseTile && !tileInteractionHappened && releaseUseItem && !controlUseItem && !mouseInterface && !CaptureManager.Instance.Active && !Main.HoveringOverAnNPC && !Main.SmartInteractShowingGenuine;
@@ -20921,6 +_,11 @@
 				controlUseItem = true;
 			}
 
+			if (flag && altFunctionUse == 0 && ItemLoader.AltFunctionUse(inventory[selectedItem], this)) {
+				altFunctionUse = 1;
+				controlUseItem = true;
+			}
+
 			if (!controlUseItem && altFunctionUse == 1)
 				altFunctionUse = 0;
 
@@ -20951,7 +_,9 @@
 						continue;
 
 					Main.item[j].beingGrabbed = true;
+					if (ItemLoader.GrabStyle(Main.item[j], this)) {
+					}
-					if (manaMagnet && (Main.item[j].type == 184 || Main.item[j].type == 1735 || Main.item[j].type == 1868)) {
+					else if (manaMagnet && (Main.item[j].type == 184 || Main.item[j].type == 1735 || Main.item[j].type == 1868)) {
 						Vector2 vector = new Vector2(Main.item[j].position.X + (float)(Main.item[j].width / 2), Main.item[j].position.Y + (float)(Main.item[j].height / 2));
 						float num3 = base.Center.X - vector.X;
 						float num4 = base.Center.Y - vector.Y;
@@ -21079,7 +_,10 @@
 		}
 
 		public void ScrollHotbar(int Offset) {
+			//disable hotbar scrolling when using auto select
+			//previously it only worked when scrolling between 0 and 9, and made the sound
+			if (selectedItem >= 10) return;
 			Offset = ClampHotbarOffset(Offset);
 			selectedItem += Offset;
 			if (Offset != 0) {
 				SoundEngine.PlaySound(12);
@@ -21307,6 +_,8 @@
 					cursorItemIconID = -1;
 				}
 			}
+
+			TileLoader.MouseOverFar(myX, myY);
 		}
 
 		private void TileInteractionsUse(int myX, int myY) {
@@ -21322,7 +_,8 @@
 				bool flag3 = false;
 				for (int i = 0; i < 58; i++) {
 					if (inventory[i].type == 949 && inventory[i].stack > 0) {
+						if (ItemLoader.ConsumeItem(inventory[i], this))
-						inventory[i].stack--;
+							inventory[i].stack--;
 						if (inventory[i].stack <= 0)
 							inventory[i].SetDefaults();
 
@@ -21397,7 +_,7 @@
 					Wiring.HitSwitch(myX, myY);
 					NetMessage.SendData(59, -1, -1, null, myX, myY);
 				}
-				else if (Main.tile[myX, myY].type == 139) {
+				else if (Main.tile[myX, myY].type == 139 || TileLoader.IsModMusicBox(Main.tile[myX, myY])) {
 					flag2 = true;
 					SoundEngine.PlaySound(28, myX * 16, myY * 16, 0);
 					WorldGen.SwitchMB(myX, myY);
@@ -21824,7 +_,8 @@
 					if (!NPC.AnyNPCs(245) && Main.hardMode && NPC.downedPlantBoss) {
 						for (int n = 0; n < 58; n++) {
 							if (inventory[n].type == 1293) {
+								if (ItemLoader.ConsumeItem(inventory[n], this))
-								inventory[n].stack--;
+									inventory[n].stack--;
 								if (inventory[n].stack <= 0)
 									inventory[n].SetDefaults();
 
@@ -21842,19 +_,22 @@
 							NetMessage.SendData(61, -1, -1, null, whoAmI, 245f);
 					}
 				}
-				else if (Main.tile[myX, myY].type == 10) {
+				else if (Main.tile[myX, myY].type == TileID.ClosedDoor || TileLoader.OpenDoorID(Main.tile[myX, myY]) >= 0) {
 					flag2 = true;
 					if (WorldGen.IsLockedDoor(myX, myY)) {
 						int num43 = 1141;
 						for (int num44 = 0; num44 < 58; num44++) {
 							if (inventory[num44].type == num43 && inventory[num44].stack > 0) {
+								if (ItemLoader.ConsumeItem(inventory[num44], this))
-								inventory[num44].stack--;
+									inventory[num44].stack--;
 								if (inventory[num44].stack <= 0)
 									inventory[num44] = new Item();
 
 								WorldGen.UnlockDoor(myX, myY);
 								if (Main.netMode == 1)
 									NetMessage.SendData(52, -1, -1, null, whoAmI, 2f, myX, myY);
+
+								break;
 							}
 						}
 					}
@@ -21869,8 +_,8 @@
 								NetMessage.SendData(19, -1, -1, null, 0, myX, myY, -direction);
 						}
 					}
 				}
-				else if (Main.tile[myX, myY].type == 11) {
+				else if (TileLoader.CloseDoorID(Main.tile[myX, myY]) >= 0) {
 					flag2 = true;
 					if (WorldGen.CloseDoor(myX, myY))
 						NetMessage.SendData(19, -1, -1, null, 1, myX, myY, direction);
@@ -22042,7 +_,7 @@
 					if (flag11)
 						NetMessage.SendTileSquare(-1, num62, num63, 3);
 				}
-				else if (TileID.Sets.BasicChest[Main.tile[myX, myY].type] || Main.tile[myX, myY].type == 29 || Main.tile[myX, myY].type == 97 || Main.tile[myX, myY].type == 463 || Main.tile[myX, myY].type == 491) {
+				else if ((TileID.Sets.BasicChest[Main.tile[myX, myY].type] || Main.tile[myX, myY].type == 29 || Main.tile[myX, myY].type == 97 || Main.tile[myX, myY].type == 463 || Main.tile[myX, myY].type == 491) && Main.tile[myX, myY].type < TileID.Count) {
 					flag2 = true;
 					Main.mouseRightRelease = false;
 					int num68 = 0;
@@ -22133,8 +_,10 @@
 					bodyFrame.Y = bodyFrame.Height * 2;
 				}
 				else {
-					if (inventory[selectedItem].useStyle != 5)
+					if (inventory[selectedItem].useStyle != 5) {
+						ItemLoader.UseItemFrame(this.inventory[this.selectedItem], this); //TODO: does this method need to return bool? Should it run before the rest of the useStyle code?
 						return;
+					}
 
 					if (inventory[selectedItem].type == 281 || inventory[selectedItem].type == 986) {
 						bodyFrame.Y = bodyFrame.Height * 2;
@@ -22147,7 +_,9 @@
 												continue;
 
 											if (num72 != 329) {
+												if (ItemLoader.ConsumeItem(inventory[num76], this))
-												inventory[num76].stack--;
+													inventory[num76].stack--;
+
 												if (inventory[num76].stack <= 0)
 													inventory[num76] = new Item();
 											}
@@ -22204,6 +_,10 @@
 					if (flag14)
 						LaunchMinecartHook(myX, myY);
 				}
+
+				if (TileLoader.RightClick(myX, myY))
+					flag2 = true;
+				// todo check out this flag2. return? "this.releaseUseTile = false;"
 			}
 
 			if (flag2)
@@ -23149,7 +_,7 @@
 				cursorItemIconID = 3747;
 			}
 
-			if (Main.tile[myX, myY].type == 219 && (inventory[selectedItem].type == 424 || inventory[selectedItem].type == 1103)) {
+			if (Main.tile[myX, myY].type == 219 && ItemID.Sets.ExtractinatorMode[inventory[selectedItem].type] > -1) {
 				noThrow = 2;
 				cursorItemIconEnabled = true;
 				cursorItemIconID = inventory[selectedItem].type;
@@ -23494,11 +_,13 @@
 
 						if (num3 > 0 && Main.tile[num, num2].color() != num3 && WorldGen.paintTile(num, num2, (byte)num3, broadCast: true)) {
 							int num5 = num4;
+							if (ItemLoader.ConsumeItem(inventory[num5], this))
-							inventory[num5].stack--;
+								inventory[num5].stack--;
+
 							if (inventory[num5].stack <= 0)
 								inventory[num5].SetDefaults();
 
-							itemTime = inventory[selectedItem].useTime;
+							itemTime = PlayerHooks.TotalUseTime(inventory[selectedItem].useTime, this, inventory[selectedItem]);
 						}
 					}
 				}
@@ -23522,11 +_,13 @@
 
 						if (num8 > 0 && Main.tile[num6, num7].wallColor() != num8 && WorldGen.paintWall(num6, num7, (byte)num8, broadCast: true)) {
 							int num10 = num9;
+							if (ItemLoader.ConsumeItem(inventory[num10], this))
-							inventory[num10].stack--;
+								inventory[num10].stack--;
+
 							if (inventory[num10].stack <= 0)
 								inventory[num10].SetDefaults();
 
-							itemTime = inventory[selectedItem].useTime;
+							itemTime = PlayerHooks.TotalUseTime(inventory[selectedItem].useTime, this, inventory[selectedItem]);
 						}
 					}
 				}
@@ -23673,9 +_,19 @@
 					bool flag3 = false;
 					bool flag4 = false;
 					TileObject objectData = default(TileObject);
+					if (!TileLoader.CanPlace(tileTargetX, tileTargetY, inventory[selectedItem].createTile)) {
+					}
-					if (TileObjectData.CustomPlace(inventory[selectedItem].createTile, inventory[selectedItem].placeStyle) && inventory[selectedItem].createTile != 82) {
+					else if (TileObjectData.CustomPlace(inventory[selectedItem].createTile, inventory[selectedItem].placeStyle) && inventory[selectedItem].createTile != 82) {
 						flag4 = true;
-						flag3 = TileObject.CanPlace(tileTargetX, tileTargetY, (ushort)inventory[selectedItem].createTile, inventory[selectedItem].placeStyle, direction, out objectData);
+						int hackCreateTile = inventory[selectedItem].createTile;
+						int hackPlaceStyle = inventory[selectedItem].placeStyle;
+						if (hackCreateTile == TileID.Saplings) {
+							Tile soil = Main.tile[tileTargetX, tileTargetY + 1];
+							if (soil.active())
+								TileLoader.SaplingGrowthType(soil.type, ref hackCreateTile, ref hackPlaceStyle);
+						}
+
+						flag3 = TileObject.CanPlace(tileTargetX, tileTargetY, hackCreateTile, hackPlaceStyle, direction, out objectData, false);
 						int num25 = 0;
 						int num26 = 0;
 						int x = 0;
@@ -23852,6 +_,9 @@
 				if (!item.active || item.noGrabDelay != 0 || item.playerIndexTheItemIsReservedFor != i || !CanAcceptItemIntoInventory(item))
 					continue;
 
+				if (!ItemLoader.CanPickup(item, this))
+					continue;
+
 				int itemGrabRange = GetItemGrabRange(item);
 				Rectangle hitbox = item.Hitbox;
 				if (base.Hitbox.Intersects(hitbox)) {
@@ -23855,6 +_,14 @@
 				int itemGrabRange = GetItemGrabRange(item);
+				ItemLoader.GrabRange(Main.item[j], this, ref itemGrabRange);
 				Rectangle hitbox = item.Hitbox;
 				if (base.Hitbox.Intersects(hitbox)) {
-					if (i == Main.myPlayer && (inventory[selectedItem].type != 0 || itemAnimation <= 0))
+					if (i == Main.myPlayer && (inventory[selectedItem].type != 0 || itemAnimation <= 0)) {
+						if (!ItemLoader.OnPickup(Main.item[j], this)) {
+							Main.item[j] = new Item();
+							if (Main.netMode == 1)
+								NetMessage.SendData(21, -1, -1, null, j);
+							continue;
+						}
 						item = PickupItem(i, j, item);
+					}
 				}
@@ -24201,6 +_,35 @@
 			}
 		}
 
+		public bool CanBuyItem(int price, int customCurrency = -1) {
+			if (customCurrency != -1)
+				return CustomCurrencyManager.BuyItem(this, price, customCurrency);
+
+			bool flag;
+			long num = Utils.CoinsCount(out flag, inventory, new int[] {
+				58,
+				57,
+				56,
+				55,
+				54
+			});
+
+			long num2 = Utils.CoinsCount(out flag, bank.item, new int[0]);
+			long num3 = Utils.CoinsCount(out flag, bank2.item, new int[0]);
+			long num4 = Utils.CoinsCount(out flag, bank3.item, new int[0]);
+			long num5 = Utils.CoinsCombineStacks(out flag, new long[] {
+				num,
+				num2,
+				num3,
+				num4
+			});
+
+			if (num5 < price)
+				return false;
+
+			return true;
+		}
+
 		public bool BuyItem(int price, int customCurrency = -1) {
 			if (customCurrency != -1)
 				return CustomCurrencyManager.BuyItem(this, price, customCurrency);
@@ -24262,11 +_,13 @@
 
 											if (num80 > 0 && Main.tile[num78, num79].color() != num80 && WorldGen.paintTile(num78, num79, (byte)num80, broadCast: true)) {
 												int num83 = num81;
+												if (ItemLoader.ConsumeItem(inventory[num83], this))
-												inventory[num83].stack--;
+													inventory[num83].stack--;
+
 												if (inventory[num83].stack <= 0)
 													inventory[num83].SetDefaults();
 
-												itemTime = (int)((float)inventory[selectedItem].useTime * tileSpeed);
+												itemTime = PlayerHooks.TotalUseTime(inventory[selectedItem].useTime * tileSpeed, this, inventory[selectedItem]);
 											}
 										}
 
@@ -24284,11 +_,12 @@
 										int num84 = FindItem(849);
 										if (num84 > -1 && WorldGen.PlaceActuator(num78, num79)) {
 											NetMessage.SendData(17, -1, -1, null, 8, num78, num79);
+											if (ItemLoader.ConsumeItem(inventory[num84], this))
-											inventory[num84].stack--;
+												inventory[num84].stack--;
 											if (inventory[num84].stack <= 0)
 												inventory[num84].SetDefaults();
 
-											itemTime = (int)((float)inventory[selectedItem].useTime * tileSpeed);
+											itemTime = PlayerHooks.TotalUseTime(inventory[selectedItem].useTime * tileSpeed, this, inventory[selectedItem]);
 										}
 									}
 								}
@@ -24418,7 +_,7 @@
 		public void AdjTiles() {
 			int num = 4;
 			int num2 = 3;
-			for (int i = 0; i < 623; i++) {
+			for (int i = 0; i < adjTile.Length; i++) {
 				oldAdjTile[i] = adjTile[i];
 				adjTile[i] = false;
 			}
@@ -24425,11 +_,12 @@
 
 			if (num100 > 0 && Main.tile[num98, num99].wallColor() != num100 && WorldGen.paintWall(num98, num99, (byte)num100, broadCast: true)) {
 				int num103 = num101;
+				if (ItemLoader.ConsumeItem(inventory[num103], this))	
-				inventory[num103].stack--;
+					inventory[num103].stack--;
 				if (inventory[num103].stack <= 0)
 					inventory[num103].SetDefaults();
 
-				itemTime = (int)((float)inventory[selectedItem].useTime * wallSpeed);
+				itemTime = PlayerHooks.TotalUseTime(inventory[selectedItem].useTime * wallSpeed, this, inventory[selectedItem]);
 			}
 		}
 
@@ -24458,7 +_,9 @@
 								adjTile[14] = true;
 								alchemyTable = true;
 								break;
 						}
+
+						TileLoader.AdjTiles(this, Main.tile[j, k].type);
 					}
 
 					if (Main.tile[j, k].liquid > 200 && Main.tile[j, k].liquidType() == 0)
@@ -24476,7 +_,7 @@
 				return;
 
 			bool flag = false;
-			for (int l = 0; l < 623; l++) {
+			for (int l = 0; l < adjTile.Length; l++) {
 				if (oldAdjTile[l] != adjTile[l]) {
 					flag = true;
 					break;
@@ -24666,6 +_,7 @@
 				hermesStepSound.IntendedCooldown = 6;
 			}
 
+			ItemLoader.PreUpdateVanitySet(this);
 			if (wings > 0 && wings != 33) {
 				back = -1;
 				front = -1;
@@ -24677,7 +_,10 @@
 			if (webbed || frozen || stoned || (Main.gamePaused && !Main.gameMenu))
 				return;
 
+			//TODO: Do these hooks go inside or outside the conditional?
+			PlayerHooks.FrameEffects(this);
+			ItemLoader.UpdateVanity(this);
 			if (!isDisplayDollOrInanimate) {
 				if (((body == 68 && legs == 57 && head == 106) || (body == 74 && legs == 63 && head == 106)) && Main.rand.Next(10) == 0) {
 					int num2 = Dust.NewDust(new Vector2(position.X - velocity.X * 2f, position.Y - 2f - velocity.Y * 2f), width, height, 43, 0f, 0f, 100, new Color(255, 0, 255), 0.3f);
 					Main.dust[num2].fadeIn = 0.8f;
@@ -24801,6 +_,7 @@
 			Item.GetDrawHitbox(HeldItem.type, this);
 			bool flag2 = CanVisuallyHoldItem(HeldItem);
 			bool flag3 = HeldItem.type != 4952;
+			ItemLoader.UpdateVanitySet(this);
 			if (mount.Active) {
 				legFrameCounter = 0.0;
 				legFrame.Y = legFrame.Height * 6;
@@ -25018,6 +_,7 @@
 			float num = mount.PlayerOffsetHitbox;
 			Item item = inventory[selectedItem];
 			if (mount.Active) {
+				MountLoader.UseAbility(this, Vector2.Zero, false);
 				if (mount.Type == 8) {
 					noItems = true;
 					if (controlUseItem) {
@@ -25041,6 +_,8 @@
 				_ = bodyFrame;
 				reference6.Y = 0;
 			}
+			else if (ItemLoader.HoldItemFrame(inventory[selectedItem], this)) {
+			}
 			else if (shieldRaised) {
 				bodyFrame.Y = bodyFrame.Height * 10;
 			}
@@ -25298,7 +_,8 @@
 
 							if (flag5) {
 								num8 = inventory[n].type;
+								if (ItemLoader.ConsumeItem(inventory[n], this))
-								inventory[n].stack--;
+									inventory[n].stack--;
 								if (inventory[n].stack <= 0)
 									inventory[n].SetDefaults();
 							}
@@ -25406,6 +_,10 @@
 					if (item.shoot > 0 && ProjectileID.Sets.MinionTargettingFeature[item.shoot] && altFunctionUse == 2)
 						flag6 = true;
 
+					if (!CheckMana(item, -1, !flag6))
+						flag2 = false;
+
+					goto SkipManaCode;
 					if (item.type != 127 || !spaceGun) {
 						if (statMana >= (int)((float)item.mana * manaCost)) {
 							if (!flag6)
@@ -25433,6 +_,8 @@
 			if (drawPlayer.body == 36 && drawPlayer.head == 56)
 				armorEffectDrawOutlines = true;
 
+			ItemLoader.ArmorSetShadows(drawPlayer);
+			// TODO, rename to this? SetArmorEffectVisuals
 			if (drawPlayer.stoned || drawPlayer.stealth != 1f) {
 				armorEffectDrawOutlines = false;
 				armorEffectDrawShadow = false;
@@ -25605,6 +_,7 @@
 				}
 			}
 
+			ItemLoader.SetMatch(armorslot, type, male, ref num, ref somethingSpecial);
 			return num;
 		}
 
@@ -25621,11 +_,11 @@
 
 			if (itemAnimation > 0) {
 				if (item.melee)
-					itemAnimationMax = (int)((float)item.useAnimation * meleeSpeed);
+					itemAnimationMax = PlayerHooks.TotalMeleeTime(item.useAnimation * meleeSpeed, this, item);
 				else
-					itemAnimationMax = item.useAnimation;
+					itemAnimationMax = PlayerHooks.TotalMeleeTime(item.useAnimation, this, item);
 
-				if (item.mana > 0 && !flag && (item.type != 127 || !spaceGun))
+				if (item.mana > 0 && !flag && GetManaCost(item) > 0)
 					manaRegenDelay = (int)maxRegenDelay;
 
 				if (Main.dedServ) {
@@ -25781,3 +_,6 @@
 				immune = true;
+				if (dead)
+					PlayerHooks.OnRespawn(this);
+
 				dead = false;
 				immuneTime = 0;
@@ -25974,7 +_,7 @@
 			if (whoAmI != Main.myPlayer)
 				return;
 
-			for (int i = 0; i < 22; i++) {
+			for (int i = 0; i < MaxBuffs; i++) {
 				if (buffTime[i] > 0 && buffType[i] == 59)
 					DelBuff(i);
 			}
@@ -25998,6 +_,7 @@
 				itemRotation = 0f;
 			}
 
+			ItemLoader.HoldStyle(item, this);
 			if ((((item.type == 974 || item.type == 8 || item.type == 1245 || item.type == 2274 || item.type == 3004 || item.type == 3045 || item.type == 3114 || (item.type >= 427 && item.type <= 433)) && !wet) || item.type == 523 || item.type == 1333) && !pulley) {
 				float num45 = 1f;
 				float num46 = 0.95f;
@@ -26098,6 +_,13 @@
 					return 0.0;
 				}
 
+				bool customDamage = false;
+				bool playSound = true;
+				bool genGore = true;
+				if (!PlayerHooks.PreHurt(this, pvp, quiet, ref Damage, ref hitDirection, ref Crit, ref customDamage,
+					ref playSound, ref genGore, ref damageSource))
+					return 0.0;
+
 				if (whoAmI == Main.myPlayer && panic)
 					AddBuff(63, 300);
 
@@ -26109,34 +_,34 @@
 					NetMessage.SendData(84, -1, -1, null, whoAmI);
 
 				int num = Damage;
-				double num2 = Main.CalculateDamagePlayersTake(num, statDefense);
+				double num2 = customDamage ? num : Main.CalculateDamagePlayersTake(num, statDefense);
 				if (Crit)
 					num *= 2;
 
 				if (num2 >= 1.0) {
 					if (whoAmI == Main.myPlayer) {
 						Main.NotifyOfEvent(GameNotificationType.Damage);
 						if (hasFootball) {
 							for (int i = 0; i < 59; i++) {
 								if (inventory[i].stack > 0 && inventory[i].type == 4743) {
 									Projectile.NewProjectile(base.Center, new Vector2(-hitDirection * 4, -6f), 861, 0, 0f, whoAmI, 0f, 1f);
 									inventory[i].SetDefaults();
 									if (i == 58)
 										Main.mouseItem = new Item();
 								}
 							}
 						}
 					}
 
 					if (inventory[selectedItem].type == 4790 || inventory[selectedItem].type == 4788 || inventory[selectedItem].type == 4789) {
 						for (int j = 0; j < 1000; j++) {
 							if (Main.projectile[j].active && Main.projectile[j].owner == whoAmI && (Main.projectile[j].type == 879 || Main.projectile[j].type == 877 || Main.projectile[j].type == 878))
 								Main.projectile[j].active = false;
 						}
 					}
 
 					if (invis) {
-						for (int k = 0; k < 22; k++) {
+						for (int k = 0; k < MaxBuffs; k++) {
 							if (buffType[k] == 10)
 								DelBuff(k);
 						}
@@ -26163,7 +_,7 @@
 						float num5 = 0.15f * (float)beetleOrbs;
 						num2 = (int)((double)(1f - num5) * num2);
 						beetleOrbs--;
-						for (int l = 0; l < 22; l++) {
+						for (int l = 0; l < MaxBuffs; l++) {
 							if (buffType[l] >= 95 && buffType[l] <= 97)
 								DelBuff(l);
 						}
@@ -26255,8 +_,9 @@
 						Projectile.NewProjectile(base.Center.X + (float)Main.rand.Next(-40, 40), base.Center.Y - (float)Main.rand.Next(20, 60), velocity.X * 0.3f, velocity.Y * 0.3f, 565, 0, 0f, whoAmI);
 					}
 
+					PlayerHooks.Hurt(this, pvp, quiet, num2, hitDirection, Crit);
 					if (Main.netMode == 1 && whoAmI == Main.myPlayer && !quiet) {
 						if (!noKnockback && hitDirection != 0 && (!mount.Active || !mount.Cart))
 							NetMessage.SendData(13, -1, -1, null, whoAmI);
 
 						NetMessage.SendData(16, -1, -1, null, whoAmI);
@@ -26361,6 +_,9 @@
 						velocity.Y = -3.5f;
 						fallStart = (int)(position.Y / 16f);
 					}
 
+					if (!playSound)
+						goto postSound; //gotos are ugly but minimize the diff file
+
 					if (stoned)
 						SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
@@ -26375,8 +_,12 @@
 					else
 						SoundEngine.PlaySound(1, (int)position.X, (int)position.Y);
 
 					eyeHelper.BlinkBecausePlayerGotHurt();
+					postSound:
 					if (statLife > 0) {
+						if (!genGore)
+							goto postGore; //gotta minimize diff files
+
 						double num23 = num2 / (double)statLifeMax2 * 100.0;
 						float num24 = 2 * hitDirection;
 						float num25 = 0f;
@@ -26401,6 +_,9 @@
 								Dust.NewDust(position, width, height, 5, num24 + (float)hitDirection * num25 * Main.rand.NextFloat(), -2f);
 							}
 						}
+
+						postGore:
+						PlayerHooks.PostHurt(this, pvp, quiet, num2, hitDirection, Crit);
 					}
 					else {
 						statLife = 0;
@@ -26433,7 +_,12 @@
 			if (creativeGodMode || dead)
 				return;
 
 			StopVanityActions();
+			bool playSound = true;
+			bool genGore = true;
+			if (!PlayerHooks.PreKill(this, dmg, hitDirection, pvp, ref playSound, ref genGore, ref damageSource))
+				return;
+
 			if (pvp)
 				pvpDeath = true;
 
@@ -26486,19 +_,24 @@
 				}
 			}
 
-			SoundEngine.PlaySound(5, (int)position.X, (int)position.Y);
+			if (playSound)
+				Main.PlaySound(5, (int)position.X, (int)position.Y, 1, 1f, 0f);
+
 			headVelocity.Y = (float)Main.rand.Next(-40, -10) * 0.1f;
 			bodyVelocity.Y = (float)Main.rand.Next(-40, -10) * 0.1f;
 			legVelocity.Y = (float)Main.rand.Next(-40, -10) * 0.1f;
 			headVelocity.X = (float)Main.rand.Next(-20, 21) * 0.1f + (float)(2 * hitDirection);
 			bodyVelocity.X = (float)Main.rand.Next(-20, 21) * 0.1f + (float)(2 * hitDirection);
 			legVelocity.X = (float)Main.rand.Next(-20, 21) * 0.1f + (float)(2 * hitDirection);
-			if (stoned) {
+			if (stoned || !genGore) {
 				headPosition = Vector2.Zero;
 				bodyPosition = Vector2.Zero;
 				legPosition = Vector2.Zero;
 			}
 
+			if (!genGore)
+				goto postGore; //goto minimizes diff file size
+
 			for (int j = 0; j < 100; j++) {
 				if (stoned) {
 					Dust.NewDust(position, width, height, 1, 2 * hitDirection, -2f);
@@ -26516,6 +_,7 @@
 				}
 			}
 
+			postGore:
 			mount.Dismount(this);
 			dead = true;
 			respawnTimer = 600;
@@ -26535,9 +_,10 @@
 			if (Main.expertMode)
 				respawnTimer = (int)((double)respawnTimer * 1.5);
 
+			PlayerHooks.Kill(this, dmg, hitDirection, pvp, damageSource);
 			immuneAlpha = 0;
 			if (!ChildSafety.Disabled)
 				immuneAlpha = 255;
 
 			palladiumRegen = false;
 			iceBarrier = false;
@@ -26611,6 +_,9 @@
 			if (newItem.uniqueStack && HasItem(newItem.type))
 				return new ItemSpaceStatus(CanTakeItem: false);
 
+			if (ItemLoader.ItemSpace(newItem, this))
+				return new ItemSpaceStatus(CanTakeItem: true);
+
 			int num = 50;
 			if (newItem.IsACoin)
 				num = 54;
@@ -26968,5 +_,6 @@
 			WorldGen.PlaceWall(tileTargetX, tileTargetY, inventory[selectedItem].createWall);
 			if (Main.tile[tileTargetX, tileTargetY].wall == inventory[selectedItem].createWall) {
+				WallLoader.PlaceInWorld(tileTargetX, tileTargetY, inventory[selectedItem]);
 				ApplyItemTime(inventory[selectedItem], wallSpeed);
 				if (Main.netMode == 1)
 					NetMessage.SendData(17, -1, -1, null, 3, tileTargetX, tileTargetY, inventory[selectedItem].createWall);
@@ -27027,5 +_,6 @@
 				if (Main.tile[num, num2].wall == createWall) {
+					if (ItemLoader.ConsumeItem(inventory[selectedItem], this))
-					inventory[selectedItem].stack--;
+						inventory[selectedItem].stack--;
 					if (inventory[selectedItem].stack == 0)
 						inventory[selectedItem].SetDefaults();
 
@@ -27265,6 +_,7 @@
 				PlaceThing_Tiles_PlaceIt_AutoPaintAndActuate(typeCaches);
 				if (PlayerInput.UsingGamepad && ItemID.Sets.SingleUseInGamepad[inventory[selectedItem].type] && Main.myPlayer == whoAmI && !Main.SmartCursorEnabled)
 					Main.blockMouse = true;
+				TileLoader.PlaceInWorld(tileTargetX, tileTargetY, inventory[selectedItem]);
 			}
 
 			return data;
@@ -27477,7 +_,8 @@
 							Projectile.NewProjectile(worldX3, worldY3 - pushYUp3, 0f, 0f, shoot, Damage, KnockBack, i);
 							UpdateMaxTurrets();
 						}
-						else {
+						else if (PlayerHooks.Shoot(this, item, ref vector, ref num70, ref num71, ref shoot, ref Damage, ref KnockBack)
+							&& ItemLoader.Shoot(item, this, ref vector, ref num70, ref num71, ref shoot, ref Damage, ref KnockBack)) {
 							int num207 = Projectile.NewProjectile(vector.X, vector.Y, num70, num71, shoot, Damage, KnockBack, i);
 							if (item.type == 726)
 								Main.projectile[num207].magic = true;
@@ -27814,6 +_,6 @@
 				if (Main.tile[tileTargetX, tileTargetY].nactive() && Main.tile[tileTargetX, tileTargetY].type == 59)
 					canPlace = true;
 			}
-			else if (inventory[selectedItem].createTile == 4 || inventory[selectedItem].createTile == 136) {
+			else if (TileLoader.IsTorch(inventory[selectedItem].createTile) || inventory[selectedItem].createTile == 136) {
 				if (Main.tile[tileTargetX, tileTargetY].wall > 0) {
 					canPlace = true;
@@ -27860,12 +_,15 @@
 										if (num230 != 0)
 											hitTile.Prune();
 
-										itemTime = item.useTime;
+										itemTime = PlayerHooks.TotalUseTime(item.useTime, this, item);
 										AchievementsHelper.CurrentlyMining = false;
 									}
 								}
 								else if (Main.tileAxe[Main.tile[tileTargetX, tileTargetY].type]) {
-									num230 = ((Main.tile[tileTargetX, tileTargetY].type != 80) ? (num230 + item.axe) : (num230 + item.axe * 3));
+									if (Main.tile[tileTargetX, tileTargetY].type == 80)
+										num230 += item.axe * 3;
+									else
+										TileLoader.MineDamage(item.axe, ref num230);
 									if (item.axe > 0) {
 										AchievementsHelper.CurrentlyMining = true;
 										if (!WorldGen.CanKillTile(tileTargetX, tileTargetY))
@@ -27886,27 +_,27 @@
 										if (num230 != 0)
 											hitTile.Prune();
 
-										itemTime = item.useTime;
+										itemTime = PlayerHooks.TotalUseTime(item.useTime, this, item);
 										AchievementsHelper.CurrentlyMining = false;
 									}
 								}
 								else if (item.pick > 0) {
 									PickTile(tileTargetX, tileTargetY, item.pick);
-									itemTime = (int)((float)item.useTime * pickSpeed);
+									itemTime = PlayerHooks.TotalUseTime(item.useTime * pickSpeed, this, item);
 								}
 
 								if (item.pick > 0)
-									itemTime = (int)((float)item.useTime * pickSpeed);
+									itemTime = PlayerHooks.TotalUseTime(item.useTime * pickSpeed, this, item);
 
-								if (item.hammer > 0 && Main.tile[tileTargetX, tileTargetY].active() && ((Main.tileSolid[Main.tile[tileTargetX, tileTargetY].type] && Main.tile[tileTargetX, tileTargetY].type != 10) || Main.tile[tileTargetX, tileTargetY].type == 314 || Main.tile[tileTargetX, tileTargetY].type == 351 || Main.tile[tileTargetX, tileTargetY].type == 424 || Main.tile[tileTargetX, tileTargetY].type == 442) && poundRelease) {
+								if (item.hammer > 0 && Main.tile[tileTargetX, tileTargetY].active() && (Main.tileSolid[Main.tile[tileTargetX, tileTargetY].type] && !TileLoader.IsClosedDoor(Main.tile[tileTargetX, tileTargetY]) || Main.tile[tileTargetX, tileTargetY].type == 314 || Main.tile[tileTargetX, tileTargetY].type == 351 || Main.tile[tileTargetX, tileTargetY].type == 424 || Main.tile[tileTargetX, tileTargetY].type == 442) && poundRelease) {
 									flag14 = false;
-									itemTime = item.useTime;
+									itemTime = PlayerHooks.TotalUseTime(item.useTime, this, item);
 									num230 += (int)((double)item.hammer * 1.25);
 									num230 = 100;
-									if (Main.tile[tileTargetX, tileTargetY - 1].active() && Main.tile[tileTargetX, tileTargetY - 1].type == 10)
+									if (Main.tile[tileTargetX, tileTargetY - 1].active() && TileLoader.IsClosedDoor(Main.tile[tileTargetX, tileTargetY - 1]))
 										num230 = 0;
 
-									if (Main.tile[tileTargetX, tileTargetY + 1].active() && Main.tile[tileTargetX, tileTargetY + 1].type == 10)
+									if (Main.tile[tileTargetX, tileTargetY + 1].active() && TileLoader.IsClosedDoor(Main.tile[tileTargetX, tileTargetY + 1]))
 										num230 = 0;
 
 									if (hitTile.AddDamage(num229, num230) >= 100) {
@@ -27914,7 +_,9 @@
 										if (poundRelease) {
 											int num231 = tileTargetX;
 											int num232 = tileTargetY;
+											if (TileLoader.Slope(num231, num232, Main.tile[num231, num232].type)) {
+											}
-											if (TileID.Sets.Platforms[Main.tile[num231, num232].type]) {
+											else if (TileID.Sets.Platforms[Main.tile[num231, num232].type]) {
 												if (Main.tile[num231, num232].halfBrick()) {
 													WorldGen.PoundTile(num231, num232);
 													if (Main.netMode == 1)
@@ -28342,10 +_,11 @@
 			if (paintingAWall) {
 				if (b != byte.MaxValue && Main.tile[x, y].wallColor() != b && WorldGen.paintWall(x, y, b, broadCast: true)) {
+						if (ItemLoader.ConsumeItem(item, this))
-					item.stack--;
+							item.stack--;
 					if (item.stack <= 0)
 						item.SetDefaults();
 
 					if (applyItemAnimation)
 						ApplyItemTime(inventory[selectedItem], wallSpeed);
 				}
 			}
@@ -28396,6 +_,7 @@
 					}
 				}
 				else if (item.useStyle == 3) {
+					//patch file: flag21
 					if ((double)itemAnimation > (double)itemAnimationMax * 0.666) {
 						flag21 = true;
 					}
@@ -28403,7 +_,7 @@
 			int num2 = 25;
 			int num3 = 50;
 			int num4 = -1;
-			if (extractType == 1) {
+			if (extractType == ItemID.DesertFossil) {
 				num /= 3;
 				num2 *= 2;
 				num3 = 20;
@@ -28646,5 +_,6 @@
 					num6 += Main.rand.Next(0, 6);
 			}
 
+			ItemLoader.ExtractinatorUse(ref num5, ref num6, extractType);
 			if (num5 > 0) {
 				Vector2 vector = Main.ReverseGravitySupport(Main.MouseScreen) + Main.screenPosition;
@@ -28783,7 +_,8 @@
 			if (Main.moonPhase == 4)
 				num *= 0.9f;
 
 			if (Main.bloodMoon)
 				num *= 1.1f;
 
+			PlayerHooks.GetFishingLevel(this, inventory[bestFishingPoleIndex], baitItem, ref num);
 			return num;
@@ -28803,33 +_,38 @@
 			if (baitPower != 0 || baitType != 0)
 				return;
 
 			int num = 0;
+			Item baitItem = null;
 			while (true) {
 				if (num < 50) {
 					if (inventory[num].stack > 0 && inventory[num].bait > 0)
 						break;
 
 					num++;
 					continue;
 				}
 
 				return;
 			}
 
+			baitItem = inventory[num];
 			baitPower = inventory[num].bait;
 			baitType = inventory[num].type;
 		}
 
 		private void Fishing_GetBestFishingPole(out int fishingPolePower, out int fishingPoleType) {
 			fishingPolePower = inventory[selectedItem].fishingPole;
 			fishingPoleType = inventory[selectedItem].type;
+			int bestFishingPoleIndex = selectedItem;
 			if (fishingPolePower != 0)
 				return;
 
 			for (int i = 0; i < 58; i++) {
 				if (inventory[i].fishingPole > fishingPolePower) {
 					fishingPolePower = inventory[i].fishingPole;
 					fishingPoleType = inventory[i].type;
 				}
+					bestFishingPoleIndex = i;
+				}
 			}
 		}
@@ -28857,7 +_,8 @@
 				return;
 			}
 
+			if (ItemLoader.ConsumeItem(inventory[num], this))
-			inventory[num].stack--;
+				inventory[num].stack--;
 			if (inventory[num].stack <= 0)
 				inventory[num].SetDefaults();
 		}
@@ -29033,6 +_,9 @@
 		public void ItemCheck(int i) {
+			if (!PlayerHooks.PreItemCheck(this))
+				return;
+
 			if (CCed) {
 				channel = false;
 				itemAnimation = (itemAnimationMax = 0);
 				return;
 			}
@@ -29056,8 +_,17 @@
 			if (itemAnimation == 0 && reuseDelay > 0)
 				ApplyReuseDelay();
 
-			if (Main.myPlayer == i && itemAnimation == 0 && TileObjectData.CustomPlace(item.createTile, item.placeStyle))
-				TileObject.CanPlace(tileTargetX, tileTargetY, item.createTile, item.placeStyle, direction, out TileObject _, onlyCheck: true);
+			if (Main.myPlayer == i && itemAnimation == 0 && TileObjectData.CustomPlace(item.createTile, item.placeStyle)) {
+				int hackCreateTile = item.createTile;
+				int hackPlaceStyle = item.placeStyle;
+				if (hackCreateTile == TileID.Saplings) {
+					Tile soil = Main.tile[tileTargetX, tileTargetY + 1];
+					if (soil.active())
+						TileLoader.SaplingGrowthType(soil.type, ref hackCreateTile, ref hackPlaceStyle);
+				}
+
+				TileObject.CanPlace(tileTargetX, tileTargetY, hackCreateTile, hackPlaceStyle, direction, out _, true);
+			}
 
 			if (itemAnimation == 0 && altFunctionUse == 2)
 				altFunctionUse = 0;
@@ -29077,5 +_,6 @@
 				if (item.potion && flag3)
 					ApplyPotionDelay(item);
 
+					SkipManaCode:
 				if (item.mana > 0 && flag3 && whoAmI == Main.myPlayer && item.buffType != 0 && item.buffTime != 0)
 					AddBuff(item.buffType, item.buffTime);
@@ -29086,5 +_,5 @@
 				if (whoAmI == Main.myPlayer && gravDir == 1f && item.mountType != -1 && mount.CanMount(item.mountType, this))
 					mount.SetMount(item.mountType, this);
 
-				if ((item.shoot <= 0 || !ProjectileID.Sets.MinionTargettingFeature[item.shoot] || altFunctionUse != 2) && flag3 && whoAmI == Main.myPlayer && item.shoot >= 0 && item.shoot < 950 && (ProjectileID.Sets.LightPet[item.shoot] || Main.projPet[item.shoot]))
+				if ((item.shoot <= 0 || !ProjectileID.Sets.MinionTargettingFeature[item.shoot] || altFunctionUse != 2) && flag3 && whoAmI == Main.myPlayer && item.shoot >= 0 && (ProjectileID.Sets.LightPet[item.shoot] || Main.projPet[item.shoot]))
 					FreeUpPetsAndMinions(item);
@@ -29165,9 +_,9 @@
 					ItemCheck_TurretAltFeatureUse(item, flag4);
 					ItemCheck_MinionAltFeatureUse(item, flag4);
-					if (item.shoot > 0 && itemAnimation > 0 && ItemTimeIsZero && flag4)
+					if (item.shoot > 0 && itemAnimation > 0 && ItemTimeIsZero && flag4 && ItemLoader.CheckProjOnSwing(this, item))
 						ItemCheck_Shoot(i, item, weaponDamage);
 
 					ItemCheck_UseWiringTools(item);
 					ItemCheck_UseLawnMower(item);
 					ItemCheck_PlayInstruments(item);
 					ItemCheck_UseBuckets(item);
@@ -29242,8 +_,11 @@
 				}
 
 				if (ItemTimeIsZero && itemAnimation > 0) {
+					if (ItemLoader.UseItem(item, this))
+						ApplyItemTime(item);
+
 					if (item.hairDye >= 0) {
 						ApplyItemTime(item);
 						if (whoAmI == Main.myPlayer) {
 							hairDye = (byte)item.hairDye;
 							NetMessage.SendData(4, -1, -1, null, whoAmI);
@@ -29251,18 +_,20 @@
 					}
 
 					if (item.healLife > 0) {
-						statLife += item.healLife;
+						int healLife = GetHealLife(item);
+						statLife += healLife;
 						ApplyItemTime(item);
-						if (Main.myPlayer == whoAmI)
-							HealEffect(item.healLife);
+						if (healLife > 0 && Main.myPlayer == whoAmI)
+							HealEffect(healLife, true);
 					}
 
 					if (item.healMana > 0) {
-						statMana += item.healMana;
+						int healMana = GetHealMana(item);
+						statMana += healMana;
 						ApplyItemTime(item);
-						if (Main.myPlayer == whoAmI) {
+						if (healMana > 0 && Main.myPlayer == whoAmI) {
 							AddBuff(94, manaSickTime);
-							ManaEffect(item.healMana);
+							ManaEffect(healMana);
 						}
 					}
 
@@ -29367,7 +_,7 @@
 					if (ItemTimeIsZero) {
 						ApplyItemTime(item);
 					}
-					else if (itemTime == item.useTime / 2) {
+					else if (itemTime == PlayerHooks.TotalUseTime(item.useTime, this, item) / 2) {
 						for (int k = 0; k < 70; k++) {
 							Dust.NewDust(base.position, width, height, 15, velocity.X * 0.5f, velocity.Y * 0.5f, 150, default(Color), 1.5f);
 						}
@@ -29455,7 +_,7 @@
 						for (int num6 = 0; num6 < 70; num6++) {
 							Main.dust[Dust.NewDust(base.position, width, height, 15, 0f, 0f, 150, Color.Cyan, 1.2f)].velocity *= 0.5f;
 						}
 
-						if (item.stack > 0)
+						if (ItemLoader.ConsumeItem(item, this) && item.stack > 0)
 							item.stack--;
 					}
@@ -29483,17 +_,17 @@
-						if (item.stack > 0)
+					if (ItemLoader.ConsumeItem(item, this) && item.stack > 0)
 							item.stack--;
 					}
 				}
 
 				if (item.type == 2351 && itemAnimation > 0) {
 					if (ItemTimeIsZero) {
 						ApplyItemTime(item);
 					}
 					else if (itemTime == 2) {
 						if (Main.netMode == 0)
 							TeleportationPotion();
 						else if (Main.netMode == 1 && whoAmI == Main.myPlayer)
 							NetMessage.SendData(73);
 
-						if (item.stack > 0)
+						if (ItemLoader.ConsumeItem(item, this) && item.stack > 0)
 							item.stack--;
@@ -29511,11 +_,11 @@
 								NetMessage.SendData(4, -1, -1, null, whoAmI);
 						}
 
-						if (item.stack > 0)
+						if (ItemLoader.ConsumeItem(item, this) && item.stack > 0)
 							item.stack--;
 					}
 					else {
-						float num10 = item.useTime;
+						float num10 = PlayerHooks.TotalUseTime(item.useTime, this, item);
 						num10 = (num10 - (float)itemTime) / num10;
 						float num11 = 44f;
 						float num12 = (float)Math.PI * 3f;
@@ -29548,12 +_,13 @@
 					lastVisualizedSelectedItem = item.Clone();
 				}
 
 				if (i == Main.myPlayer) {
-					if (!dontConsumeWand && itemTime == (int)((float)item.useTime * tileSpeed) && item.tileWand > 0) {
+					if (item.tileWand > 0 && !dontConsumeWand && itemTime == PlayerHooks.TotalUseTime(item.useTime * tileSpeed, this, item)) {
 						int tileWand = item.tileWand;
 						for (int num15 = 0; num15 < 58; num15++) {
 							if (tileWand == inventory[num15].type && inventory[num15].stack > 0) {
+								if (ItemLoader.ConsumeItem(inventory[num15], this))
-								inventory[num15].stack--;
+									inventory[num15].stack--;
 								if (inventory[num15].stack <= 0)
 									inventory[num15] = new Item();
 
@@ -29582,7 +_,7 @@
 						if (flag7.HasValue)
 							flag6 = flag7.Value;
 
-						if (flag6) {
+						if (flag6 && ItemLoader.ConsumeItem(item, this)) {
 							if (item.stack > 0)
 								item.stack--;
 
@@ -29599,8 +_,10 @@
 					if (selectedItem == 58 && itemAnimation != 0)
 						Main.mouseItem = item.Clone();
 				}
 			}
 
 			if (itemAnimation == 0)
 				JustDroppedAnItem = false;
+
+			PlayerHooks.PostItemCheck(this);
 		}
@@ -29904,6 +_,8 @@
 				if (sItem.type == 1826 && Main.npc[i].value > 0f)
 					pumpkinSword(i, (int)((double)damage * 1.5), knockBack);
 
+				ItemLoader.OnHitPvp(sItem, this, Main.player[i], num2, flag);
+				PlayerHooks.OnHitPvp(this, item, Main.player[i], num2, flag);
 				if (Main.netMode != 0)
 					NetMessage.SendPlayerHurt(i, playerDeathReason, num, direction, flag, pvp: true, -1);
 
@@ -30546,5 +_,6 @@
 					}
 				}
 			}
 
+			ItemLoader.UseItemHitbox(sitem, this, ref r2, ref flag21);
 			if (sItem.type == 1450 && Main.rand.Next(3) == 0) {
@@ -30828,7 +_,7 @@
 			if (Main.tileHammer[tile.type]) {
 				canHitWalls = false;
 				if (sItem.hammer > 0) {
-					num2 += sItem.hammer;
+					TileLoader.MineDamage(item.hammer, ref num2);
 					if (!WorldGen.CanKillTile(x, y))
 						num2 = 0;
 
@@ -31598,9 +_,10 @@
 				}
 
 				if (num3 >= 0 && WorldGen.PlaceWire(num, num2)) {
+					if (ItemLoader.ConsumeItem(inventory[num3], this))
-					inventory[num3].stack--;
+						inventory[num3].stack--;
 					if (inventory[num3].stack <= 0)
 						inventory[num3].SetDefaults();
 
 					ApplyItemTime(sItem);
 					NetMessage.SendData(17, -1, -1, null, 5, tileTargetX, tileTargetY);
@@ -31616,9 +_,10 @@
 				}
 
 				if (num4 >= 0 && WorldGen.PlaceWire2(num, num2)) {
+					if (ItemLoader.ConsumeItem(inventory[num4], this))
-					inventory[num4].stack--;
+						inventory[num4].stack--;
 					if (inventory[num4].stack <= 0)
 						inventory[num4].SetDefaults();
 
 					ApplyItemTime(sItem);
 					NetMessage.SendData(17, -1, -1, null, 10, tileTargetX, tileTargetY);
@@ -31635,9 +_,10 @@
 				}
 
 				if (num5 >= 0 && WorldGen.PlaceWire3(num, num2)) {
+					if (ItemLoader.ConsumeItem(inventory[num5], this))
-					inventory[num5].stack--;
+						inventory[num5].stack--;
 					if (inventory[num5].stack <= 0)
 						inventory[num5].SetDefaults();
 
 					ApplyItemTime(sItem);
 					NetMessage.SendData(17, -1, -1, null, 12, tileTargetX, tileTargetY);
@@ -31654,40 +_,42 @@
 				}
 
 				if (num6 >= 0 && WorldGen.PlaceWire4(num, num2)) {
+					if (ItemLoader.ConsumeItem(inventory[num6], this))
-					inventory[num6].stack--;
+						inventory[num6].stack--;
 					if (inventory[num6].stack <= 0)
 						inventory[num6].SetDefaults();
 
 					ApplyItemTime(sItem);
 					NetMessage.SendData(17, -1, -1, null, 16, tileTargetX, tileTargetY);
 				}
 			}
 			else if (sItem.type == 510) {
 				if (WorldGen.KillActuator(num, num2)) {
 					ApplyItemTime(sItem);
 					NetMessage.SendData(17, -1, -1, null, 9, tileTargetX, tileTargetY);
 				}
 				else if (WorldGen.KillWire4(num, num2)) {
 					ApplyItemTime(sItem);
 					NetMessage.SendData(17, -1, -1, null, 17, tileTargetX, tileTargetY);
 				}
 				else if (WorldGen.KillWire3(num, num2)) {
 					ApplyItemTime(sItem);
 					NetMessage.SendData(17, -1, -1, null, 13, tileTargetX, tileTargetY);
 				}
 				else if (WorldGen.KillWire2(num, num2)) {
 					ApplyItemTime(sItem);
 					NetMessage.SendData(17, -1, -1, null, 11, tileTargetX, tileTargetY);
 				}
 				else if (WorldGen.KillWire(num, num2)) {
 					ApplyItemTime(sItem);
 					NetMessage.SendData(17, -1, -1, null, 6, tileTargetX, tileTargetY);
 				}
 			}
 			else if (sItem.type == 849 && sItem.stack > 0 && WorldGen.PlaceActuator(num, num2)) {
 				ApplyItemTime(sItem);
 				NetMessage.SendData(17, -1, -1, null, 8, tileTargetX, tileTargetY);
+				if (ItemLoader.ConsumeItem(sItem, this))
-				sItem.stack--;
+					sItem.stack--;
 				if (sItem.stack <= 0)
 					sItem.SetDefaults();
 			}
@@ -31790,6 +_,9 @@
 
 						if (Main.projectile[j].type >= 230 && Main.projectile[j].type <= 235)
 							Main.projectile[j].Kill();
+
+						if (modSingleHook2.HasValue && modSingleHook2.Value)
+							Main.projectile[j].Kill();
 					}
 				}
 			}
@@ -33906,4 +_,6 @@
 				CompositeArmStretchAmount stretch6 = CompositeArmStretchAmount.ThreeQuarters;
 				SetCompositeArmBack(enabled: true, stretch6, (float)Math.PI * -3f / 5f * (float)direction);
 				FlipItemLocationAndRotationForGravity();
 			}
+			else if(!Main.dedServ)
+				ItemLoader.UseStyle(item, this);
@@ -34663,5 +_,7 @@
 		private bool ItemCheck_CheckCanUse(Item sItem) {
+			if(!ItemLoader.CanUseItem(sItem, this))
+				return false;
 			int whoAmI = base.whoAmI;
 			bool flag = true;
 			int num = (int)((float)Main.mouseX + Main.screenPosition.X) / 16;
 			int num2 = (int)((float)Main.mouseY + Main.screenPosition.Y) / 16;
@@ -35378,7 +_,7 @@
 				if (num == 2)
 					num = 102;
 
-				for (int i = 0; i < 22; i++) {
+				for (int i = 0; i < MaxBuffs; i++) {
 					if (buffType[i] == 27 || buffType[i] == 101 || buffType[i] == 102) {
 						DelBuff(i);
 						i--;
@@ -35550,46 +_,64 @@
 			if (sItem.ranged && setVortex)
 				KnockBack *= 1f + (1f - stealth) * 0.5f;
 
+			ItemLoader.GetWeaponKnockback(sItem, this, ref KnockBack);
+			PlayerHooks.GetWeaponKnockback(this, sItem, ref KnockBack);
 			return KnockBack;
 		}
 
 		public int GetWeaponCrit(Item sItem) {
 			if (sItem.melee)
 				return meleeCrit;
 
 			if (sItem.ranged)
 				return rangedCrit;
 
 			if (sItem.magic)
 				return magicCrit;
 
 			return 0;
 		}
 
 		public int GetWeaponDamage(Item sItem) {
-			int num = sItem.damage;
-			if (num > 0) {
-				if (sItem.melee) {
-					num = (int)((float)num * meleeDamage + 5E-06f);
-				}
-				else if (sItem.ranged) {
-					num = (int)((float)num * rangedDamage + 5E-06f);
-					if (sItem.useAmmo == AmmoID.Arrow || sItem.useAmmo == AmmoID.Stake)
-						num = (int)((float)num * arrowDamage + 5E-06f);
-
-					if (sItem.useAmmo == AmmoID.Bullet || sItem.useAmmo == AmmoID.CandyCorn)
-						num = (int)((float)num * bulletDamage + 5E-06f);
-
-					if (sItem.useAmmo == AmmoID.Rocket || sItem.useAmmo == AmmoID.StyngerBolt || sItem.useAmmo == AmmoID.JackOLantern || sItem.useAmmo == AmmoID.NailFriendly)
-						num = (int)((float)num * rocketDamage + 5E-06f);
-				}
-				else if (sItem.magic) {
-					num = (int)((float)num * magicDamage + 5E-06f);
-				}
-				else if (sItem.summon) {
-					num = (int)((float)num * minionDamage);
-				}
-			}
-
-			return num;
+			float add = allDamage;
+			float mult = allDamageMult;
+			if (sItem.melee) {
+				add += meleeDamage - 1;
+				mult *= meleeDamageMult;
+			}
+
+			if (sItem.ranged) {
+				add += rangedDamage - 1;
+				mult *= rangedDamageMult;
+				if (sItem.useAmmo == AmmoID.Arrow || sItem.useAmmo == AmmoID.Stake)
+					mult *= arrowDamage;
+
+				if (sItem.useAmmo == AmmoID.Arrow && archery)
+					mult *= 1.2f;
+
+				if (sItem.useAmmo == AmmoID.Bullet || sItem.useAmmo == AmmoID.CandyCorn)
+					mult *= bulletDamage;
+
+				if (sItem.useAmmo == AmmoID.Rocket || sItem.useAmmo == AmmoID.StyngerBolt || sItem.useAmmo == AmmoID.JackOLantern || sItem.useAmmo == AmmoID.NailFriendly)
+					mult *= rocketDamage;
+			}
+
+			if (sItem.magic) {
+				add += magicDamage - 1;
+				mult *= magicDamageMult;
+			}
+
+			if (sItem.summon) {
+				add += minionDamage - 1;
+				mult *= minionDamageMult;
+			}
+
+			if (sItem.modItem?.IgnoreDamageModifiers == true)
+				return sItem.damage;
+
+			float flat = 0f;
+			CombinedHooks.ModifyWeaponDamage(this, sItem, ref add, ref mult, ref flat);
+			int damage = (int)(sItem.damage * add * mult + 5E-06f + flat);
+			CombinedHooks.GetWeaponDamage(this, sItem, ref damage);
+			return Math.Max(0, damage);
 		}
@@ -35641,19 +_,22 @@
 			if (!canShoot)
 				return;
 
 			int pickedProjectileId = -1;
 			if (PickAmmo_TryFindingSpecificMatches(sItem.type, item.type, out pickedProjectileId))
 				projToShoot = pickedProjectileId;
-			else if (sItem.type == 1946)
+			else if (sItem.type == 1946) {
 				projToShoot = 338 + item.type - 771;
+				if (shoot > ProjectileID.RocketSnowmanIV)
+					projToShoot = ProjectileID.RocketSnowmanIV;
+			}
 			else if (sItem.type == 3930)
 				projToShoot = 715 + item.type - AmmoID.Rocket;
 			else if (sItem.useAmmo == AmmoID.Rocket)
 				projToShoot += item.shoot;
 			else if (sItem.useAmmo == 780)
 				projToShoot += item.shoot;
 			else if (item.shoot > 0)
 				projToShoot = item.shoot;
 
 			if (sItem.type == 3019 && projToShoot == 1)
 				projToShoot = 485;
@@ -35701,8 +_,14 @@
 
 			speed += item.shootSpeed;
 			if (item.ranged) {
-				if (item.damage > 0)
-					Damage += (int)((float)item.damage * rangedDamage);
+				if (item.damage > 0) {
+					// determine damage multiplier using item base damage and apply to ammo
+					// equivalent to Damage *= (item.damage + sItem.damage) / sItem.damage
+					if (sItem.damage > 0) // coin gun fix.
+						Damage += (int)(item.damage * Damage / (float)sItem.damage);
+					else
+						Damage += item.damage;
+				}
 			}
 			else {
 				Damage += item.damage;
@@ -35714,10 +_,11 @@
 					if (speed > 20f)
 						speed = 20f;
 				}
-
-				Damage = (int)((double)Damage * 1.2);
+				// archery buff damage moved into GetWeaponDamage
+				// Damage = (int)((double)Damage * 1.2);
 			}
 
 			KnockBack += item.knockBack;
+			ItemLoader.PickAmmo(sItem, item, this, ref projToShoot, ref speed, ref Damage, ref KnockBack);
 			bool flag2 = dontConsume;
 			if (sItem.type == 3245 && Main.rand.Next(3) == 0)
@@ -35759,7 +_,7 @@
 			if (sItem.type == 1553 && Main.rand.Next(3) != 0)
 				flag2 = true;
 
-			if (sItem.type == 434 && itemAnimation < sItem.useAnimation - 2)
+			if (sItem.type == 434 && itemAnimation < PlayerHooks.TotalMeleeTime(sItem.useAnimation, this, sItem) - 2)
 				flag2 = true;
 
 			if (sItem.type == 4953 && itemAnimation > sItem.useAnimation - 8)
@@ -35780,7 +_,10 @@
 			if ((projToShoot == 145 || projToShoot == 146 || projToShoot == 147 || projToShoot == 148 || projToShoot == 149) && itemAnimation < itemAnimationMax - 5)
 				flag2 = true;
 
+			flag2 |= !PlayerHooks.ConsumeAmmo(this, sItem, item) | !ItemLoader.ConsumeAmmo(sItem, item, this);
 			if (!flag2 && item.consumable) {
+				PlayerHooks.OnConsumeAmmo(this, sItem, item);
+				ItemLoader.OnConsumeAmmo(sItem, item, this);
 				item.stack--;
 				if (item.stack <= 0) {
 					item.active = false;
@@ -35820,15 +_,21 @@
 					else {
 						WorldGen.KillTile(x, y, fail: true);
 						NetMessage.SendData(17, -1, -1, null, 0, x, y, 1f);
 					}
 
-					if (Main.tile[x, y].type == 21)
+					if (Main.tile[x, y].type == 21 || Main.tile[x, y].type >= TileID.Count && TileID.Sets.BasicChest[Main.tile[x, y].type])
 						NetMessage.SendData(34, -1, -1, null, 1, x, y);
 
 					if (Main.tile[x, y].type == 467)
 						NetMessage.SendData(34, -1, -1, null, 5, x, y);
 
-					if (Main.tile[x, y].type == 88)
+					if (TileLoader.IsDresser(Main.tile[x, y].type))
 						NetMessage.SendData(34, -1, -1, null, 3, x, y);
+
+					if (Main.tile[x, y].type >= TileID.Count && TileID.Sets.BasicChest[Main.tile[x, y].type])
+						NetMessage.SendData(34, -1, -1, null, 101, x, y, 0f, 0, Main.tile[x, y].type, 0);
+
+					if (Main.tile[x, y].type >= TileID.Count && TileLoader.IsDresser(Main.tile[x, y].type))
+						NetMessage.SendData(34, -1, -1, null, 103, x, y, 0f, 0, Main.tile[x, y].type, 0);
 				}
 				else {
@@ -35905,7 +_,24 @@
 			if (Main.tileNoFail[tileTarget.type])
 				num = 100;
 
-			num = ((!Main.tileDungeon[tileTarget.type] && tileTarget.type != 25 && tileTarget.type != 58 && tileTarget.type != 117 && tileTarget.type != 203) ? ((tileTarget.type == 85) ? (num + pickPower / 3) : ((tileTarget.type != 48 && tileTarget.type != 232) ? ((tileTarget.type == 226) ? (num + pickPower / 4) : ((tileTarget.type != 107 && tileTarget.type != 221) ? ((tileTarget.type != 108 && tileTarget.type != 222) ? ((tileTarget.type == 111 || tileTarget.type == 223) ? (num + pickPower / 4) : ((tileTarget.type != 211) ? (num + pickPower) : (num + pickPower / 5))) : (num + pickPower / 3)) : (num + pickPower / 2))) : (num + pickPower * 2))) : (num + pickPower / 2));
+			if(Main.tileDungeon[tileTarget.type] || tileTarget.type == 25 || tileTarget.type == 58 || tileTarget.type == 117 || tileTarget.type == 203)
+				num += pickPower / 2;
+			else if(tileTarget.type == 85)
+				num += pickPower / 3;
+			else if(tileTarget.type == 48 || tileTarget.type == 232)
+				num += pickPower * 2;
+			else if(tileTarget.type == 226)
+				num += pickPower / 4;
+			else if(tileTarget.type == 107 || tileTarget.type == 221)
+				num += pickPower / 2;
+			else if(tileTarget.type == 108 || tileTarget.type == 222)
+				num += pickPower / 3;
+			else if(tileTarget.type == 111 || tileTarget.type == 223)
+				num += pickPower / 4;
+			else if(tileTarget.type == 211)
+				num += pickPower / 5;
+			else
+				TileLoader.MineDamage(pickPower, ref num);
 			if (tileTarget.type == 211 && pickPower < 200)
 				num = 0;
 
@@ -35960,6 +_,9 @@
 			else if (tileTarget.type == 223 && pickPower < 150) {
 				num = 0;
 			}
+			else {
+				TileLoader.PickPowerCheck(tile, pickPower, ref num);
+			}
 
 			if (tileTarget.type == 147 || tileTarget.type == 0 || tileTarget.type == 40 || tileTarget.type == 53 || tileTarget.type == 57 || tileTarget.type == 59 || tileTarget.type == 123 || tileTarget.type == 224 || tileTarget.type == 397)
 				num += pickPower;
@@ -36248,23 +_,45 @@
 			lostCoins = num;
 			lostCoinString = Main.ValueToCoins(lostCoins);
 			return num;
 		}
 
 		public void DropItems() {
+			IList<Item> startInventory = PlayerHooks.SetupStartInventory(this, true);
+			IDictionary<int, int> startCounts = new Dictionary<int, int>();
+			foreach (Item item in startInventory) {
+				if (!startCounts.ContainsKey(item.netID))
+					startCounts[item.netID] = 0;
+
+				startCounts[item.netID] += item.stack;
+			}
+
+			startCounts[ModContent.ItemType<ModLoader.Default.StartBag>()] = 1;
 			for (int i = 0; i < 59; i++) {
 				if (inventory[i].stack > 0) {
+					Item item = inventory[i];
 					bool flag = true;
-					if (inventory[i].type == 3507 || inventory[i].type == 3506 || inventory[i].type == 3509)
+					if (startCounts.TryGetValue(item.netID, out int startingCount) && startingCount >= item.stack)
 						flag = false;
 
 					if (flag) {
+						int stack = item.stack;
+						if (startCounts.ContainsKey(item.netID)) {
+							stack -= startCounts[item.netID];
+							startCounts[item.netID] = 0;
+						}
+
 						int num = Item.NewItem((int)position.X, (int)position.Y, width, height, inventory[i].type);
 						Main.item[num].netDefaults(inventory[i].netID);
 						Main.item[num].Prefix(inventory[i].prefix);
-						Main.item[num].stack = inventory[i].stack;
+						Main.item[num].stack = stack;
 						Main.item[num].velocity.Y = (float)Main.rand.Next(-20, 1) * 0.2f;
 						Main.item[num].velocity.X = (float)Main.rand.Next(-20, 21) * 0.2f;
 						Main.item[num].noGrabDelay = 100;
 						Main.item[num].newAndShiny = false;
+						Main.item[num].modItem = item.modItem;
+						Main.item[num].globalItems = item.globalItems;
 						if (Main.netMode == 1)
 							NetMessage.SendData(21, -1, -1, null, num);
+					}
+					else if (item.stack > 0 && startCounts.ContainsKey(item.netID)) {
+						startCounts[item.netID] -= item.stack;
@@ -36282,6 +_,8 @@
 						Main.item[num2].velocity.X = (float)Main.rand.Next(-20, 21) * 0.2f;
 						Main.item[num2].noGrabDelay = 100;
 						Main.item[num2].newAndShiny = false;
+						Main.item[num2].modItem = armor[i].modItem;
+						Main.item[num2].globalItems = armor[i].globalItems;
 						if (Main.netMode == 1)
 							NetMessage.SendData(21, -1, -1, null, num2);
 					}
@@ -36299,6 +_,8 @@
 						Main.item[num3].velocity.X = (float)Main.rand.Next(-20, 21) * 0.2f;
 						Main.item[num3].noGrabDelay = 100;
 						Main.item[num3].newAndShiny = false;
+						Main.item[num3].modItem = dye[i].modItem;
+						Main.item[num3].globalItems = dye[i].globalItems;
 						if (Main.netMode == 1)
 							NetMessage.SendData(21, -1, -1, null, num3);
 					}
@@ -36316,6 +_,8 @@
 						Main.item[num4].velocity.X = (float)Main.rand.Next(-20, 21) * 0.2f;
 						Main.item[num4].noGrabDelay = 100;
 						Main.item[num4].newAndShiny = false;
+						Main.item[num4].modItem = miscEquips[i].modItem;
+						Main.item[num4].globalItems = miscEquips[i].globalItems;
 						if (Main.netMode == 1)
 							NetMessage.SendData(21, -1, -1, null, num4);
 					}
@@ -36335,6 +_,8 @@
 					Main.item[num5].velocity.X = (float)Main.rand.Next(-20, 21) * 0.2f;
 					Main.item[num5].noGrabDelay = 100;
 					Main.item[num5].newAndShiny = false;
+					Main.item[num5].modItem = miscDyes[i].modItem;
+					Main.item[num5].globalItems = miscDyes[i].globalItems;
 					if (Main.netMode == 1)
 						NetMessage.SendData(21, -1, -1, null, num5);
 				}
@@ -36342,65 +_,61 @@
 				miscDyes[i].TurnToAir();
 			}
 
-			inventory[0].SetDefaults(3507);
-			inventory[0].Prefix(-1);
-			inventory[1].SetDefaults(3509);
-			inventory[1].Prefix(-1);
-			inventory[2].SetDefaults(3506);
-			inventory[2].Prefix(-1);
+			PlayerHooks.SetStartInventory(this, startInventory);
 			Main.mouseItem.TurnToAir();
 		}
 
 		public object Clone() => MemberwiseClone();
 
 		public void CopyVisuals(Player other) {
 			skinVariant = other.skinVariant;
 			direction = other.direction;
 			selectedItem = other.selectedItem;
 			extraAccessory = other.extraAccessory;
 			skinColor = other.skinColor;
 			eyeColor = other.eyeColor;
 			hair = other.hair;
 			hairColor = other.hairColor;
 			shirtColor = other.shirtColor;
 			underShirtColor = other.underShirtColor;
 			pantsColor = other.pantsColor;
 			shoeColor = other.shoeColor;
 			position = other.position;
 			velocity = other.velocity;
 			statLife = other.statLife;
 			statLifeMax = other.statLifeMax;
 			statLifeMax2 = other.statLifeMax2;
 			statMana = other.statMana;
 			statManaMax = other.statManaMax;
 			statManaMax2 = other.statManaMax2;
 			hideMisc = other.hideMisc;
 			for (int i = 0; i < 59; i++) {
 				inventory[i] = other.inventory[i].Clone();
 				if (i < armor.Length)
 					armor[i] = other.armor[i].Clone();
 
 				if (i < dye.Length)
 					dye[i] = other.dye[i].Clone();
 
 				if (i < miscEquips.Length)
 					miscEquips[i] = other.miscEquips[i].Clone();
 
 				if (i < miscDyes.Length)
 					miscDyes[i] = other.miscDyes[i].Clone();
 
 				if (i < hideVisibleAccessory.Length)
 					hideVisibleAccessory[i] = other.hideVisibleAccessory[i];
 			}
 		}
 
 		public object clientClone() {
-			Player player = new Player();
+			Player player = new Player(false);
 			player.zone1 = zone1;
 			player.zone2 = zone2;
 			player.zone3 = zone3;
 			player.zone4 = zone4;
 			player.voidVaultInfo = voidVaultInfo;
 			player.luck = luck;
+			PlayerHooks.CopyCustomBiomesTo(this, player);
 			player.extraAccessory = extraAccessory;
 			player.MinionRestTargetPoint = MinionRestTargetPoint;
@@ -36452,13 +_,14 @@
 			}
 
 			player.trashItem = trashItem.Clone();
-			for (int j = 0; j < 22; j++) {
+			for (int j = 0; j < MaxBuffs; j++) {
 				player.buffType[j] = buffType[j];
 				player.buffTime[j] = buffTime[j];
 			}
 
 			DpadRadial.CopyTo(player.DpadRadial);
 			CircularRadial.CopyTo(player.CircularRadial);
+			PlayerHooks.clientClone(this, player);
 			return player;
 		}
 
@@ -36469,7 +_,7 @@
 			if (Main.tile[x, y - 1] == null)
 				return false;
 
-			if (!Main.tile[x, y - 1].active() || Main.tile[x, y - 1].type != 79)
+			if (!Main.tile[x, y - 1].active() || Main.tile[x, y - 1].type != 79 && !TileLoader.IsModBed(Main.tile[x, y - 1].type))
 				return false;
 
 			for (int i = x - 1; i <= x + 1; i++) {
@@ -36601,6 +_,7 @@
 			if (path == null || path == "")
 				return;
 
+			BackupIO.Player.ArchivePlayer(path, isCloudSave);
 			if (FileUtilities.Exists(path, isCloudSave))
 				FileUtilities.Copy(path, path + ".bak", isCloudSave);
 
@@ -36608,13 +_,14 @@
 			using (Stream stream = isCloudSave ? ((Stream)new MemoryStream(2000)) : ((Stream)new FileStream(path, FileMode.Create))) {
 				using (CryptoStream cryptoStream = new CryptoStream(stream, rijndaelManaged.CreateEncryptor(ENCRYPTION_KEY, ENCRYPTION_KEY), CryptoStreamMode.Write)) {
 					using (BinaryWriter binaryWriter = new BinaryWriter(cryptoStream)) {
+						PlayerHooks.PreSavePlayer(player);
 						binaryWriter.Write(230);
 						playerFile.Metadata.Write(binaryWriter);
 						binaryWriter.Write(player.name);
 						binaryWriter.Write(player.difficulty);
 						binaryWriter.Write(playerFile.GetPlayTime().Ticks);
 						binaryWriter.Write(player.hair);
-						binaryWriter.Write(player.hairDye);
+						PlayerIO.WriteVanillaHairDye(player.hairDye, binaryWriter);
 						BitsByte bb = (byte)0;
 						for (int i = 0; i < 8; i++) {
 							bb[i] = player.hideVisibleAccessory[i];
@@ -36660,63 +_,57 @@
 						binaryWriter.Write(player.shoeColor.G);
 						binaryWriter.Write(player.shoeColor.B);
 						for (int k = 0; k < player.armor.Length; k++) {
-							binaryWriter.Write(player.armor[k].netID);
+							ItemIO.WriteVanillaID(player.armor[k], binaryWriter);
 							binaryWriter.Write(player.armor[k].prefix);
 						}
 
 						for (int l = 0; l < player.dye.Length; l++) {
-							binaryWriter.Write(player.dye[l].netID);
+							ItemIO.WriteVanillaID(player.dye[l], binaryWriter);
 							binaryWriter.Write(player.dye[l].prefix);
 						}
 
 						for (int m = 0; m < 58; m++) {
-							binaryWriter.Write(player.inventory[m].netID);
+							ItemIO.WriteVanillaID(player.inventory[m], binaryWriter);
 							binaryWriter.Write(player.inventory[m].stack);
 							binaryWriter.Write(player.inventory[m].prefix);
 							binaryWriter.Write(player.inventory[m].favorited);
 						}
 
 						for (int n = 0; n < player.miscEquips.Length; n++) {
-							binaryWriter.Write(player.miscEquips[n].netID);
+							ItemIO.WriteVanillaID(player.miscEquips[n], binaryWriter);
 							binaryWriter.Write(player.miscEquips[n].prefix);
-							binaryWriter.Write(player.miscDyes[n].netID);
+							ItemIO.WriteVanillaID(player.miscDyes[n], binaryWriter);
 							binaryWriter.Write(player.miscDyes[n].prefix);
 						}
 
 						for (int num = 0; num < 40; num++) {
-							binaryWriter.Write(player.bank.item[num].netID);
+							ItemIO.WriteVanillaID(player.bank.item[num], binaryWriter);
 							binaryWriter.Write(player.bank.item[num].stack);
 							binaryWriter.Write(player.bank.item[num].prefix);
 						}
 
 						for (int num2 = 0; num2 < 40; num2++) {
-							binaryWriter.Write(player.bank2.item[num2].netID);
+							ItemIO.WriteVanillaID(player.bank2.item[num2], binaryWriter);
 							binaryWriter.Write(player.bank2.item[num2].stack);
 							binaryWriter.Write(player.bank2.item[num2].prefix);
 						}
 
 						for (int num3 = 0; num3 < 40; num3++) {
-							binaryWriter.Write(player.bank3.item[num3].netID);
+							ItemIO.WriteVanillaID(player.bank3.item[num3], binaryWriter);
 							binaryWriter.Write(player.bank3.item[num3].stack);
 							binaryWriter.Write(player.bank3.item[num3].prefix);
 						}
 
 						for (int num4 = 0; num4 < 40; num4++) {
 							binaryWriter.Write(player.bank4.item[num4].netID);
 							binaryWriter.Write(player.bank4.item[num4].stack);
 							binaryWriter.Write(player.bank4.item[num4].prefix);
 						}
 
 						binaryWriter.Write(player.voidVaultInfo);
 						for (int num5 = 0; num5 < 22; num5++) {
-							if (Main.buffNoSave[player.buffType[num5]]) {
-								binaryWriter.Write(0);
+							binaryWriter.Write(0);
-								binaryWriter.Write(0);
+							binaryWriter.Write(0);
-							}
-							else {
-								binaryWriter.Write(player.buffType[num5]);
-								binaryWriter.Write(player.buffTime[num5]);
-							}
 						}
 
 						for (int num6 = 0; num6 < 200; num6++) {
@@ -36761,8 +_,12 @@
 						stream.Flush();
 						if (isCloudSave && SocialAPI.Cloud != null)
 							SocialAPI.Cloud.Write(playerFile.Path, ((MemoryStream)stream).ToArray());
+
+						PlayerHooks.PostSavePlayer(player);
 					}
 				}
 			}
+
+			PlayerIO.Save(player, path, isCloudSave);
 		}
 
@@ -36836,7 +_,7 @@
 			if (Main.rand == null)
 				Main.rand = new UnifiedRandom((int)DateTime.Now.Ticks);
 
-			Player player = new Player();
+			Player player = new Player(false); // setup inventory is unnecessary
 			try {
 				RijndaelManaged rijndaelManaged = new RijndaelManaged();
 				rijndaelManaged.Padding = PaddingMode.None;
@@ -37175,7 +_,7 @@
 							if (num >= 11) {
 								int num28 = 22;
 								if (num < 74)
-									num28 = 10;
+									num28 -= 12;
 
 								for (int num29 = 0; num29 < num28; num29++) {
 									player.buffType[num29] = binaryReader.ReadInt32();
@@ -37275,6 +_,9 @@
 				playerFileData.Player = player;
 				return playerFileData;
 			}
+			catch (CustomModDataException e) {
+				playerFileData.customDataFail = e;
+			}
 			catch {
 			}
 
@@ -37308,3 +_,4 @@
 		private static void LoadPlayer_LastMinuteFixes(Player newPlayer) {
 			newPlayer.skinVariant = (int)MathHelper.Clamp(newPlayer.skinVariant, 0f, 11f);
+			PlayerIO.Load(newPlayer, playerPath, cloudSave);
 			for (int i = 3; i < 10; i++) {
@@ -37324,5 +_,6 @@
 				newPlayer.lavaTime = newPlayer.lavaMax;
 			}
+			newPlayer.ResetEffects();
 		}
 
 		public static PlayerFileData GetFileData(string file, bool cloudSave) {
@@ -37332,12 +_,17 @@
 			PlayerFileData playerFileData = LoadPlayer(file, cloudSave);
 			if (playerFileData.Player != null) {
 				if (playerFileData.Player.loadStatus != 0 && playerFileData.Player.loadStatus != 1) {
+					CustomModDataException customDataFail = playerFileData.customDataFail;
-					if (FileUtilities.Exists(file + ".bak", cloudSave))
+					if (FileUtilities.Exists(file + ".bak", cloudSave)) {
 						FileUtilities.Move(file + ".bak", file, cloudSave);
+						PlayerIO.LoadBackup(file, cloudSave);
+					}
 
 					playerFileData = LoadPlayer(file, cloudSave);
 					if (playerFileData.Player == null)
 						return null;
+
+					playerFileData.customDataFail = customDataFail;
 				}
 
 				return playerFileData;
@@ -37387,7 +_,33 @@
 			return -1;
 		}
 
-		public Player() {
+		internal IList<string> usedMods;
+		internal ModPlayer[] modPlayers = new ModPlayer[0];
+
+		private ModPlayer GetModPlayer(int? index) => index.HasValue ? modPlayers[index.Value] : null;
+
+		public ModPlayer GetModPlayer(Mod mod, string name) => GetModPlayer(mod.GetPlayer(name)?.index);
+
+		[Obsolete("Use GetModPlayer<T>() instead", true)]
+		public T GetModPlayer<T>(Mod mod) where T : ModPlayer => (T)GetModPlayer(mod, typeof(T).Name);
+
+		public T GetModPlayer<T>() where T : ModPlayer => (T)GetModPlayer(ModContent.GetInstance<T>()?.index);
+
+		public Player(bool startupInventory = true) {
+			NPCBannerBuff = new bool[NPCLoader.NPCCount];
+			buffType = new int[MaxBuffs];
+			buffTime = new int[MaxBuffs];
+			buffImmune = new bool[BuffLoader.BuffCount]; // TODO: Move all these patches to field initializers.
+			allDamage = 1f;
+			allDamageMult = 1f;
+			meleeDamageMult = 1f;
+			rangedDamageMult = 1f;
+			thrownDamageMult = 1f;
+			magicDamageMult = 1f;
+			minionDamageMult = 1f;
+			ownedProjectileCounts = new int[ProjectileLoader.ProjectileCount];
+			npcTypeNoAggro = new bool[NPCLoader.NPCCount];
+			PlayerHooks.SetupPlayer(this);
 			width = 20;
 			height = 42;
 			name = string.Empty;
@@ -37425,10 +_,10 @@
 
 			trashItem = new Item();
 			lastVisualizedSelectedItem = new Item();
 			grappling[0] = -1;
 			statManaMax = 20;
 			extraAccessory = false;
-			for (int n = 0; n < 623; n++) {
+			for (int n = 0; n < adjTile.Length; n++) {
 				adjTile[n] = false;
 				oldAdjTile[n] = false;
 			}
@@ -37656,6 +_,7 @@
 		}
 
 		public void GetAnglerReward() {
+			List<Item> rewardItems = new List<Item>();
 			Item item = new Item();
 			item.type = 0;
 			int num = anglerQuestsFinished;
@@ -37841,56 +_,23 @@
 					}
 			}
 
-			item.position = base.Center;
 			GetItemSettings nPCEntityToPlayerInventorySettings = GetItemSettings.NPCEntityToPlayerInventorySettings;
-			Item item2 = GetItem(whoAmI, item, nPCEntityToPlayerInventorySettings);
-			if (item2.stack > 0) {
-				int number = Item.NewItem((int)position.X, (int)position.Y, width, height, item2.type, item2.stack, noBroadcast: false, 0, noGrabDelay: true);
-				if (Main.netMode == 1)
-					NetMessage.SendData(21, -1, -1, null, number, 1f);
-			}
-
+			rewardItems.Add(item);
 			if (item.type == 2417) {
 				Item item3 = new Item();
 				Item item4 = new Item();
 				item3.SetDefaults(2418);
-				item3.position = base.Center;
-				item2 = GetItem(whoAmI, item3, nPCEntityToPlayerInventorySettings);
-				if (item2.stack > 0) {
-					int number2 = Item.NewItem((int)position.X, (int)position.Y, width, height, item2.type, item2.stack, noBroadcast: false, 0, noGrabDelay: true);
-					if (Main.netMode == 1)
-						NetMessage.SendData(21, -1, -1, null, number2, 1f);
-				}
-
+				rewardItems.Add(item3);
 				item4.SetDefaults(2419);
-				item4.position = base.Center;
-				item2 = GetItem(whoAmI, item4, nPCEntityToPlayerInventorySettings);
-				if (item2.stack > 0) {
-					int number3 = Item.NewItem((int)position.X, (int)position.Y, width, height, item2.type, item2.stack, noBroadcast: false, 0, noGrabDelay: true);
-					if (Main.netMode == 1)
-						NetMessage.SendData(21, -1, -1, null, number3, 1f);
-				}
+				rewardItems.Add(item4);
 			}
 			else if (item.type == 2498) {
 				Item item5 = new Item();
 				Item item6 = new Item();
 				item5.SetDefaults(2499);
-				item5.position = base.Center;
-				item2 = GetItem(whoAmI, item5, nPCEntityToPlayerInventorySettings);
-				if (item2.stack > 0) {
-					int number4 = Item.NewItem((int)position.X, (int)position.Y, width, height, item2.type, item2.stack, noBroadcast: false, 0, noGrabDelay: true);
-					if (Main.netMode == 1)
-						NetMessage.SendData(21, -1, -1, null, number4, 1f);
-				}
-
+				rewardItems.Add(item5);
 				item6.SetDefaults(2500);
-				item6.position = base.Center;
-				item2 = GetItem(whoAmI, item6, nPCEntityToPlayerInventorySettings);
-				if (item2.stack > 0) {
-					int number5 = Item.NewItem((int)position.X, (int)position.Y, width, height, item2.type, item2.stack, noBroadcast: false, 0, noGrabDelay: true);
-					if (Main.netMode == 1)
-						NetMessage.SendData(21, -1, -1, null, number5, 1f);
-				}
+				rewardItems.Add(item6);
 			}
 
 			Item item7 = new Item();
@@ -37922,16 +_,9 @@
 				item7.stack = num3;
 			}
 
-			item7.position = base.Center;
-			item2 = GetItem(whoAmI, item7, nPCEntityToPlayerInventorySettings);
-			if (item2.stack > 0) {
-				int number6 = Item.NewItem((int)position.X, (int)position.Y, width, height, item2.type, item2.stack, noBroadcast: false, 0, noGrabDelay: true);
-				if (Main.netMode == 1)
-					NetMessage.SendData(21, -1, -1, null, number6, 1f);
-			}
-
+			rewardItems.Add(item7);
 			if (Main.rand.Next((int)(100f * num2)) > 50)
-				return;
+				goto postAnglerQuestCountCheck;
 
 			Item item8 = new Item();
 			if (Main.rand.Next((int)(15f * num2)) == 0)
@@ -37959,12 +_,18 @@
 			if (Main.rand.Next(250) <= num)
 				item8.stack++;
 
+			rewardItems.Add(item8);
+
+			postAnglerQuestCountCheck:
+			PlayerHooks.AnglerQuestReward(this, num2, rewardItems);
+			foreach (Item rewardItem in rewardItems) {
-			item8.position = base.Center;
+				rewardItem.position = Center;
-			item2 = GetItem(whoAmI, item8, GetItemSettings.NPCEntityToPlayerInventorySettings);
+				Item getItem = GetItem(whoAmI, rewardItem, GetItemSettings.NPCEntityToPlayerInventorySettings);
-			if (item2.stack > 0) {
+				if (getItem.stack > 0) {
-				int number7 = Item.NewItem((int)position.X, (int)position.Y, width, height, item2.type, item2.stack, noBroadcast: false, 0, noGrabDelay: true);
+					int number = Item.NewItem((int)position.X, (int)position.Y, width, height, getItem.type, getItem.stack, noBroadcast: false, 0, noGrabDelay: true);
-				if (Main.netMode == 1)
+					if (Main.netMode == 1)
-					NetMessage.SendData(21, -1, -1, null, number7, 1f);
+						NetMessage.SendData(21, -1, -1, null, number, 1f);
+				}
 			}
 		}
 
@@ -38091,6 +_,7 @@
 					list.Add(3024);
 			}
 
+			PlayerHooks.GetDyeTraderReward(this, list);
 			num = list[Main.rand.Next(list.Count)];
 			Item item = new Item();
 			item.SetDefaults(num);
@@ -38104,6 +_,49 @@
 			}
 		}
 
+		public int GetManaCost(Item item) {
+			float reduce = manaCost;
+			float mult = 1;
+			if (item.type == ItemID.SpaceGun && spaceGun)
+				mult = 0;
+
+			CombinedHooks.ModifyManaCost(this, item, ref reduce, ref mult);
+			int mana = (int)(item.mana * reduce * mult);
+			return mana >= 0 ? mana : 0;
+		}
+
+		public bool CheckMana(Item item, int amount = -1, bool pay = false, bool blockQuickMana = false) {
+			if (amount <= -1)
+				amount = GetManaCost(item);
+
+			if (statMana >= amount) {
+				if (pay) {
+					CombinedHooks.OnConsumeMana(this, item, amount);
+					statMana -= amount;
+				}
+
+				return true;
+			}
+
+			if (blockQuickMana)
+				return false;
+
+			CombinedHooks.OnMissingMana(this, item, amount);
+			if (statMana < amount && manaFlower)
+				QuickMana();
+
+			if (statMana >= amount) {
+				if (pay) {
+					CombinedHooks.OnConsumeMana(this, item, amount);
+					statMana -= amount;
+				}
+
+				return true;
+			}
+
+			return false;
+		}
+
 		public bool CheckMana(int amount, bool pay = false, bool blockQuickMana = false) {
 			int num = (int)((float)amount * manaCost);
 			if (statMana >= num) {
@@ -38134,9 +_,9 @@
 		}
 
 		public bool ConsumeSolarFlare() {
 			if (setSolar && solarShields > 0) {
 				solarShields--;
-				for (int i = 0; i < 22; i++) {
+				for (int i = 0; i < MaxBuffs; i++) {
 					if (buffType[i] >= 170 && buffType[i] <= 172)
 						DelBuff(i);
 				}
@@ -38374,7 +_,7 @@
 				return;
 
 			int timeToAdd = 480;
-			for (int i = 0; i < 22; i++) {
+			for (int i = 0; i < MaxBuffs; i++) {
 				if (buffType[i] >= type && buffType[i] < type + 3)
 					DelBuff(i);
 			}
