--- src/Terraria/Terraria/Player.cs
+++ src/tModLoader/Terraria/Player.cs
@@ -34,6 +_,10 @@
 using Terraria.UI.Gamepad;
 using Terraria.Utilities;
 using Terraria.WorldBuilding;
+using Terraria.ModLoader;
+using Terraria.ModLoader.Exceptions;
+using Terraria.ModLoader.IO;
+using Terraria.ModLoader.UI;
 
 namespace Terraria
 {
@@ -167,15 +_,21 @@
 
 			public static void PlayerConnect(int playerIndex) {
 				PressurePlateHelper.ResetPlayer(playerIndex);
+				PlayerHooks.PlayerConnect(playerIndex);
 			}
 
 			public static void PlayerDisconnect(int playerIndex) {
 				PressurePlateHelper.ResetPlayer(playerIndex);
+				PlayerHooks.PlayerDisconnect(playerIndex);
 			}
 
 			public static void EnterWorld(int playerIndex) {
+				Logging.Terraria.InfoFormat("Entering world with player: {0}, IsCloud={1}", Main.ActivePlayerFileData.Name, Main.ActivePlayerFileData.IsCloudSave);
+				Interface.ResetData();
 				if (Hooks.OnEnterWorld != null)
 					Hooks.OnEnterWorld(Main.player[playerIndex]);
+
+				PlayerHooks.OnEnterWorld(playerIndex);
 			}
 		}
 
@@ -375,7 +_,7 @@
 
 		public int emoteTime;
 		public CreativeUnlocksTracker creativeTracker;
-		private static byte[] ENCRYPTION_KEY = new UnicodeEncoding().GetBytes("h3y_gUyZ");
+		internal static byte[] ENCRYPTION_KEY = new UnicodeEncoding().GetBytes("h3y_gUyZ");
 		public OverheadMessage chatOverhead;
 		public SelectionRadial DpadRadial = new SelectionRadial();
 		public SelectionRadial CircularRadial = new SelectionRadial(SelectionRadial.SelectionMode.RadialCircular);
@@ -665,7 +_,7 @@
 		public bool poundRelease;
 		public float ghostFade;
 		public float ghostDir = 1f;
-		public const int maxBuffs = 22;
+		public static int MaxBuffs => 22 + BuffLoader.extraPlayerBuffCount;
 		public int[] buffType = new int[22];
 		public int[] buffTime = new int[22];
 		public bool[] buffImmune = new bool[323];
@@ -1018,6 +_,13 @@
 		public int meleeCrit = 4;
 		public int magicCrit = 4;
 		public int rangedCrit = 4;
+		public float allDamage; // added to better support new damage classes
+		public float allDamageMult;
+		public float meleeDamageMult;
+		public float rangedDamageMult;
+		public float magicDamageMult;
+		public float thrownDamageMult;
+		public float minionDamageMult;
 		public float meleeDamage = 1f;
 		public float magicDamage = 1f;
 		public float rangedDamage = 1f;
@@ -1061,8 +_,26 @@
 		public bool oldAdjWater;
 		public bool oldAdjHoney;
 		public bool oldAdjLava;
-		public bool[] adjTile = new bool[623];
-		public bool[] oldAdjTile = new bool[623];
+		private bool[] _adjTile = new bool[TileLoader.TileCount];
+		public bool[] adjTile {
+			get {
+				if (_adjTile.Length != TileLoader.TileCount)
+					Array.Resize(ref _adjTile, TileLoader.TileCount);
+
+				return _adjTile;
+			}
+			set { _adjTile = value; }
+		}
+		private bool[] _oldAdjTile = new bool[TileLoader.TileCount];
+		public bool[] oldAdjTile {
+			get {
+				if (_oldAdjTile.Length != TileLoader.TileCount)
+					Array.Resize(ref _oldAdjTile, TileLoader.TileCount);
+
+				return _oldAdjTile;
+			}
+			set { _oldAdjTile = value; }
+		}
 		public static int defaultItemGrabRange = 42;
 		private static float itemGrabSpeed = 0.45f;
 		private static float itemGrabSpeedMax = 4f;
@@ -2044,6 +_,10 @@
 		}
 
 		public void AccumulateGolfingScore(int score) {
+			if (!ItemLoader.PreOpenVanillaBag("crate", this, type))
+				return;
+
+			ItemLoader.OpenVanillaBag("crate", this, type);
 			int num = score;
 			if (golferScoreAccumulated + num > 1000000000)
 				num = 1000000000 - golferScoreAccumulated;
@@ -2229,6 +_,7 @@
 				Item item = GetItem(whoAmI, Main.guideItem, getItemInDropItemCheck);
 				if (item.stack > 0) {
 					int num = Item.NewItem((int)position.X, (int)position.Y, width, height, item.type, item.stack, noBroadcast: false, Main.guideItem.prefix, noGrabDelay: true);
+					Main.item[num] = item.Clone();
 					Main.item[num].newAndShiny = false;
 					if (Main.netMode == 1)
 						NetMessage.SendData(21, -1, -1, null, num, 1f);
@@ -2242,6 +_,7 @@
 				Item item2 = GetItem(whoAmI, Main.reforgeItem, getItemInDropItemCheck);
 				if (item2.stack > 0) {
 					int num2 = Item.NewItem((int)position.X, (int)position.Y, width, height, item2.type, item2.stack, noBroadcast: false, Main.reforgeItem.prefix, noGrabDelay: true);
+					Main.item[num2] = item2.Clone();
 					Main.item[num2].newAndShiny = false;
 					if (Main.netMode == 1)
 						NetMessage.SendData(21, -1, -1, null, num2, 1f);
@@ -2277,6 +_,7 @@
 				Item item3 = GetItem(whoAmI, Main.mouseItem, getItemInDropItemCheck);
 				if (item3.stack > 0) {
 					int num3 = Item.NewItem((int)position.X, (int)position.Y, width, height, item3.type, item3.stack, noBroadcast: false, Main.mouseItem.prefix, noGrabDelay: true);
+					Main.item[num3] = item3.Clone();
 					Main.item[num3].newAndShiny = false;
 					if (Main.netMode == 1)
 						NetMessage.SendData(21, -1, -1, null, num3, 1f);
@@ -2359,11 +_,13 @@
 			}
 		}
 
+		public bool HasBuff(int type) => FindBuffIndex(type) != -1;
+
 		public int FindBuffIndex(int type) {
 			if (buffImmune[type])
 				return -1;
 
-			for (int i = 0; i < 22; i++) {
+			for (int i = 0; i < MaxBuffs; i++) {
 				if (buffTime[i] >= 1 && buffType[i] == type)
 					return i;
 			}
@@ -2397,7 +_,7 @@
 			int num = -1;
 			while (num == -1) {
 				int num2 = -1;
-				for (int i = 0; i < 22; i++) {
+				for (int l = 0; l < MaxBuffs; l++) {
 					if (!Main.debuff[buffType[i]]) {
 						num2 = i;
 						break;
@@ -2407,7 +_,7 @@
 				if (num2 == -1)
 					return false;
 
-				for (int j = num2; j < 22; j++) {
+				for (int m = num3; m < MaxBuffs; m++) {
 					if (buffType[j] == 0) {
 						num = j;
 						break;
@@ -2446,7 +_,7 @@
 			if (!Main.vanityPet[type])
 				return;
 
-			for (int j = 0; j < 22; j++) {
+			for (int n = 0; n < MaxBuffs; n++) {
 				if (Main.vanityPet[buffType[j]])
 					DelBuff(j);
 			}
@@ -2454,11 +_,13 @@
 
 		private bool AddBuff_TryUpdatingExistingBuffTime(int type, int time) {
 			bool result = false;
-			for (int i = 0; i < 22; i++) {
+			for (int j = 0; j < MaxBuffs; j++) {
 				if (buffType[i] != type)
 					continue;
 
+				if (BuffLoader.ReApply(type, this, num, j)) {
+				}
-				if (type == 94) {
+				else if (type == 94) {
 					buffTime[i] += time;
 					if (buffTime[i] > manaSickTimeMax)
 						buffTime[i] = manaSickTimeMax;
@@ -2485,20 +_,28 @@
 		public void DelBuff(int b) {
 			buffTime[b] = 0;
 			buffType[b] = 0;
-			for (int i = 0; i < 21; i++) {
-				if (buffTime[i] == 0 || buffType[i] == 0) {
-					for (int j = i + 1; j < 22; j++) {
-						buffTime[j - 1] = buffTime[j];
-						buffType[j - 1] = buffType[j];
-						buffTime[j] = 0;
-						buffType[j] = 0;
-					}
+			//single pass compactor (vanilla is n^2)
+			int packedIdx = 0;
+			for (int i = 0; i < MaxBuffs - 1; i++) {
+				if (buffTime[i] == 0 || buffType[i] == 0)
+					continue;
+
+				if (packedIdx < i) {
+					buffTime[packedIdx] = buffTime[i];
+					buffType[packedIdx] = buffType[i];
+					buffTime[i] = 0;
+					buffType[i] = 0;
 				}
+
+				packedIdx++;
 			}
 		}
 
 		public void ClearBuff(int type) {
+			if (type == 0)
+				return;
+
-			for (int i = 0; i < 22; i++) {
+			for (int i = 0; i < MaxBuffs; i++) {
 				if (buffType[i] == type)
 					DelBuff(i);
 			}
@@ -2506,7 +_,7 @@
 
 		public int CountBuffs() {
 			int num = 0;
-			for (int i = 0; i < 22; i++) {
+			for (int i = 0; i < MaxBuffs; i++) {
 				if (buffType[num] > 0)
 					num++;
 			}
@@ -2514,6 +_,20 @@
 			return num;
 		}
 
+		public int GetHealLife(Item item, bool quickHeal = false) {
+			int healValue = item.healLife;
+			ItemLoader.GetHealLife(item, this, quickHeal, ref healValue);
+			PlayerHooks.GetHealLife(this, item, quickHeal, ref healValue);
+			return healValue > 0 ? healValue : 0;
+		}
+
+		public int GetHealMana(Item item, bool quickHeal = false) {
+			int healValue = item.healMana;
+			ItemLoader.GetHealMana(item, this, quickHeal, ref healValue);
+			PlayerHooks.GetHealMana(this, item, quickHeal, ref healValue);
+			return healValue > 0 ? healValue : 0;
+		}
+
 		public void QuickHeal() {
 			if (cursed || CCed || dead || statLife == statLifeMax2 || potionDelay > 0)
 				return;
@@ -2534,24 +_,29 @@
 				}
 			}
 
+			ItemLoader.UseItem(item, this);
+			int healLife = GetHealLife(item, true);
+			int healMana = GetHealMana(item, true);
-			statLife += item.healLife;
+			statLife += healLife;
-			statMana += item.healMana;
+			statMana += healMana;
 			if (statLife > statLifeMax2)
 				statLife = statLifeMax2;
 
 			if (statMana > statManaMax2)
 				statMana = statManaMax2;
 
-			if (item.healLife > 0 && Main.myPlayer == whoAmI)
-				HealEffect(item.healLife);
+			if (healLife > 0 && Main.myPlayer == whoAmI)
+				HealEffect(healLife, true);
 
-			if (item.healMana > 0) {
+			if (healMana > 0) {
 				AddBuff(94, manaSickTime);
 				if (Main.myPlayer == whoAmI)
-					ManaEffect(item.healMana);
+					ManaEffect(healMana);
 			}
 
+			if (ItemLoader.ConsumeItem(item, this))
-			item.stack--;
+				item.stack--;
+
 			if (item.stack <= 0)
 				item.TurnToAir();
 
@@ -2565,9 +_,12 @@
 			for (int i = 0; i < 58; i++) {
 				Item item = inventory[i];
 				if (item.stack <= 0 || item.type <= 0 || !item.potion || item.healLife <= 0)
+					continue;				
+				
+				if(!ItemLoader.CanUseItem(item, this))
 					continue;
 
-				int num3 = item.healLife - num;
+				int num3 = GetHealLife(item, true) - num;
 				if (item.type == 227 && num3 < 0) {
 					num3 += 30;
 					if (num3 > 0)
@@ -2596,7 +_,7 @@
 			int num = 0;
 			while (true) {
 				if (num < 58) {
-					if (inventory[num].stack > 0 && inventory[num].type > 0 && inventory[num].healMana > 0 && (potionDelay == 0 || !inventory[num].potion))
+					if (inventory[num].stack > 0 && inventory[num].type > 0 && inventory[num].healMana > 0 && (potionDelay == 0 || !inventory[num].potion) && ItemLoader.CanUseItem(inventory[num], this))
 						break;
 
 					num++;
@@ -2618,24 +_,29 @@
 				}
 			}
 
-			statLife += inventory[num].healLife;
-			statMana += inventory[num].healMana;
+			ItemLoader.UseItem(inventory[num], this);
+			int healLife = GetHealLife(inventory[num], true);
+			int healMana = GetHealMana(inventory[num], true);
+			statLife += healLife;
+			statMana += healMana;
 			if (statLife > statLifeMax2)
 				statLife = statLifeMax2;
 
 			if (statMana > statManaMax2)
 				statMana = statManaMax2;
 
-			if (inventory[num].healLife > 0 && Main.myPlayer == whoAmI)
-				HealEffect(inventory[num].healLife);
+			if (healLife > 0 && Main.myPlayer == whoAmI)
+				HealEffect(healLife, true);
 
-			if (inventory[num].healMana > 0) {
+			if (healMana > 0) {
 				AddBuff(94, manaSickTime);
 				if (Main.myPlayer == whoAmI)
-					ManaEffect(inventory[num].healMana);
+					ManaEffect(healMana);
 			}
 
+			if (ItemLoader.ConsumeItem(inventory[num], this))
-			inventory[num].stack--;
+				inventory[num].stack--;
+
 			if (inventory[num].stack <= 0)
 				inventory[num].TurnToAir();
 
@@ -2644,7 +_,7 @@
 
 		public Item QuickMana_GetItemToUse() {
 			for (int i = 0; i < 58; i++) {
-				if (inventory[i].stack > 0 && inventory[i].type > 0 && inventory[i].healMana > 0 && (potionDelay == 0 || !inventory[i].potion))
+				if (inventory[i].stack > 0 && inventory[i].type > 0 && inventory[i].healMana > 0 && (potionDelay == 0 || !inventory[i].potion) && ItemLoader.CanUseItem(inventory[i], this))
 					return inventory[i];
 			}
 
@@ -2692,6 +_,7 @@
 						}
 					}
 
+				SkipManaCode:
 					if (whoAmI == Main.myPlayer && item2.type == 603 && !Main.runningCollectorsEdition)
 						flag = false;
 
@@ -2796,7 +_,7 @@
 			}
 
 			if (Main.lightPet[attemptedType] || Main.vanityPet[attemptedType]) {
-				for (int j = 0; j < 22; j++) {
+				for (int k = 0; k < MaxBuffs; k++) {
 					if (Main.lightPet[buffType[j]] && Main.lightPet[attemptedType])
 						result = false;
 
@@ -2820,6 +_,7 @@
 				if (item != null && item.mountType != -1 && mount.CanMount(item.mountType, this)) {
 					if (!QuickMinecartSnap()) {
 						mount.SetMount(item.mountType, this);
+						ItemLoader.UseItem(item, this);
 						if (item.UseSound != null)
 							SoundEngine.PlaySound(item.UseSound, base.Center);
 					}
@@ -2885,18 +_,48 @@
 					result = true;
 				}
 			}
+		}
 
+		public void UpdateEquips(int i) //Noise for the Diff
+		{
+			for (int j = 0; j < 58; j++) {
+				VanillaUpdateInventory(inventory[j]);
+			}
+
+			for (int k = 0; k < 8 + extraAccessorySlots; k++) {
+				VanillaUpdateEquip(armor[k]);
+			}
+
+			bool flag = false;
+			bool flag2 = false;
+			bool flag3 = false;
+			for (int l = 3; l < 8 + extraAccessorySlots; l++) {
+				VanillaUpdateAccessory(i, armor[l], hideVisual[l], ref flag, ref flag2, ref flag3);
+			}
+
+			if (dd2Accessory) {
+				minionDamage += 0.1f;
+				maxTurrets++;
+			}
+
+			PlayerHooks.UpdateEquips(this, ref flag, ref flag2, ref flag3);
+			//wing loop merged into VanillaUpdateAccessory
+			for (int n = 13; n < 18 + extraAccessorySlots; n++) {
+				VanillaUpdateVanityAccessory(armor[n]);
+			}
+
+			PlayerHooks.UpdateVanityAccessories(this);
 			return result;
 		}
 
 		public Item QuickMount_GetItemToUse() {
 			Item item = null;
-			if (item == null && miscEquips[3].mountType != -1 && !MountID.Sets.Cart[miscEquips[3].mountType])
+			if (item == null && miscEquips[3].mountType != -1 && !MountID.Sets.Cart[miscEquips[3].mountType] && ItemLoader.CanUseItem(miscEquips[3], this))
 				item = miscEquips[3];
 
 			if (item == null) {
 				for (int i = 0; i < 58; i++) {
-					if (inventory[i].mountType != -1 && !MountID.Sets.Cart[inventory[i].mountType]) {
+					if (inventory[i].mountType != -1 && !MountID.Sets.Cart[inventory[i].mountType] && ItemLoader.CanUseItem(inventory[i], this)) {
 						item = inventory[i];
 						break;
 					}
@@ -2956,7 +_,12 @@
 			if (item == null)
 				return;
 
+			bool? modCanGrapple = ProjectileLoader.CanUseGrapple(item.shoot, this);
+			if (modCanGrapple.HasValue) {
+				if (!modCanGrapple.Value)
+					item = null;
+			}
-			if (item.shoot == 73) {
+			else if (item.shoot == 73) {
 				int num2 = 0;
 				for (int i = 0; i < 1000; i++) {
 					if (Main.projectile[i].active && Main.projectile[i].owner == Main.myPlayer && (Main.projectile[i].type == 73 || Main.projectile[i].type == 74))
@@ -3031,11 +_,18 @@
 			float shootSpeed = item.shootSpeed;
 			int damage = item.damage;
 			float knockBack = item.knockBack;
-			if (num7 == 13 || num7 == 32 || num7 == 315 || (num7 >= 230 && num7 <= 235) || num7 == 331 || num7 == 753 || num7 == 865 || num7 == 935) {
+			bool? modSingleHook = ProjectileLoader.SingleGrappleHook(num8, this);
+			bool modSingleHookFalse = modSingleHook.HasValue ? !modSingleHook.Value : false;
+			bool modSingleHookTrue = modSingleHook.HasValue ? modSingleHook.Value : false;
+			if ((num8 == 13 || num8 == 32 || num8 == 315 || num8 >= 230 && num8 <= 235 || num8 == 331 || modSingleHookTrue) && !modSingleHookFalse) {
 				grappling[0] = -1;
 				grapCount = 0;
 				for (int num8 = 0; num8 < 1000; num8++) {
 					if (Main.projectile[num8].active && Main.projectile[num8].owner == whoAmI) {
+						bool? modSingleHook2 = ProjectileLoader.SingleGrappleHook(Main.projectile[num9].type, this);
+						if (modSingleHook2.HasValue && !modSingleHook2.Value)
+							continue;
+
 						switch (Main.projectile[num8].type) {
 							case 13:
 							case 230:
@@ -3127,6 +_,8 @@
 				}
 			}
 
+			ProjectileLoader.UseGrapple(this, ref num8);
+
 			Vector2 vector = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
 			float num21 = (float)Main.mouseX + Main.screenPosition.X - vector.X;
 			float num22 = (float)Main.mouseY + Main.screenPosition.Y - vector.Y;
@@ -3329,6 +_,9 @@
 
 						if (flag)
 							NetMessage.SendData(13, -1, -1, null, Main.myPlayer);
+
+						if (modSingleHook2.HasValue && modSingleHook2.Value)
+							Main.projectile[num9].Kill();
 					}
 				}
 			}
@@ -3479,7 +_,7 @@
 			}
 
 			if (!crystalLeaf || petalTimer != 0)
-				return;
+				goto End;
 
 			_ = inventory[selectedItem].type;
 			int num5 = 0;
@@ -3492,7 +_,7 @@
 					continue;
 				}
 
-				return;
+				goto End;
 			}
 
 			petalTimer = 50;
@@ -3504,9 +_,17 @@
 			num6 *= num8;
 			num7 *= num8;
 			Projectile.NewProjectile(Main.projectile[num5].Center.X - 4f, Main.projectile[num5].Center.Y, num6, num7, 227, crystalLeafDamage, crystalLeafKB, whoAmI);
+
+			End:
+
+			PlayerHooks.OnHitAnything(this, x, y, victim);
 		}
 
 		public void openPresent() {
+			if (!ItemLoader.PreOpenVanillaBag("present", this, 0))
+				return;
+
+			ItemLoader.OpenVanillaBag("present", this, 0);
 			if (Main.rand.Next(15) == 0 && Main.hardMode) {
 				int number = Item.NewItem((int)position.X, (int)position.Y, width, height, 602);
 				if (Main.netMode == 1)
@@ -3730,7 +_,31 @@
 						break;
 					}
 			}
+			NPCLoader.blockLoot.Clear(); // clear blockloot
+			// TODO: return statements above probably break this.
 		}
+
+		/// <summary>
+		/// Will spawn an item like QuickSpawnItem, but clones it (handy when you need to retain item infos)
+		/// </summary>
+		/// <param name="item">The item you want to be cloned</param>
+		/// <param name="stack">The stack to give the item. Note that this will override maxStack if it's higher.</param>
+		public void QuickSpawnClonedItem(Item item, int stack = 1) {
+			int index = Item.NewItem((int)position.X, (int)position.Y, width, height, item.type, stack, false, -1, false, false);
+			Main.item[index] = item.Clone();
+			Main.item[index].whoAmI = index;
+			Main.item[index].position = position;
+			if (stack != Main.item[index].stack)
+				Main.item[index].stack = stack;
+
+			// Sync the item for mp
+			if (Main.netMode == NetmodeID.MultiplayerClient)
+				NetMessage.SendData(MessageID.SyncItem, -1, -1, null, index, 1f, 0f, 0f, 0, 0, 0);
+		}
+
+		public void QuickSpawnItem(Item item, int stack = 1) {
+			QuickSpawnItem(item.type, stack);
+ 		}
 
 		public void QuickSpawnItem(int item, int stack = 1) {
 			int number = Item.NewItem((int)position.X, (int)position.Y, width, height, item, stack, noBroadcast: false, -1);
@@ -3739,6 +_,10 @@
 		}
 
 		public void OpenBossBag(int type) {
+			if (!ItemLoader.PreOpenVanillaBag("bossBag", this, type))
+				return;
+
+			ItemLoader.OpenVanillaBag("bossBag", this, type);
 			switch (type) {
 				case 3318: {
 						if (Main.rand.Next(2) == 0)
@@ -4172,8 +_,11 @@
 			if (type == 4957)
 				num11 = 657;
 
+			ItemLoader.OpenBossBag(type, this, ref num9);
-			if (num11 <= 0)
+			if (num9 <= 0) {
+				NPCLoader.blockLoot.Clear(); // clear blockloot
 				return;
+			}
 
 			NPC nPC = new NPC();
 			nPC.SetDefaults(num11);
@@ -4220,9 +_,13 @@
 				value -= (float)num15;
 				QuickSpawnItem(71, num15);
 			}
+			NPCLoader.blockLoot.Clear(); // clear blockloot
 		}
 
-		private void TryGettingDevArmor() {
+		public void TryGettingDevArmor() {
+			if (ModLoader.Default.ModLoaderMod.TryGettingPatreonOrDevArmor(this))
+				return;
+
 			if (Main.rand.Next(20) == 0) {
 				switch (Main.rand.Next(18)) {
 					case 0:
@@ -5428,9 +_,9 @@
 				}
 
 				if (Main.rand.Next(4) != 0)
-					continue;
+					goto postMusicBoxes; // TODO: double check wings logic, etc.
 
-				int num18 = Main.rand.Next(6);
+				if (armor[l].type == 576 && Main.rand.Next(10800) == 0 && Main.curMusic > 0) {
 				switch (num18) {
 					case 0:
 						num18 = 22;
@@ -5607,6 +_,8 @@
 				if (Main.netMode == 1)
 					NetMessage.SendData(21, -1, -1, null, number58, 1f);
 			}
+
+			NPCLoader.blockLoot.Clear(); // clear blockloot
 		}
 
 		public int CountItem(int type, int stopCountingAt = 0) {
@@ -5634,7 +_,9 @@
 
 			for (int i = num; i != num2; i += num3) {
 				if (inventory[i].stack > 0 && inventory[i].type == type) {
+					if (ItemLoader.ConsumeItem(inventory[i], this))
-					inventory[i].stack--;
+						inventory[i].stack--;
+
 					if (inventory[i].stack <= 0)
 						inventory[i].SetDefaults();
 
@@ -5646,6 +_,10 @@
 		}
 
 		public void OpenShadowLockbox() {
+			if (!ItemLoader.PreOpenVanillaBag("lockBox", this, 0))
+				return;
+
+			ItemLoader.OpenVanillaBag("lockBox", this, 0);
 			bool flag = true;
 			while (flag) {
 				flag = false;
@@ -5717,9 +_,15 @@
 						NetMessage.SendData(21, -1, -1, null, number2, 1f);
 				}
 			}
+
+			NPCLoader.blockLoot.Clear(); // clear blockloot
 		}
 
 		public void OpenHerbBag() {
+			if (!ItemLoader.PreOpenVanillaBag("herbBag", this, 0))
+				return;
+
+			ItemLoader.OpenVanillaBag("herbBag", this, 0);
 			int num = Main.rand.Next(2, 5);
 			if (Main.rand.Next(3) == 0)
 				num++;
@@ -5809,6 +_,12 @@
 				return;
 			}
 
+			NPCLoader.blockLoot.Clear(); // clear blockloot
+
+			if (!ItemLoader.PreOpenVanillaBag("goodieBag", this, 0))
+				return;
+
+			ItemLoader.OpenVanillaBag("goodieBag", this, 0);
 			if (Main.rand.Next(150) == 0) {
 				int number2 = Item.NewItem((int)position.X, (int)position.Y, width, height, 1800);
 				if (Main.netMode == 1)
@@ -6088,6 +_,7 @@
 						break;
 					}
 			}
+			NPCLoader.blockLoot.Clear(); // clear blockloot
 		}
 
 		public void UpdateDyes() {
@@ -6202,13 +_,14 @@
 			if (soulDrain > 0 && whoAmI == Main.myPlayer)
 				AddBuff(151, 2);
 
-			for (int j = 0; j < 22; j++) {
+			for (int k = 0; k < MaxBuffs; k++) {
 				if (buffType[j] <= 0 || buffTime[j] <= 0)
 					continue;
 
 				if (whoAmI == Main.myPlayer && !BuffID.Sets.TimeLeftDoesNotDecrease[buffType[j]])
 					buffTime[j]--;
 
+				int originalIndex = k;
 				if (buffType[j] == 1) {
 					lavaImmune = true;
 					fireWalk = true;
@@ -6451,10 +_,13 @@
 					}
 				}
 				else if (buffType[j] == 117) {
+					allDamage += 0.1f;
+					/*
 					meleeDamage += 0.1f;
 					rangedDamage += 0.1f;
 					magicDamage += 0.1f;
 					minionDamage += 0.1f;
+					*/
 				}
 				else if (buffType[j] == 119) {
 					loveStruck = true;
@@ -6499,7 +_,7 @@
 							j--;
 						}
 						else {
-							for (int m = 0; m < 22; m++) {
+							for (int num5 = 0; num5 < MaxBuffs; num5++) {
 								if (buffType[m] >= 95 && buffType[m] <= 95 + num4 - 1) {
 									DelBuff(m);
 									m--;
@@ -6527,7 +_,7 @@
 							j--;
 						}
 						else {
-							for (int n = 0; n < 22; n++) {
+							for (int n = 0; n < MaxBuffs; n++) {
 								if (buffType[n] >= 170 && buffType[n] <= 170 + num5 - 1) {
 									DelBuff(n);
 									n--;
@@ -6551,7 +_,7 @@
 							j--;
 						}
 						else {
-							for (int num7 = 0; num7 < 22; num7++) {
+							for (int num7 = 0; num7 < MaxBuffs; num7++) {
 								if (buffType[num7] >= 98 && buffType[num7] <= 98 + num6 - 1) {
 									DelBuff(num7);
 									num7--;
@@ -6581,7 +_,7 @@
 							j--;
 						}
 						else {
-							for (int num10 = 0; num10 < 22; num10++) {
+							for (int num10 = 0; num10 < MaxBuffs; num10++) {
 								if (buffType[num10] >= 176 && buffType[num10] <= 178 + num9 - 1) {
 									DelBuff(num10);
 									num10--;
@@ -6606,7 +_,7 @@
 							j--;
 						}
 						else {
-							for (int num13 = 0; num13 < 22; num13++) {
+							for (int num13 = 0; num13 < MaxBuffs; num13++) {
 								if (buffType[num13] >= 173 && buffType[num13] <= 175 + num12 - 1) {
 									DelBuff(num13);
 									num13--;
@@ -6633,7 +_,7 @@
 							j--;
 						}
 						else {
-							for (int num16 = 0; num16 < 22; num16++) {
+							for (int num16 = 0; num16 < MaxBuffs; num16++) {
 								if (buffType[num16] >= 179 && buffType[num16] <= 181 + num15 - 1) {
 									DelBuff(num16);
 									num16--;
@@ -6650,10 +_,13 @@
 					}
 
 					float num17 = 0.15f * (float)nebulaLevelDamage;
+					allDamage += num17;
+					/*
 					meleeDamage += num17;
 					rangedDamage += num17;
 					magicDamage += num17;
 					minionDamage += num17;
+					*/
 				}
 				else if (buffType[j] == 62) {
 					if ((double)statLife <= (double)statLifeMax2 * 0.5) {
@@ -7272,10 +_,13 @@
 						}
 					}
 
+					allDamage += 0.2f;
+					/*
 					meleeDamage += 0.2f;
 					magicDamage += 0.2f;
 					rangedDamage += 0.2f;
 					minionDamage += 0.2f;
+					*/
 				}
 				else if (buffType[j] == 41) {
 					buffTime[j] = 18000;
@@ -7656,14 +_,15 @@
 					wellFed = true;
 					statDefense += 2;
 					meleeCrit += 2;
-					meleeDamage += 0.05f;
+					allDamage += 0.05f;
+					//meleeDamage += 0.05f;
 					meleeSpeed += 0.05f;
 					magicCrit += 2;
-					magicDamage += 0.05f;
+					//magicDamage += 0.05f;
 					rangedCrit += 2;
-					rangedDamage += 0.05f;
+					//rangedDamage += 0.05f;
-					minionDamage += 0.05f;
+					//thrownDamage += 0.05f;
-					minionKB += 0.5f;
+					//minionDamage += 0.05f;
 					moveSpeed += 0.2f;
 					pickSpeed -= 0.05f;
 				}
@@ -7721,6 +_,8 @@
 				else if (buffType[j] == 79) {
 					meleeEnchant = 8;
 				}
+				if (k == originalIndex)
+					BuffLoader.Update(buffType[k], this, ref k);
 			}
 
 			if (whoAmI == Main.myPlayer && luckPotion != oldLuckPotion) {
@@ -7991,12 +_,11 @@
 			}
 		}
 
-		public void UpdateEquips(int i) {
-			if (inventory[selectedItem].type == 277 && (!mount.Active || !mount.Cart))
-				trident = true;
-
-			for (int j = 0; j < 58; j++) {
-				int type = inventory[j].type;
+		//public void UpdateEquips(int i)
+		public void VanillaUpdateInventory(Item item) {
+			//for (int j = 0; j < 58; j++)
+			{
+				int type = item.type;
 				if ((type == 15 || type == 707) && accWatch < 1)
 					accWatch = 1;
 
@@ -8068,14 +_,21 @@
 
 				if (type == 4743)
 					hasFootball = true;
+
+				ItemLoader.UpdateInventory(item, this);
 			}
+		}
 
 			if (inventory[58].type == 4743)
 				hasFootball = true;
 
-			for (int k = 0; k < 10; k++) {
+		public void VanillaUpdateEquip(Item item) {
+			// for (int k = 0; k < 8 + this.extraAccessorySlots; k++)
+			// fake array and loop to keep patches small
+			var armor = new [] {item}; int k = 0;
+			{
 				if (!IsAValidEquipmentSlotForIteration(k) || (armor[k].expertOnly && !Main.expertMode))
-					continue;
+					return;
 
 				int type2 = armor[k].type;
 				if ((type2 == 15 || type2 == 707) && accWatch < 1)
@@ -8285,10 +_,13 @@
 					armorPenetration += 5;
 
 				if (armor[k].type == 2277) {
+					allDamage += 0.05f;
+					/*
 					magicDamage += 0.05f;
 					meleeDamage += 0.05f;
 					rangedDamage += 0.05f;
 					minionDamage += 0.05f;
+					*/
 					magicCrit += 5;
 					rangedCrit += 5;
 					meleeCrit += 5;
@@ -8341,10 +_,13 @@
 					meleeSpeed += 0.07f;
 
 				if (armor[k].type == 792 || armor[k].type == 793 || armor[k].type == 794) {
+					allDamage += 0.02f;
+					/*
 					meleeDamage += 0.02f;
 					rangedDamage += 0.02f;
 					magicDamage += 0.02f;
 					minionDamage += 0.02f;
+					*/
 				}
 
 				if (armor[k].type == 371) {
@@ -8400,7 +_,7 @@
 				}
 
 				if (armor[k].type >= 2367 && armor[k].type <= 2369)
-					fishingSkill += 5;
+						counterWeight = 556 + armor[l].type - 3309;
 
 				if (armor[k].type == 400) {
 					magicDamage += 0.11f;
@@ -8490,7 +_,7 @@
 					rangedCrit += 6;
 				}
 
-				if (armor[k].type == 1214)
+				if (armor[l].type == 1253 && statLife <= statLifeMax2 * 0.5)
 					moveSpeed += 0.11f;
 
 				if (armor[k].type == 1215) {
@@ -8560,17 +_,22 @@
 				}
 
 				if (armor[k].type == 552 || armor[k].type == 4901) {
+					allDamage += 0.1f;
+					/*
 					rangedDamage += 0.07f;
 					meleeDamage += 0.07f;
 					magicDamage += 0.07f;
 					minionDamage += 0.07f;
 					moveSpeed += 0.08f;
+					*/
 				}
 
 				if (armor[k].type == 4982) {
 					rangedCrit += 5;
 					meleeCrit += 5;
 					magicCrit += 5;
+					allDamage += 0.05f;
+					/*
 				}
 
 				if (armor[k].type == 4983) {
@@ -8578,6 +_,7 @@
 					meleeDamage += 0.05f;
 					magicDamage += 0.05f;
 					minionDamage += 0.05f;
+					*/
 				}
 
 				if (armor[k].type == 4984)
@@ -8653,7 +_,7 @@
 
 				if (armor[k].type == 1549) {
 					rangedCrit += 13;
-					rangedDamage += 0.13f;
+					if (hideVisual)
 					ammoCost80 = true;
 				}
 
@@ -8810,7 +_,7 @@
 
 				if (armor[k].type == 2758) {
 					ammoCost75 = true;
-					rangedCrit += 12;
+					if (hideVisual)
 					rangedDamage += 0.12f;
 				}
 
@@ -8881,31 +_,43 @@
 				}
 
 				if (armor[k].prefix == 69) {
+					allDamage += 0.01f;
+					/*
 					meleeDamage += 0.01f;
 					rangedDamage += 0.01f;
 					magicDamage += 0.01f;
 					minionDamage += 0.01f;
+					*/
 				}
 
 				if (armor[k].prefix == 70) {
+					allDamage += 0.02f;
+					/*
 					meleeDamage += 0.02f;
 					rangedDamage += 0.02f;
 					magicDamage += 0.02f;
 					minionDamage += 0.02f;
+					*/
 				}
 
 				if (armor[k].prefix == 71) {
+					allDamage += 0.03f;
+					/*
 					meleeDamage += 0.03f;
 					rangedDamage += 0.03f;
 					magicDamage += 0.03f;
 					minionDamage += 0.03f;
+					*/
 				}
 
 				if (armor[k].prefix == 72) {
+					allDamage += 0.04f;
+					/*
 					meleeDamage += 0.04f;
 					rangedDamage += 0.04f;
 					magicDamage += 0.04f;
 					minionDamage += 0.04f;
+					*/
 				}
 
 				if (armor[k].prefix == 73)
@@ -8931,29 +_,35 @@
 
 				if (armor[k].prefix == 80)
 					meleeSpeed += 0.04f;
+
+				ItemLoader.UpdateEquip(armor[k], this);
 			}
+		}
 
-			equippedAnyWallSpeedAcc = false;
-			equippedAnyTileSpeedAcc = false;
-			equippedAnyTileRangeAcc = false;
-			for (int l = 3; l < 10; l++) {
+		public void VanillaUpdateAccessory(int i, Item item, bool hideVisual, ref bool flag, ref bool flag2, ref bool flag3) {
+			// for (int l = 3; l < 8 + this.extraAccessorySlots; l++)
+			// fake array and loop to keep patches small
+			var armor = new[] { item }; int l = 0;
+			{
 				if (IsAValidEquipmentSlotForIteration(l))
-					ApplyEquipFunctional(l, armor[l]);
 			}
+					return;
 
 			if (skyStoneEffects) {
 				lifeRegen += 2;
 				statDefense += 4;
 				meleeSpeed += 0.1f;
-				meleeDamage += 0.1f;
+					allDamage += 0.1f;
+					//meleeDamage += 0.1f;
 				meleeCrit += 2;
-				rangedDamage += 0.1f;
+					//rangedDamage += 0.1f;
 				rangedCrit += 2;
-				magicDamage += 0.1f;
+					//magicDamage += 0.1f;
 				magicCrit += 2;
 				pickSpeed -= 0.15f;
-				minionDamage += 0.1f;
+					//minionDamage += 0.1f;
 				minionKB += 0.5f;
+					//thrownDamage += 0.1f;
 			}
 
 			if (dd2Accessory) {
@@ -9653,7 +_,7 @@
 			if (currentItem.type == 861) {
 				accMerman = true;
 				wolfAcc = true;
-				if (hideVisibleAccessory[itemSlot]) {
+					if (hideVisual) {
 					hideMerman = true;
 					hideWolf = true;
 				}
@@ -9850,7 +_,7 @@
 			if (currentItem.type == 3110) {
 				accMerman = true;
 				wolfAcc = true;
-				if (hideVisibleAccessory[itemSlot]) {
+						if (hideVisual) {
 					hideMerman = true;
 					hideWolf = true;
 				}
@@ -9880,12 +_,8 @@
 			if (currentItem.type == 2998)
 				minionDamage += 0.15f;
 
-			if (currentItem.type == 935) {
-				magicDamage += 0.12f;
-				meleeDamage += 0.12f;
-				rangedDamage += 0.12f;
-				minionDamage += 0.12f;
-			}
+				if (armor[l].type == 935)
+						allDamage += 0.12f;
 
 			if (currentItem.wingSlot != -1)
 				wingTimeMax = GetWingStats(currentItem.wingSlot).FlyTime;
@@ -10381,10 +_,13 @@
 
 			if (head == 112 && body == 75 && legs == 64) {
 				setBonus = Language.GetTextValue("ArmorSetBonus.Pumpkin");
+				allDamage += 0.1f;
+				/*
 				meleeDamage += 0.1f;
 				magicDamage += 0.1f;
 				rangedDamage += 0.1f;
 				minionDamage += 0.1f;
+				*/
 			}
 
 			if (head == 22 && body == 14 && legs == 14) {
@@ -10437,7 +_,7 @@
 					beetleCounter += 200f;
 
 				if (num != beetleOrbs && beetleOrbs > 0) {
-					for (int j = 0; j < 22; j++) {
+					for (int j = 0; j < MaxBuffs; j++) {
 						if (buffType[j] >= 98 && buffType[j] <= 100 && buffType[j] != 97 + num)
 							DelBuff(j);
 					}
@@ -10450,7 +_,7 @@
 				int num5 = 180;
 				if (beetleCounter >= (float)num5) {
 					if (beetleOrbs > 0 && beetleOrbs < 3) {
-						for (int k = 0; k < 22; k++) {
+						for (int k = 0; k < MaxBuffs; k++) {
 							if (buffType[k] >= 95 && buffType[k] <= 96)
 								DelBuff(k);
 						}
@@ -10587,7 +_,7 @@
 				AddBuff(60, 18000);
 			}
 			else if (crystalLeaf) {
-				for (int n = 0; n < 22; n++) {
+				for (int n = 0; n < MaxBuffs; n++) {
 					if (buffType[n] == 60)
 						DelBuff(n);
 				}
@@ -10733,7 +_,7 @@
 				int num9 = 180;
 				if (solarCounter >= num9) {
 					if (solarShields > 0 && solarShields < 3) {
-						for (int num10 = 0; num10 < 22; num10++) {
+						for (int num10 = 0; num10 < MaxBuffs; num10++) {
 							if (buffType[num10] >= 170 && buffType[num10] <= 171)
 								DelBuff(num10);
 						}
@@ -10876,6 +_,8 @@
 			}
 
 			ApplyArmorSoundAndDustChanges();
+
+			ItemLoader.UpdateArmorSet(this, armor[0], armor[1], armor[2]);
 		}
 
 		public void UpdateSocialShadow() {
@@ -11120,6 +_,8 @@
 			bool flag6 = ZoneRain && ZoneSnow;
 			bool flag7 = point.Y > Main.maxTilesY - 320;
 			bool flag8 = ZoneOverworldHeight && (point.X < 380 || point.X > Main.maxTilesX - 380);
+			// TODO, are these flags a problem?
+			PlayerHooks.UpdateBiomes(this);
 			ManageSpecialBiomeVisuals("Stardust", ZoneTowerStardust, value4 - new Vector2(0f, 10f));
 			ManageSpecialBiomeVisuals("Nebula", ZoneTowerNebula, value3 - new Vector2(0f, 10f));
 			ManageSpecialBiomeVisuals("Vortex", ZoneTowerVortex, value2 - new Vector2(0f, 10f));
@@ -11258,6 +_,7 @@
 				}
 			}
 
+			PlayerHooks.UpdateBiomeVisuals(this);
 			if (!dead) {
 				Point point2 = base.Center.ToTileCoordinates();
 				if (WorldGen.InWorld(point2.X, point2.Y, 1)) {
@@ -11470,8 +_,9 @@
 			hasFloatingTube = false;
 			hasUnicornHorn = false;
 			leinforsHair = false;
+			PlayerHooks.UpdateDead(this);
 			gravDir = 1f;
-			for (int i = 0; i < 22; i++) {
+			for (int i = 0; i < MaxBuffs; i++) {
 				if (buffType[i] <= 0 || !Main.persistentBuff[buffType[i]]) {
 					buffTime[i] = 0;
 					buffType[i] = 0;
@@ -12594,6 +_,7 @@
 				lifeRegen -= 100;
 			}
 
+			PlayerHooks.UpdateBadLifeRegen(this);
 			if (honey && lifeRegen < 0) {
 				lifeRegen += 4;
 				if (lifeRegen > 0)
@@ -12638,6 +_,7 @@
 			if (whoAmI == Main.myPlayer && Main.SceneMetrics.HasHeartLantern)
 				lifeRegen += 2;
 
+			PlayerHooks.UpdateLifeRegen(this);
 			if (bleed)
 				lifeRegenTime = 0;
 
@@ -12702,6 +_,7 @@
 			if (rabid)
 				num2 = ((!shinyStone) ? (num2 / 2f) : (num2 * 0.75f));
 
+			PlayerHooks.NaturalLifeRegen(this, ref num2);
 			float num4 = (float)statLifeMax2 / 400f * 0.85f + 0.15f;
 			num2 *= num4;
 			lifeRegen += (int)Math.Round(num2);
@@ -12867,8 +_,8 @@
 
 		public void UpdateJumpHeight() {
 			if (mount.Active) {
-				jumpHeight = mount.JumpHeight(velocity.X);
+				jumpHeight = mount.JumpHeight(this, velocity.X);
-				jumpSpeed = mount.JumpSpeed(velocity.X);
+				jumpSpeed = mount.JumpSpeed(this, velocity.X);
 			}
 			else {
 				if (jumpBoost) {
@@ -14596,8 +_,10 @@
 				float num5 = 0.1f;
 				if (wingsLogic == 26) {
 					num2 = 0.75f;
+				//patch file: num2, num5
 					num5 = 0.15f;
 					num4 = 1f;
+				//patch file: num, num3, num4
 					num3 = 2.5f;
 					num = 0.125f;
 				}
@@ -14694,6 +_,7 @@
 						num = 0.15f;
 				}
 
+			ItemLoader.VerticalWingSpeeds(this, ref num2, ref num5, ref num4, ref num3, ref num);
 				velocity.Y -= num * gravDir;
 				if (gravDir == 1f) {
 					if (velocity.Y > 0f)
@@ -15135,6 +_,7 @@
 			if (Main.projectile[grappling[0]].type >= 646 && Main.projectile[grappling[0]].type <= 649)
 				num9 = 16f;
 
+			ProjectileLoader.GrapplePullSpeed(Main.projectile[grappling[0]], this, ref num9);
 			float num10 = num8;
 			num10 = ((!(num8 > num9)) ? 1f : (num9 / num8));
 			preferedPlayerVelocityX *= num10;
@@ -15368,6 +_,8 @@
 				}
 			}
 
+			TileLoader.DisableSmartCursor(Main.tile[num, num2], ref flag);
+
 			int num2 = 17;
 			int num3 = (int)(base.Center.X / 16f);
 			int num4 = (int)(base.Center.Y / 16f);
@@ -15767,6 +_,7 @@
 			slippy2 = (num3 == 197);
 			powerrun = (num3 == 198);
 			runningOnSand = (TileID.Sets.Conversion.Sand[num3] || TileID.Sets.Conversion.Sandstone[num3] || TileID.Sets.Conversion.HardenedSand[num3]);
+			TileLoader.FloorVisuals(num3, this);
 			if (Main.tile[num - 1, num2].slope() != 0 || Main.tile[num, num2].slope() != 0 || Main.tile[num + 1, num2].slope() != 0)
 				num3 = -1;
 
@@ -15804,7 +_,7 @@
 		}
 
 		private void MakeFloorDust(bool Falling, int type) {
-			if (type != 147 && type != 25 && type != 53 && type != 189 && type != 0 && type != 123 && type != 57 && type != 112 && type != 116 && type != 196 && type != 193 && type != 195 && type != 197 && type != 199 && type != 229 && type != 371 && type != 460)
+			if (type != 147 && type != 25 && type != 53 && type != 189 && type != 0 && type != 123 && type != 57 && type != 112 && type != 116 && type != 196 && type != 193 && type != 195 && type != 197 && type != 199 && type != 229 && type != 371 && !TileLoader.HasWalkDust(type))
 				return;
 
 			int num = 1;
@@ -15814,6 +_,7 @@
 			for (int i = 0; i < num; i++) {
 				bool flag = true;
 				int num2 = 76;
+				//patch file: type, num2, flag
 				if (type == 53)
 					num2 = 32;
 
@@ -15884,6 +_,7 @@
 				if (type == 197)
 					newColor = new Color(97, 200, 255, 100);
 
+				TileLoader.WalkDust(type, ref num2, ref flag, ref newColor);
 				if (!Falling) {
 					float num3 = Math.Abs(velocity.X) / 3f;
 					if ((float)Main.rand.Next(100) > num3 * 100f)
@@ -16268,6 +_,7 @@
 				return;
 
 			UpdateMiscCounter();
+			PlayerHooks.PreUpdate(this);
 			infernoCounter++;
 			if (infernoCounter >= 180)
 				infernoCounter = 0;
@@ -16613,6 +_,7 @@
 						}
 					}
 
+					PlayerHooks.SetControls(this);
 					if (controlInv) {
 						if (releaseInventory)
 							ToggleInv();
@@ -16798,7 +_,7 @@
 							}
 						}
 					}
-					else {
+					else if (!isCustomWings) {
 						bool flag10 = false;
 						if (!Main.drawingPlayerChat && selectedItem != 58 && !Main.editSign && !Main.editChest) {
 							int num15 = -1;
@@ -16984,12 +_,6 @@
 						}
 					}
 
-					bool flag12 = false;
-					for (int num23 = 3; num23 < 10; num23++) {
-						if (armor[num23].stack > 0 && armor[num23].wingSlot > -1)
-							flag12 = true;
-					}
-
 					if (stoned) {
 						int num24 = (int)(((float)num18 * gravDir - 2f) * 20f);
 						if (num24 > 0) {
@@ -16997,7 +_,7 @@
 							immune = false;
 						}
 					}
-					else if (((gravDir == 1f && num18 > num17) || (gravDir == -1f && num18 < -num17)) && !noFallDmg && !flag12) {
+					else if (((gravDir == 1f && num22 > num21) || (gravDir == -1f && num22 < -num21)) && !noFallDmg && wingsLogic == 0) {
 						immune = false;
 						int num25 = (int)((float)num18 * gravDir - (float)num17) * 10;
 						if (mount.Active)
@@ -17140,12 +_,14 @@
 					AddBuff(194, 2, quiet: false);
 			}
 
+			PlayerHooks.PreUpdateBuffs(this);
-			for (int num26 = 0; num26 < 323; num26++) {
+			for (int num25 = 0; num25 < BuffLoader.BuffCount; num25++) {
 				buffImmune[num26] = false;
 			}
 
 			UpdateProjectileCaches(i);
 			UpdateBuffs(i);
+			PlayerHooks.PostUpdateBuffs(this);
 			if (whoAmI == Main.myPlayer) {
 				if (!onFire && !poisoned)
 					trapDebuffSource = false;
@@ -17189,7 +_,7 @@
 			hideWolf = false;
 			forceWerewolf = false;
 			if (whoAmI == Main.myPlayer) {
-				for (int num27 = 0; num27 < 22; num27++) {
+				for (int num26 = 0; num26 < MaxBuffs; num26++) {
 					if (buffType[num27] > 0 && buffTime[num27] <= 0)
 						DelBuff(num27);
 				}
@@ -17242,6 +_,7 @@
 
 			UpdateArmorLights();
 			UpdateArmorSets(i);
+			PlayerHooks.PostUpdateEquips(this); // TODO, move down?
 			if (maxTurretsOld != maxTurrets) {
 				UpdateMaxTurrets();
 				maxTurretsOld = maxTurrets;
@@ -17357,6 +_,8 @@
 
 					if (stealth == 1f && num31 != stealth && Main.netMode == 1)
 						NetMessage.SendData(84, -1, -1, null, whoAmI);
+
+					ItemLoader.HorizontalWingSpeeds(this);
 				}
 
 				if (flag14) {
@@ -17386,7 +_,7 @@
 			}
 
 			if (manaSick)
-				magicDamage *= 1f - manaSickReduction;
+				magicDamageMult *= 1f - manaSickReduction;
 
 			float num32 = meleeSpeed - 1f;
 			num32 *= ItemID.Sets.BonusMeleeSpeedMultiplier[inventory[selectedItem].type];
@@ -17441,6 +_,7 @@
 			}
 
 			meleeSpeed = 1f / meleeSpeed;
+			PlayerHooks.PostUpdateMiscEffects(this);
 			UpdateLifeRegen();
 			soulDrain = 0;
 			UpdateManaRegen();
@@ -17453,7 +_,7 @@
 			runAcceleration *= moveSpeed;
 			maxRunSpeed *= moveSpeed;
 			UpdateJumpHeight();
-			for (int num33 = 0; num33 < 22; num33++) {
+			for (int num31 = 0; num31 < MaxBuffs; num31++) {
 				if (buffType[num33] > 0 && buffTime[num33] > 0 && buffImmune[buffType[num33]])
 					DelBuff(num33);
 			}
@@ -17464,12 +_,8 @@
 			if (witheredArmor)
 				statDefense /= 2;
 
-			if (witheredWeapon) {
+			if (witheredWeapon)
-				meleeDamage *= 0.5f;
+				allDamageMult *= 0.5f;
-				rangedDamage *= 0.5f;
-				magicDamage *= 0.5f;
-				minionDamage *= 0.5f;
-			}
 
 			lastTileRangeX = tileRangeX;
 			lastTileRangeY = tileRangeY;
@@ -17967,6 +_,7 @@
 						mount.UpdateDrill(this, controlUp, controlDown);
 				}
 
+				PlayerHooks.PostUpdateRunSpeeds(this);
 				HorizontalMovement();
 				if (gravControl) {
 					if (controlUp && releaseUp) {
@@ -18069,7 +_,7 @@
 						rocketTime = 0;
 					}
 
-					if (flag20 && wings != 4 && wings != 22 && wings != 0 && wings != 24 && wings != 28 && wings != 30 && wings != 33 && wings != 45) {
+					if (flag19 && wings != 4 && wings != 22 && wings != 0 && wings != 24 && wings != 28 && wings != 30 && wings != 33 && !isCustomWings) {
 						bool flag21 = wingFrame == 3;
 						if (wings == 43 || wings == 44)
 							flag21 = (wingFrame == 4);
@@ -18312,7 +_,7 @@
 											wingFrame = 0;
 									}
 								}
-								else if (wings != 22 && wings != 28) {
+								else if (wings != 22 && wings != 28 && !isCustomWings) {
 									if (wings == 30) {
 										wingFrameCounter++;
 										int num62 = 5;
@@ -18519,7 +_,7 @@
 				}
 
 				if (flag22 && Main.myPlayer == whoAmI) {
-					for (int num79 = 0; num79 < 22; num79++) {
+					for (int num132 = 0; num132 < MaxBuffs; num132++) {
 						if (buffType[num79] == 38)
 							DelBuff(num79);
 					}
@@ -18730,7 +_,7 @@
 
 			if (num83) {
 				if (onFire && !lavaWet) {
-					for (int num84 = 0; num84 < 22; num84++) {
+					for (int num138 = 0; num138 < MaxBuffs; num138++) {
 						if (buffType[num84] == 24)
 							DelBuff(num84);
 					}
@@ -18976,6 +_,7 @@
 			if (vortexDebuff)
 				base.velocity.Y = base.velocity.Y * 0.8f + (float)Math.Cos(base.Center.X % 120f / 120f * ((float)Math.PI * 2f)) * 5f * 0.2f;
 
+			PlayerHooks.PreUpdateMovement(this);
 			if (tongued) {
 				base.position += base.velocity;
 				flag28 = false;
@@ -19066,6 +_,7 @@
 			grapCount = 0;
 			UpdateReleaseUseTile();
 			UpdateAdvancedShadows();
+			PlayerHooks.PostUpdate(this);
 		}
 
 		private void UpdateControlHolds() {
@@ -20511,6 +_,9 @@
 						break;
 				}
 
+				if (!NPCLoader.CanHitPlayer(Main.npc[i], this, ref specialHitSetter) || !PlayerHooks.CanBeHitByNPC(this, Main.npc[i], ref specialHitSetter))
+					continue;
+
 				if ((specialHitSetter == -1 && immune) || (dash == 2 && i == eocHit && eocDash > 0) || npcTypeNoAggro[Main.npc[i].type])
 					continue;
 
@@ -20546,6 +_,9 @@
 					if (num5 > 0 && HasNPCBannerBuff(num5))
 						num4 = ((!Main.expertMode) ? ((int)((float)num4 * ItemID.Sets.BannerStrength[Item.BannerToItem(num5)].NormalDamageReceived)) : ((int)((float)num4 * ItemID.Sets.BannerStrength[Item.BannerToItem(num5)].ExpertDamageReceived)));
 
+				bool crit = false;
+				NPCLoader.ModifyHitPlayer(Main.npc[i], this, ref num4, ref crit);
+				PlayerHooks.ModifyHitByNPC(this, Main.npc[i], ref num4, ref crit);
 					if (whoAmI == Main.myPlayer && num2 > 0f && !immune && !Main.npc[i].dontTakeDamage) {
 						int num6 = (int)((float)num4 * num2);
 						if (num6 > 1000)
@@ -20560,8 +_,12 @@
 					if (!immune && !flag2)
 						StatusFromNPC(Main.npc[i]);
 
-					if (flag)
-						Hurt(PlayerDeathReason.ByNPC(i), num4, num3, pvp: false, quiet: false, Crit: false, specialHitSetter);
+				if (flag) {
+					int realDamage = (int)Hurt(PlayerDeathReason.ByNPC(i), num4, num3, false, false, false, specialHitSetter);
+					//TODO, what is this flag?, have these parameters changed? (int)this.Hurt(num146, num145, false, false, Lang.deathMsg(-1, num140, -1, -1, 0, 0), crit, num141);
+					NPCLoader.OnHitPlayer(Main.npc[i], this, realDamage, crit);
+					PlayerHooks.OnHitByNPC(this, Main.npc[i], realDamage, crit);
+				}
 
 					if (num) {
 						GiveImmuneTimeForCollisionAttack(longInvince ? 60 : 30);
@@ -20636,6 +_,8 @@
 		}
 
 		public void ItemCheck_ManageRightClickFeatures() {
+			//ItemLoader.AltFunctionUse(this.inventory[this.selectedItem], this)
+			// TODO, reintegrate AltFunctionUse
 			bool flag = selectedItem != 58 && controlUseTile && !tileInteractionHappened && releaseUseItem && !controlUseItem && !mouseInterface && !CaptureManager.Instance.Active && !Main.HoveringOverAnNPC && !Main.SmartInteractShowingGenuine;
 			bool flag2 = flag;
 			if (inventory[selectedItem].type != 3384 && !Main.mouseRightRelease)
@@ -20667,7 +_,7 @@
 				controlUseItem = true;
 			}
 
-			if (flag2 && altFunctionUse == 0 && inventory[selectedItem].type == 3852 && itemAnimation == 0 && CheckMana(20, pay: true)) {
+			if (flag && altFunctionUse == 0 && inventory[selectedItem].type == 3852 && itemAnimation == 0 && CheckMana(inventory[selectedItem], 20, true, false)) {
 				altFunctionUse = 1;
 				controlUseItem = true;
 			}
@@ -20682,6 +_,11 @@
 				controlUseItem = true;
 			}
 
+			if (flag && altFunctionUse == 0 && ItemLoader.AltFunctionUse(inventory[selectedItem], this)) {
+				altFunctionUse = 1;
+				controlUseItem = true;
+			}
+
 			if (!controlUseItem && altFunctionUse == 1)
 				altFunctionUse = 0;
 
@@ -20877,6 +_,9 @@
 		}
 
 		private static int ClampHotbarOffset(int Offset) {
+			//disable hotbar scrolling when using auto select
+			//previously it only worked when scrolling between 0 and 9, and made the sound
+			if (selectedItem >= 10) return;
 			while (Offset > 9) {
 				Offset -= 10;
 			}
@@ -21007,6 +_,9 @@
 			if (Main.tile[myX, myY] == null)
 				Main.tile[myX, myY] = new Tile();
 
+			if (!Main.tile[myX, myY].active())
+				return;
+
 			if (Main.tile[myX, myY].active()) {
 				TileInteractionsMouseOver(myX, myY);
 				TileInteractionsUse(myX, myY);
@@ -21074,6 +_,8 @@
 					cursorItemIconID = -1;
 				}
 			}
+
+			TileLoader.MouseOverFar(myX, myY);
 		}
 
 		private void TileInteractionsUse(int myX, int myY) {
@@ -21089,7 +_,8 @@
 				bool flag3 = false;
 				for (int i = 0; i < 58; i++) {
 					if (inventory[i].type == 949 && inventory[i].stack > 0) {
+						if (ItemLoader.ConsumeItem(inventory[i], this))
-						inventory[i].stack--;
+							inventory[i].stack--;
 						if (inventory[i].stack <= 0)
 							inventory[i].SetDefaults();
 
@@ -21164,7 +_,7 @@
 					Wiring.HitSwitch(myX, myY);
 					NetMessage.SendData(59, -1, -1, null, myX, myY);
 				}
-				else if (Main.tile[myX, myY].type == 139) {
+				else if (Main.tile[myX, myY].type == 139 || TileLoader.IsModMusicBox(Main.tile[myX, myY])) {
 					flag2 = true;
 					SoundEngine.PlaySound(28, myX * 16, myY * 16, 0);
 					WorldGen.SwitchMB(myX, myY);
@@ -21591,7 +_,8 @@
 					if (!NPC.AnyNPCs(245) && Main.hardMode && NPC.downedPlantBoss) {
 						for (int n = 0; n < 58; n++) {
 							if (inventory[n].type == 1293) {
+								if (ItemLoader.ConsumeItem(inventory[m], this))
-								inventory[n].stack--;
+									inventory[m].stack--;
 								if (inventory[n].stack <= 0)
 									inventory[n].SetDefaults();
 
@@ -21601,7 +_,7 @@
 						}
 					}
 
-					if (flag8) {
+						itemTime = PlayerHooks.TotalUseTime(item.useTime, this, item);
 						SoundEngine.PlaySound(15, (int)position.X, (int)position.Y, 0);
 						if (Main.netMode != 1)
 							NPC.SpawnOnPlayer(whoAmI, 245);
@@ -21609,19 +_,22 @@
 							NetMessage.SendData(61, -1, -1, null, whoAmI, 245f);
 					}
 				}
-				else if (Main.tile[myX, myY].type == 10) {
+				else if (Main.tile[myX, myY].type == TileID.ClosedDoor || TileLoader.OpenDoorID(Main.tile[myX, myY]) >= 0) {
 					flag2 = true;
 					if (WorldGen.IsLockedDoor(myX, myY)) {
 						int num43 = 1141;
 						for (int num44 = 0; num44 < 58; num44++) {
 							if (inventory[num44].type == num43 && inventory[num44].stack > 0) {
+								if (ItemLoader.ConsumeItem(inventory[n], this))
-								inventory[num44].stack--;
+									inventory[n].stack--;
 								if (inventory[num44].stack <= 0)
 									inventory[num44] = new Item();
 
 								WorldGen.UnlockDoor(myX, myY);
 								if (Main.netMode == 1)
 									NetMessage.SendData(52, -1, -1, null, whoAmI, 2f, myX, myY);
+
+								break;
 							}
 						}
 					}
@@ -21637,7 +_,7 @@
 						}
 					}
 				}
-				else if (Main.tile[myX, myY].type == 11) {
+				else if (TileLoader.CloseDoorID(Main.tile[myX, myY]) >= 0) {
 					flag2 = true;
 					if (WorldGen.CloseDoor(myX, myY))
 						NetMessage.SendData(19, -1, -1, null, 1, myX, myY, direction);
@@ -21809,7 +_,7 @@
 					if (flag11)
 						NetMessage.SendTileSquare(-1, num62, num63, 3);
 				}
-				else if (TileID.Sets.BasicChest[Main.tile[myX, myY].type] || Main.tile[myX, myY].type == 29 || Main.tile[myX, myY].type == 97 || Main.tile[myX, myY].type == 463 || Main.tile[myX, myY].type == 491) {
+				else if ((TileID.Sets.BasicChest[Main.tile[myX, myY].type] || Main.tile[myX, myY].type == 29 || Main.tile[myX, myY].type == 97 || Main.tile[myX, myY].type == 463) && talkNPC == -1 && Main.tile[myX, myY].type < TileID.Count) {
 					flag2 = true;
 					Main.mouseRightRelease = false;
 					int num68 = 0;
@@ -21914,7 +_,9 @@
 												continue;
 
 											if (num72 != 329) {
+												if (ItemLoader.ConsumeItem(inventory[num66], this))
-												inventory[num76].stack--;
+													inventory[num66].stack--;
+
 												if (inventory[num76].stack <= 0)
 													inventory[num76] = new Item();
 											}
@@ -21971,10 +_,16 @@
 					if (flag14)
 						LaunchMinecartHook(myX, myY);
 				}
+
+				if (TileLoader.RightClick(myX, myY))
+					flag2 = true;
+				// todo check out this flag2. return? "this.releaseUseTile = false;"
 			}
 
 			if (flag2)
 				tileInteractionHappened = true;
+
+			PlayerHooks.PostItemCheck(this);
 		}
 
 		private static bool IsHoveringOverABottomSideOfABed(int myX, int myY) {
@@ -22909,7 +_,7 @@
 				cursorItemIconID = 3747;
 			}
 
-			if (Main.tile[myX, myY].type == 219 && (inventory[selectedItem].type == 424 || inventory[selectedItem].type == 1103)) {
+			if (Main.tile[myX, myY].type == 219 && ItemID.Sets.ExtractinatorMode[inventory[selectedItem].type] > -1) {
 				noThrow = 2;
 				cursorItemIconEnabled = true;
 				cursorItemIconID = inventory[selectedItem].type;
@@ -23740,6 +_,7 @@
 			if (Main.netMode == 1)
 				NetMessage.SendData(21, -1, -1, null, worldItemArrayIndex);
 
+			PlayerHooks.GetFishingLevel(this, inventory[bestFishingPoleIndex], baitItem, ref num2);
 			return itemToPickUp;
 		}
 
@@ -23959,6 +_,35 @@
 			}
 		}
 
+		public bool CanBuyItem(int price, int customCurrency = -1) {
+			if (customCurrency != -1)
+				return CustomCurrencyManager.BuyItem(this, price, customCurrency);
+
+			bool flag;
+			long num = Utils.CoinsCount(out flag, inventory, new int[] {
+				58,
+				57,
+				56,
+				55,
+				54
+			});
+
+			long num2 = Utils.CoinsCount(out flag, bank.item, new int[0]);
+			long num3 = Utils.CoinsCount(out flag, bank2.item, new int[0]);
+			long num4 = Utils.CoinsCount(out flag, bank3.item, new int[0]);
+			long num5 = Utils.CoinsCombineStacks(out flag, new long[] {
+				num,
+				num2,
+				num3,
+				num4
+			});
+
+			if (num5 < price)
+				return false;
+
+			return true;
+		}
+
 		public bool BuyItem(int price, int customCurrency = -1) {
 			if (customCurrency != -1)
 				return CustomCurrencyManager.BuyItem(this, price, customCurrency);
@@ -24176,7 +_,7 @@
 		public void AdjTiles() {
 			int num = 4;
 			int num2 = 3;
-			for (int i = 0; i < 623; i++) {
+			for (int i = 0; i < adjTile.Length; i++) {
 				oldAdjTile[i] = adjTile[i];
 				adjTile[i] = false;
 			}
@@ -24217,6 +_,8 @@
 								alchemyTable = true;
 								break;
 						}
+
+						TileLoader.AdjTiles(this, Main.tile[j, k].type);
 					}
 
 					if (Main.tile[j, k].liquid > 200 && Main.tile[j, k].liquidType() == 0)
@@ -24234,7 +_,7 @@
 				return;
 
 			bool flag = false;
-			for (int l = 0; l < 623; l++) {
+			for (int l = 0; l < adjTile.Length; l++) {
 				if (oldAdjTile[l] != adjTile[l]) {
 					flag = true;
 					break;
@@ -24389,6 +_,9 @@
 			}
 
 			socialShadowRocketBoots = false;
+			if (dead)
+				PlayerHooks.OnRespawn(this);
+
 			socialIgnoreLight = false;
 			socialGhost = false;
 			armorEffectDrawShadow = false;
@@ -24424,6 +_,7 @@
 				hermesStepSound.IntendedCooldown = 6;
 			}
 
+			ItemLoader.PreUpdateVanitySet(this);
 			if (wings > 0 && wings != 33) {
 				back = -1;
 				front = -1;
@@ -24436,6 +_,8 @@
 				return;
 
 			if (!isDisplayDollOrInanimate) {
+			PlayerHooks.FrameEffects(this);
+			ItemLoader.UpdateVanity(this);
 				if (((body == 68 && legs == 57 && head == 106) || (body == 74 && legs == 63 && head == 106)) && Main.rand.Next(10) == 0) {
 					int num2 = Dust.NewDust(new Vector2(position.X - velocity.X * 2f, position.Y - 2f - velocity.Y * 2f), width, height, 43, 0f, 0f, 100, new Color(255, 0, 255), 0.3f);
 					Main.dust[num2].fadeIn = 0.8f;
@@ -24663,6 +_,7 @@
 				}
 			}
 
+			ItemLoader.UpdateVanitySet(this);
 			if (carpetFrame >= 0) {
 				legFrameCounter = 0.0;
 				ref Rectangle reference4 = ref legFrame;
@@ -24773,6 +_,7 @@
 							if (gravDir == -1f)
 								bodyFrame.Y = bodyFrame.Height * 2;
 						}
+							//patch file
 					}
 				}
 			}
@@ -24801,6 +_,8 @@
 				_ = bodyFrame;
 				reference7.Y = 0;
 			}
+			else if (ItemLoader.HoldItemFrame(inventory[selectedItem], this)) {
+			}
 			else if (shieldRaised) {
 				bodyFrame.Y = bodyFrame.Height * 10;
 			}
@@ -25193,6 +_,8 @@
 			if (drawPlayer.body == 36 && drawPlayer.head == 56)
 				armorEffectDrawOutlines = true;
 
+			ItemLoader.ArmorSetShadows(drawPlayer);
+			// TODO, rename to this? SetArmorEffectVisuals
 			if (drawPlayer.stoned || drawPlayer.stealth != 1f) {
 				armorEffectDrawOutlines = false;
 				armorEffectDrawShadow = false;
@@ -25365,6 +_,7 @@
 				}
 			}
 
+			ItemLoader.SetMatch(armorslot, type, male, ref num, ref somethingSpecial);
 			return num;
 		}
 
@@ -25532,6 +_,7 @@
 					}
 				}
 
+				ItemLoader.UseItemHitbox(item, this, ref r2, ref flag21);
 				immune = true;
 				dead = false;
 				immuneTime = 0;
@@ -25728,7 +_,7 @@
 			if (whoAmI != Main.myPlayer)
 				return;
 
-			for (int i = 0; i < 22; i++) {
+			for (int j = 0; j < MaxBuffs; j++) {
 				if (buffTime[i] > 0 && buffType[i] == 59)
 					DelBuff(i);
 			}
@@ -25852,6 +_,13 @@
 					return 0.0;
 				}
 
+				bool customDamage = false;
+				bool playSound = true;
+				bool genGore = true;
+				if (!PlayerHooks.PreHurt(this, pvp, quiet, ref Damage, ref hitDirection, ref Crit, ref customDamage,
+					ref playSound, ref genGore, ref damageSource))
+					return 0.0;
+
 				if (whoAmI == Main.myPlayer && panic)
 					AddBuff(63, 300);
 
@@ -25863,7 +_,7 @@
 					NetMessage.SendData(84, -1, -1, null, whoAmI);
 
 				int num = Damage;
-				double num2 = Main.CalculateDamagePlayersTake(num, statDefense);
+				double num2 = customDamage ? num : Main.CalculatePlayerDamage(num, statDefense);
 				if (Crit)
 					num *= 2;
 
@@ -25871,7 +_,7 @@
 					if (whoAmI == Main.myPlayer) {
 						Main.NotifyOfEvent(GameNotificationType.Damage);
 						if (hasFootball) {
-							for (int i = 0; i < 59; i++) {
+						for (int i = 0; i < MaxBuffs; i++) {
 								if (inventory[i].stack > 0 && inventory[i].type == 4743) {
 									Projectile.NewProjectile(base.Center, new Vector2(-hitDirection * 4, -6f), 861, 0, 0f, whoAmI, 0f, 1f);
 									inventory[i].SetDefaults();
@@ -25917,7 +_,7 @@
 						float num5 = 0.15f * (float)beetleOrbs;
 						num2 = (int)((double)(1f - num5) * num2);
 						beetleOrbs--;
-						for (int l = 0; l < 22; l++) {
+						for (int j = 0; j < MaxBuffs; j++) {
 							if (buffType[l] >= 95 && buffType[l] <= 97)
 								DelBuff(l);
 						}
@@ -26009,6 +_,7 @@
 						Projectile.NewProjectile(base.Center.X + (float)Main.rand.Next(-40, 40), base.Center.Y - (float)Main.rand.Next(20, 60), velocity.X * 0.3f, velocity.Y * 0.3f, 565, 0, 0f, whoAmI);
 					}
 
+					PlayerHooks.Hurt(this, pvp, quiet, num2, hitDirection, Crit);
 					if (Main.netMode == 1 && whoAmI == Main.myPlayer && !quiet) {
 						if (!noKnockback && hitDirection != 0 && (!mount.Active || !mount.Cart))
 							NetMessage.SendData(13, -1, -1, null, whoAmI);
@@ -26116,6 +_,9 @@
 						fallStart = (int)(position.Y / 16f);
 					}
 
+					if (!playSound)
+						goto postSound; //gotos are ugly but minimize the diff file
+
 					if (stoned)
 						SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
 					else if ((wereWolf || forceWerewolf) && !hideWolf)
@@ -26130,7 +_,11 @@
 						SoundEngine.PlaySound(1, (int)position.X, (int)position.Y);
 
 					eyeHelper.BlinkBecausePlayerGotHurt();
+					postSound:
 					if (statLife > 0) {
+						if (!genGore)
+							goto postGore; //gotta minimize diff files
+
 						double num23 = num2 / (double)statLifeMax2 * 100.0;
 						float num24 = 2 * hitDirection;
 						float num25 = 0f;
@@ -26155,6 +_,9 @@
 								Dust.NewDust(position, width, height, 5, num24 + (float)hitDirection * num25 * Main.rand.NextFloat(), -2f);
 							}
 						}
+
+						postGore:
+						PlayerHooks.PostHurt(this, pvp, quiet, num2, hitDirection, Crit);
 					}
 					else {
 						statLife = 0;
@@ -26188,6 +_,11 @@
 				return;
 
 			StopVanityActions();
+			bool playSound = true;
+			bool genGore = true;
+			if (!PlayerHooks.PreKill(this, dmg, hitDirection, pvp, ref playSound, ref genGore, ref damageSource))
+				return;
+
 			if (pvp)
 				pvpDeath = true;
 
@@ -26240,19 +_,24 @@
 				}
 			}
 
-			SoundEngine.PlaySound(5, (int)position.X, (int)position.Y);
+			if (playSound)
+				Main.PlaySound(5, (int)position.X, (int)position.Y, 1, 1f, 0f);
+
 			headVelocity.Y = (float)Main.rand.Next(-40, -10) * 0.1f;
 			bodyVelocity.Y = (float)Main.rand.Next(-40, -10) * 0.1f;
 			legVelocity.Y = (float)Main.rand.Next(-40, -10) * 0.1f;
 			headVelocity.X = (float)Main.rand.Next(-20, 21) * 0.1f + (float)(2 * hitDirection);
 			bodyVelocity.X = (float)Main.rand.Next(-20, 21) * 0.1f + (float)(2 * hitDirection);
 			legVelocity.X = (float)Main.rand.Next(-20, 21) * 0.1f + (float)(2 * hitDirection);
-			if (stoned) {
+			if (stoned || !genGore) {
 				headPosition = Vector2.Zero;
 				bodyPosition = Vector2.Zero;
 				legPosition = Vector2.Zero;
 			}
 
+			if (!genGore)
+				goto postGore; //goto minimizes diff file size
+
 			for (int j = 0; j < 100; j++) {
 				if (stoned) {
 					Dust.NewDust(position, width, height, 1, 2 * hitDirection, -2f);
@@ -26270,6 +_,7 @@
 				}
 			}
 
+			postGore:
 			mount.Dismount(this);
 			dead = true;
 			respawnTimer = 600;
@@ -26289,6 +_,7 @@
 			if (Main.expertMode)
 				respawnTimer = (int)((double)respawnTimer * 1.5);
 
+			PlayerHooks.Kill(this, dmg, hitDirection, pvp, damageSource);
 			immuneAlpha = 0;
 			if (!ChildSafety.Disabled)
 				immuneAlpha = 255;
@@ -26426,6 +_,9 @@
 		}
 
 		public void DoCoins(int i) {
+			if (!PlayerHooks.PreItemCheck(this))
+				return;
+
 			if (inventory[i].stack != 100 || (inventory[i].type != 71 && inventory[i].type != 72 && inventory[i].type != 73))
 				return;
 
@@ -26779,7 +_,8 @@
 
 				WorldGen.PlaceWall(num, num2, createWall);
 				if (Main.tile[num, num2].wall == createWall) {
+					if (ItemLoader.ConsumeItem(inventory[selectedItem], this))
-					inventory[selectedItem].stack--;
+						inventory[selectedItem].stack--;
 					if (inventory[selectedItem].stack == 0)
 						inventory[selectedItem].SetDefaults();
 
@@ -27155,9 +_,11 @@
 					int num7 = FindItem(849);
 					if (num7 > -1 && WorldGen.PlaceActuator(num5, num6)) {
 						NetMessage.SendData(17, -1, -1, null, 8, num5, num6);
+						if (ItemLoader.ConsumeItem(inventory[num97], this))
-						inventory[num7].stack--;
+							inventory[num97].stack--;
 						if (inventory[num7].stack <= 0)
 							inventory[num7].SetDefaults();
+						itemTime = PlayerHooks.TotalUseTime(inventory[selectedItem].useTime * wallSpeed, this, inventory[selectedItem]);
 					}
 				}
 			}
@@ -27180,6 +_,8 @@
 				}
 			}
 
+			TileLoader.DisableSmartInteract(Main.tile[num, num2], ref flag);
+
 			if (flag)
 				return;
 
@@ -27520,7 +_,7 @@
 				if (Main.tile[tileTargetX, tileTargetY].nactive() && Main.tile[tileTargetX, tileTargetY].type == 59)
 					canPlace = true;
 			}
-			else if (inventory[selectedItem].createTile == 4 || inventory[selectedItem].createTile == 136) {
+						else if (TileLoader.IsTorch(inventory[selectedItem].createTile) || inventory[selectedItem].createTile == 136) {
 				if (Main.tile[tileTargetX, tileTargetY].wall > 0) {
 					canPlace = true;
 				}
@@ -27860,7 +_,7 @@
 			if (type >= 1874 && type <= 1877) {
 				type -= 1873;
 				if (WorldGen.checkXmasTreeDrop(tileTargetX, tileTargetY, 0) != type) {
-					ApplyItemTime(inventory[selectedItem]);
+						itemTime = PlayerHooks.TotalUseTime(inventory[selectedItem].useTime, this, inventory[selectedItem]);
 					WorldGen.dropXmasTree(tileTargetX, tileTargetY, 0);
 					WorldGen.setXmasTree(tileTargetX, tileTargetY, 0, type);
 					int num = tileTargetX;
@@ -27876,7 +_,7 @@
 			else if (type >= 1878 && type <= 1883) {
 				type -= 1877;
 				if (WorldGen.checkXmasTreeDrop(tileTargetX, tileTargetY, 1) != type) {
-					ApplyItemTime(inventory[selectedItem]);
+						itemTime = PlayerHooks.TotalUseTime(inventory[selectedItem].useTime, this, inventory[selectedItem]);
 					WorldGen.dropXmasTree(tileTargetX, tileTargetY, 1);
 					WorldGen.setXmasTree(tileTargetX, tileTargetY, 1, type);
 					int num3 = tileTargetX;
@@ -27892,7 +_,7 @@
 			else if (type >= 1884 && type <= 1894) {
 				type -= 1883;
 				if (WorldGen.checkXmasTreeDrop(tileTargetX, tileTargetY, 2) != type) {
-					ApplyItemTime(inventory[selectedItem]);
+						itemTime = PlayerHooks.TotalUseTime(inventory[selectedItem].useTime, this, inventory[selectedItem]);
 					WorldGen.dropXmasTree(tileTargetX, tileTargetY, 2);
 					WorldGen.setXmasTree(tileTargetX, tileTargetY, 2, type);
 					int num5 = tileTargetX;
@@ -27911,7 +_,7 @@
 
 				type -= 1894;
 				if (WorldGen.checkXmasTreeDrop(tileTargetX, tileTargetY, 3) != type) {
-					ApplyItemTime(inventory[selectedItem]);
+						itemTime = PlayerHooks.TotalUseTime(inventory[selectedItem].useTime, this, inventory[selectedItem]);
 					WorldGen.dropXmasTree(tileTargetX, tileTargetY, 3);
 					WorldGen.setXmasTree(tileTargetX, tileTargetY, 3, type);
 					int num7 = tileTargetX;
@@ -27967,7 +_,8 @@
 			if (Main.tile[num, num2].active())
 				return;
 
-			ApplyItemTime(inventory[selectedItem]);
+			WallLoader.PlaceInWorld(tileTargetX, tileTargetY, inventory[selectedItem]);
+			itemTime = PlayerHooks.TotalUseTime(inventory[selectedItem].useTime * wallSpeed, this, inventory[selectedItem]);
 			if (Main.netMode == 1)
 				NetMessage.SendData(17, -1, -1, null, 0, num, num2);
 
@@ -28091,7 +_,7 @@
 				}
 
 				num5 = y - num5;
-				ApplyItemTime(inventory[selectedItem]);
+				itemTime = PlayerHooks.TotalUseTime(inventory[selectedItem].useTime, this, inventory[selectedItem]);
 				WorldGen.ShootFromCannon(num2, num5, num4, num, inventory[selectedItem].damage, 8f, Main.myPlayer);
 			}
 		}
@@ -28101,7 +_,7 @@
 			int num2 = 25;
 			int num3 = 50;
 			int num4 = -1;
-			if (extractType == 1) {
+			if (extractType == ItemID.DesertFossil) {
 				num /= 3;
 				num2 *= 2;
 				num3 = 20;
@@ -28344,6 +_,7 @@
 					num6 += Main.rand.Next(0, 6);
 			}
 
+			ItemLoader.ExtractinatorUse(ref num5, ref num6, extractType);
 			if (num5 > 0) {
 				Vector2 vector = Main.ReverseGravitySupport(Main.MouseScreen) + Main.screenPosition;
 				if (Main.SmartCursorEnabled || PlayerInput.UsingGamepad)
@@ -28519,6 +_,8 @@
 					fishingPoleType = inventory[i].type;
 				}
 			}
+
+			TileLoader.MouseOver(myX, myY);
 		}
 
 		public bool HasUnityPotion() {
@@ -28541,10 +_,12 @@
 					continue;
 				}
 
+				itemTime = PlayerHooks.TotalUseTime(inventory[selectedItem].useTime * wallSpeed, this, inventory[selectedItem]);
 				return;
 			}
 
+			if (ItemLoader.ConsumeItem(inventory[num], this))
-			inventory[num].stack--;
+				inventory[num].stack--;
 			if (inventory[num].stack <= 0)
 				inventory[num].SetDefaults();
 		}
@@ -28657,6 +_,8 @@
 							if (flag && Main.myPlayer == whoAmI)
 								break;
 						}
+						if (TileLoader.HasSmartInteract(tile.type))
+							list2.Add(new Tuple<int, int>(j, k));
 					}
 				}
 
@@ -28739,8 +_,17 @@
 			if (itemAnimation == 0 && reuseDelay > 0)
 				ApplyReuseDelay();
 
-			if (Main.myPlayer == i && itemAnimation == 0 && TileObjectData.CustomPlace(item.createTile, item.placeStyle))
-				TileObject.CanPlace(tileTargetX, tileTargetY, item.createTile, item.placeStyle, direction, out TileObject _, onlyCheck: true);
+			if (Main.myPlayer == i && itemAnimation == 0 && TileObjectData.CustomPlace(item.createTile, item.placeStyle)) {
+				int hackCreateTile = item.createTile;
+				int hackPlaceStyle = item.placeStyle;
+				if (hackCreateTile == TileID.Saplings) {
+					Tile soil = Main.tile[tileTargetX, tileTargetY + 1];
+					if (soil.active())
+						TileLoader.SaplingGrowthType(soil.type, ref hackCreateTile, ref hackPlaceStyle);
+				}
+
+				TileObject.CanPlace(tileTargetX, tileTargetY, hackCreateTile, hackPlaceStyle, direction, out _, true);
+			}
 
 			if (itemAnimation == 0 && altFunctionUse == 2)
 				altFunctionUse = 0;
@@ -28753,6 +_,7 @@
 				if (altFunctionUse == 1)
 					altFunctionUse = 2;
 
+				bool flag2 = ItemLoader.CanUseItem(item, this);
 				if (item.shoot == 0)
 					itemRotation = 0f;
 
@@ -28924,8 +_,11 @@
 				}
 
 				if (ItemTimeIsZero && itemAnimation > 0) {
+				if (ItemLoader.UseItem(item, this))
+					itemTime = PlayerHooks.TotalUseTime(item.useTime, this, item);
+
 					if (item.hairDye >= 0) {
-						ApplyItemTime(item);
+					itemTime = PlayerHooks.TotalUseTime(item.useTime, this, item);
 						if (whoAmI == Main.myPlayer) {
 							hairDye = (byte)item.hairDye;
 							NetMessage.SendData(4, -1, -1, null, whoAmI);
@@ -28933,19 +_,21 @@
 					}
 
 					if (item.healLife > 0) {
-						statLife += item.healLife;
-						ApplyItemTime(item);
-						if (Main.myPlayer == whoAmI)
-							HealEffect(item.healLife);
+					int healLife = GetHealLife(item);
+					statLife += healLife;
+					itemTime = PlayerHooks.TotalUseTime(item.useTime, this, item);
+					if (healLife > 0 && Main.myPlayer == whoAmI)
+						HealEffect(healLife, true);
 					}
 
 					if (item.healMana > 0) {
-						statMana += item.healMana;
-						ApplyItemTime(item);
-						if (Main.myPlayer == whoAmI) {
+					int healMana = GetHealMana(item);
+					statMana += healMana;
+					itemTime = PlayerHooks.TotalUseTime(item.useTime, this, item);
+					if (healMana > 0 && Main.myPlayer == whoAmI) {
 							AddBuff(94, manaSickTime);
-							ManaEffect(item.healMana);
 						}
+						ManaEffect(healMana);
 					}
 
 					if (item.buffType > 0) {
@@ -29314,7 +_,7 @@
 				return;
 
 			if (sItem.type == 560) {
-				ApplyItemTime(sItem);
+						itemTime = PlayerHooks.TotalUseTime(item.useTime, this, item);
 				SoundEngine.PlaySound(15, (int)position.X, (int)position.Y, 0);
 				if (Main.netMode != 1)
 					NPC.SpawnOnPlayer(onWhichPlayer, 50);
@@ -29323,7 +_,7 @@
 			}
 			else if (sItem.type == 43) {
 				if (!Main.dayTime) {
-					ApplyItemTime(sItem);
+							itemTime = PlayerHooks.TotalUseTime(item.useTime, this, item);
 					SoundEngine.PlaySound(15, (int)position.X, (int)position.Y, 0);
 					if (Main.netMode != 1)
 						NPC.SpawnOnPlayer(onWhichPlayer, 4);
@@ -29333,7 +_,7 @@
 			}
 			else if (sItem.type == 70) {
 				if (ZoneCorrupt) {
-					ApplyItemTime(sItem);
+							itemTime = PlayerHooks.TotalUseTime(item.useTime, this, item);
 					SoundEngine.PlaySound(15, (int)position.X, (int)position.Y, 0);
 					if (Main.netMode != 1)
 						NPC.SpawnOnPlayer(onWhichPlayer, 13);
@@ -29343,7 +_,7 @@
 			}
 			else if (sItem.type == 544) {
 				if (!Main.dayTime) {
-					ApplyItemTime(sItem);
+							itemTime = PlayerHooks.TotalUseTime(item.useTime, this, item);
 					SoundEngine.PlaySound(15, (int)position.X, (int)position.Y, 0);
 					if (Main.netMode != 1) {
 						NPC.SpawnOnPlayer(onWhichPlayer, 125);
@@ -29357,7 +_,7 @@
 			}
 			else if (sItem.type == 556) {
 				if (!Main.dayTime) {
-					ApplyItemTime(sItem);
+							itemTime = PlayerHooks.TotalUseTime(item.useTime, this, item);
 					SoundEngine.PlaySound(15, (int)position.X, (int)position.Y, 0);
 					if (Main.netMode != 1)
 						NPC.SpawnOnPlayer(onWhichPlayer, 134);
@@ -29367,7 +_,7 @@
 			}
 			else if (sItem.type == 557) {
 				if (!Main.dayTime) {
-					ApplyItemTime(sItem);
+							itemTime = PlayerHooks.TotalUseTime(item.useTime, this, item);
 					SoundEngine.PlaySound(15, (int)position.X, (int)position.Y, 0);
 					if (Main.netMode != 1)
 						NPC.SpawnOnPlayer(onWhichPlayer, 127);
@@ -29405,7 +_,7 @@
 
 		private void ItemCheck_UseEventItems(Item sItem) {
 			if (ItemTimeIsZero && itemAnimation > 0 && sItem.type == 361 && Main.CanStartInvasion(1, ignoreDelay: true)) {
-				ApplyItemTime(sItem);
+					itemTime = PlayerHooks.TotalUseTime(item.useTime, this, item);
 				SoundEngine.PlaySound(15, (int)position.X, (int)position.Y, 0);
 				if (Main.netMode != 1) {
 					if (Main.invasionType == 0) {
@@ -29419,7 +_,7 @@
 			}
 
 			if (ItemTimeIsZero && itemAnimation > 0 && sItem.type == 602 && Main.CanStartInvasion(2, ignoreDelay: true)) {
-				ApplyItemTime(sItem);
+					itemTime = PlayerHooks.TotalUseTime(item.useTime, this, item);
 				SoundEngine.PlaySound(15, (int)position.X, (int)position.Y, 0);
 				if (Main.netMode != 1) {
 					if (Main.invasionType == 0) {
@@ -29433,7 +_,7 @@
 			}
 
 			if (ItemTimeIsZero && itemAnimation > 0 && sItem.type == 1315 && Main.CanStartInvasion(3, ignoreDelay: true)) {
-				ApplyItemTime(sItem);
+					itemTime = PlayerHooks.TotalUseTime(item.useTime, this, item);
 				SoundEngine.PlaySound(15, (int)position.X, (int)position.Y, 0);
 				if (Main.netMode != 1) {
 					if (Main.invasionType == 0) {
@@ -29447,7 +_,7 @@
 			}
 
 			if (ItemTimeIsZero && itemAnimation > 0 && sItem.type == 1844 && !Main.dayTime && !Main.pumpkinMoon && !Main.snowMoon && !DD2Event.Ongoing) {
-				ApplyItemTime(sItem);
+					itemTime = PlayerHooks.TotalUseTime(item.useTime, this, item);
 				SoundEngine.PlaySound(15, (int)position.X, (int)position.Y, 0);
 				if (Main.netMode != 1) {
 					Main.NewText(Lang.misc[31].Value, 50, byte.MaxValue, 130);
@@ -29460,7 +_,7 @@
 
 			if (ItemTimeIsZero && itemAnimation > 0 && sItem.type == 2767 && Main.dayTime && !Main.eclipse) {
 				SoundEngine.PlaySound(15, (int)position.X, (int)position.Y, 0);
-				ApplyItemTime(sItem);
+					itemTime = PlayerHooks.TotalUseTime(item.useTime, this, item);
 				if (Main.netMode == 0) {
 					Main.eclipse = true;
 					Main.NewText(Lang.misc[20].Value, 50, byte.MaxValue, 130);
@@ -29488,7 +_,7 @@
 
 			if (ItemTimeIsZero && itemAnimation > 0 && sItem.type == 3601 && NPC.downedGolemBoss && Main.hardMode && !NPC.AnyDanger() && !NPC.AnyoneNearCultists()) {
 				SoundEngine.PlaySound(15, (int)position.X, (int)position.Y, 0);
-				ApplyItemTime(sItem);
+					itemTime = PlayerHooks.TotalUseTime(item.useTime, this, item);
 				if (Main.netMode == 0)
 					WorldGen.StartImpendingDoom();
 				else
@@ -29496,7 +_,7 @@
 			}
 
 			if (ItemTimeIsZero && itemAnimation > 0 && sItem.type == 1958 && !Main.dayTime && !Main.pumpkinMoon && !Main.snowMoon && !DD2Event.Ongoing) {
-				ApplyItemTime(sItem);
+					itemTime = PlayerHooks.TotalUseTime(item.useTime, this, item);
 				SoundEngine.PlaySound(15, (int)position.X, (int)position.Y, 0);
 				if (Main.netMode != 1) {
 					Main.NewText(Lang.misc[34].Value, 50, byte.MaxValue, 130);
@@ -29516,7 +_,7 @@
 			else if (position.X / 16f - (float)tileRangeX - (float)sItem.tileBoost <= (float)tileTargetX && (position.X + (float)width) / 16f + (float)tileRangeX + (float)sItem.tileBoost - 1f >= (float)tileTargetX && position.Y / 16f - (float)tileRangeY - (float)sItem.tileBoost <= (float)tileTargetY && (position.Y + (float)height) / 16f + (float)tileRangeY + (float)sItem.tileBoost - 2f >= (float)tileTargetY) {
 				int num = Main.mouseX + (int)Main.screenPosition.X;
 				int num2 = Main.mouseY + (int)Main.screenPosition.Y;
-				ApplyItemTime(sItem);
+					itemTime = PlayerHooks.TotalUseTime(item.useTime, this, item);
 				int i = num / 16;
 				int j = num2 / 16;
 				if (!WorldGen.SolidTile(i, j))
@@ -29578,7 +_,7 @@
 				}
 
 				if (inventory[selectedItem].type == 3106) {
-					stealth = 1f;
+					itemTime = PlayerHooks.TotalUseTime(item.useTime, this, item);
 					if (Main.netMode == 1)
 						NetMessage.SendData(84, -1, -1, null, whoAmI);
 				}
@@ -29586,6 +_,8 @@
 				if (sItem.type == 1826 && Main.npc[i].value > 0f)
 					pumpkinSword(i, (int)((double)damage * 1.5), knockBack);
 
+									ItemLoader.OnHitPvp(item, this, Main.player[num320], num322, flag24);
+									PlayerHooks.OnHitPvp(this, item, Main.player[num320], num322, flag24);
 				if (Main.netMode != 0)
 					NetMessage.SendPlayerHurt(i, playerDeathReason, num, direction, flag, pvp: true, -1);
 
@@ -29662,6 +_,8 @@
 
 							Main.npc[i].immune[whoAmI] = itemAnimation;
 							attackCD = Math.Max(1, (int)((double)itemAnimationMax * 0.33));
+
+							TileLoader.PlaceInWorld(tileTargetX, tileTargetY, inventory[selectedItem]);
 						}
 					}
 				}
@@ -30501,7 +_,7 @@
 			if (Main.tileHammer[tile.type]) {
 				canHitWalls = false;
 				if (sItem.hammer > 0) {
-					num2 += sItem.hammer;
+										TileLoader.MineDamage(item.hammer, ref num230);
 					if (!WorldGen.CanKillTile(x, y))
 						num2 = 0;
 
@@ -30978,7 +_,7 @@
 				}
 
 				SoundEngine.PlaySound(19, (int)position.X, (int)position.Y);
-				ApplyItemTime(sItem);
+								itemTime = PlayerHooks.TotalUseTime(item.useTime, this, item);
 				int num3 = Main.tile[tileTargetX, tileTargetY].liquid;
 				Main.tile[tileTargetX, tileTargetY].liquid = 0;
 				Main.tile[tileTargetX, tileTargetY].lava(lava: false);
@@ -31133,7 +_,7 @@
 				}
 			}
 
-			if (sItem.type == 4715 && ((Main.mouseLeft && Main.mouseLeftRelease) | (itemAnimation == itemAnimationMax - 1))) {
+					itemTime = PlayerHooks.TotalUseTime(item.useTime, this, item);
 				Vector2 vector4 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
 				float num13 = (float)Main.mouseX + Main.screenPosition.X - vector4.X;
 				float num14 = (float)Main.mouseY + Main.screenPosition.Y - vector4.Y;
@@ -31379,7 +_,7 @@
 
 			if (sItem.type == 3625) {
 				Point point = new Point(tileTargetX, tileTargetY);
-				ApplyItemTime(sItem);
+							itemTime = PlayerHooks.TotalUseTime(item.useTime, this, item);
 				WiresUI.Settings.MultiToolMode toolMode = WiresUI.Settings.ToolMode;
 				WiresUI.Settings.ToolMode &= ~WiresUI.Settings.MultiToolMode.Actuator;
 				if (Main.netMode == 1)
@@ -32079,6 +_,7 @@
 						}
 					}
 
+					SkipManaCode:
 					Projectile.NewProjectile(result.X * 16 + 8, result.Y * 16 + 8 - 16, 0f, 0f - num52, projToShoot, Damage, KnockBack, i, result.Y * 16 + 8 - 16);
 				}
 				else if (sItem.type == 4952) {
@@ -32956,6 +_,8 @@
 							break;
 						}
 					}
+
+					ItemLoader.UseStyle(item, this);
 				}
 			}
 
@@ -33236,6 +_,7 @@
 					Lighting.AddLight(RotatedRelativePoint(new Vector2(itemLocation.X + 6f + velocity.X, itemLocation.Y - 14f)), 0.7f, 1f, 0.8f);
 			}
 
+			ItemLoader.HoldStyle(item, this);
 			if (sItem.type == 3002 && !pulley) {
 				float r = 1.05f;
 				float g = 0.95f;
@@ -33392,6 +_,7 @@
 							num3 = 187;
 							break;
 					}
+					TileLoader.FixSmartInteractCoords(tile2.type, ref num9, ref num10, ref num11, ref num12, ref num13, ref num14);
 
 					if (num3 > 0) {
 						int num4 = Dust.NewDust(new Vector2(x, y + gfxOffY), 6, 6, num3, 0f, 0f, 100, default(Color), 1.6f);
@@ -34219,7 +_,7 @@
 				SoundEngine.PlaySound(sItem.UseSound, base.Center);
 		}
 
-		private void FreeUpPetsAndMinions(Item sItem) {
+				if ((item.shoot <= 0 || !ProjectileID.Sets.MinionTargettingFeature[item.shoot] || altFunctionUse != 2) && flag2 && whoAmI == Main.myPlayer && item.shoot >= 0 && (ProjectileID.Sets.LightPet[item.shoot] || Main.projPet[item.shoot])) {
 			if (ProjectileID.Sets.MinionSacrificable[sItem.shoot]) {
 				List<int> list = new List<int>();
 				float num = 0f;
@@ -34402,6 +_,7 @@
 					flag = false;
 			}
 
+			ItemLoader.HoldItem(item, this);
 			if (noItems)
 				flag = false;
 
@@ -34982,6 +_,7 @@
 			}
 
 			projectile.Kill();
+			PlayerHooks.ResetEffects(this);
 		}
 
 		public void UpdateMaxTurrets() {
@@ -35037,7 +_,7 @@
 				if (num == 2)
 					num = 102;
 
-				for (int i = 0; i < 22; i++) {
+				for (int i = 0; i < MaxBuffs; i++) {
 					if (buffType[i] == 27 || buffType[i] == 101 || buffType[i] == 102) {
 						DelBuff(i);
 						i--;
@@ -35222,55 +_,78 @@
 			if (sItem.magic)
 				return magicCrit;
 
+			ItemLoader.GetWeaponKnockback(sItem, this, ref KnockBack);
+			PlayerHooks.GetWeaponKnockback(this, sItem, ref KnockBack);
 			return 0;
 		}
 
-		public int GetWeaponDamage(Item sItem) {
-			int num = sItem.damage;
-			if (num > 0) {
-				if (sItem.melee) {
-					num = (int)((float)num * meleeDamage + 5E-06f);
-				}
-				else if (sItem.ranged) {
-					num = (int)((float)num * rangedDamage + 5E-06f);
-					if (sItem.useAmmo == AmmoID.Arrow || sItem.useAmmo == AmmoID.Stake)
-						num = (int)((float)num * arrowDamage + 5E-06f);
-
-					if (sItem.useAmmo == AmmoID.Bullet || sItem.useAmmo == AmmoID.CandyCorn)
-						num = (int)((float)num * bulletDamage + 5E-06f);
-
-					if (sItem.useAmmo == AmmoID.Rocket || sItem.useAmmo == AmmoID.StyngerBolt || sItem.useAmmo == AmmoID.JackOLantern || sItem.useAmmo == AmmoID.NailFriendly)
-						num = (int)((float)num * rocketDamage + 5E-06f);
-				}
-				else if (sItem.magic) {
-					num = (int)((float)num * magicDamage + 5E-06f);
-				}
-				else if (sItem.summon) {
-					num = (int)((float)num * minionDamage);
-				}
-			}
-
-			return num;
+		public int GetWeaponDamage(Item item) {
+			float add = allDamage;
+			float mult = allDamageMult;
+			if (item.melee) {
+				add += meleeDamage - 1;
+				mult *= meleeDamageMult;
+			}
+
+			if (item.ranged) {
+				add += rangedDamage - 1;
+				mult *= rangedDamageMult;
+				if (item.useAmmo == AmmoID.Arrow || item.useAmmo == AmmoID.Stake)
+					mult *= arrowDamage;
+
+				if (item.useAmmo == AmmoID.Arrow && archery)
+					mult *= 1.2f;
+
+				if (item.useAmmo == AmmoID.Bullet || item.useAmmo == AmmoID.CandyCorn)
+					mult *= bulletDamage;
+
+				if (item.useAmmo == AmmoID.Rocket || item.useAmmo == AmmoID.StyngerBolt || item.useAmmo == AmmoID.JackOLantern || item.useAmmo == AmmoID.NailFriendly)
+					mult *= rocketDamage;
+			}
+
+			if (item.magic) {
+				add += magicDamage - 1;
+				mult *= magicDamageMult;
+			}
+
+			if (item.summon) {
+				add += minionDamage - 1;
+				mult *= minionDamageMult;
+			}
+
+			if (item.thrown) {
+				add += thrownDamage - 1;
+				mult *= thrownDamageMult;
+			}
+
+			if (item.modItem?.IgnoreDamageModifiers == true)
+				return item.damage;
+
+			float flat = 0f;
+			CombinedHooks.ModifyWeaponDamage(this, item, ref add, ref mult, ref flat);
+			int damage = (int)(item.damage * add * mult + 5E-06f + flat);
+			CombinedHooks.GetWeaponDamage(this, item, ref damage);
+			return Math.Max(0, damage);
 		}
 
 		public bool HasAmmo(Item sItem, bool canUse) {
 			if (sItem.useAmmo > 0) {
-				canUse = false;
-				for (int i = 0; i < 58; i++) {
+				itemAnimation = PlayerHooks.TotalMeleeTime(sItem.useAnimation * meleeSpeed, this, sItem);
+				itemAnimationMax = itemAnimation;
 					if (inventory[i].ammo == sItem.useAmmo && inventory[i].stack > 0) {
 						canUse = true;
-						break;
-					}
 				}
+				itemAnimation = PlayerHooks.TotalMeleeTime(sItem.useAnimation * tileSpeed, this, sItem);
+				itemAnimationMax = itemAnimation;
 			}
 
-			return canUse;
-		}
+				itemAnimation = PlayerHooks.TotalMeleeTime(sItem.useAnimation * wallSpeed, this, sItem);
+				itemAnimationMax = itemAnimation;
 
 		private bool PickAmmo_TryFindingSpecificMatches(int launcher, int ammo, out int pickedProjectileId) {
-			pickedProjectileId = 0;
-			if (AmmoID.Sets.SpecificLauncherAmmoProjectileMatches.TryGetValue(launcher, out Dictionary<int, int> value) && value.TryGetValue(ammo, out pickedProjectileId))
-				return true;
+				itemAnimation = PlayerHooks.TotalMeleeTime(sItem.useAnimation, this, sItem);
+				itemAnimationMax = itemAnimation;
+				reuseDelay = (int)(sItem.reuseDelay / PlayerHooks.TotalUseTimeMultiplier(this, sItem));
 
 			return false;
 		}
@@ -35303,16 +_,21 @@
 			int pickedProjectileId = -1;
 			if (PickAmmo_TryFindingSpecificMatches(sItem.type, item.type, out pickedProjectileId))
 				projToShoot = pickedProjectileId;
-			else if (sItem.type == 1946)
+			if (sItem.type == 1946) {
 				projToShoot = 338 + item.type - 771;
 			else if (sItem.type == 3930)
 				projToShoot = 715 + item.type - AmmoID.Rocket;
+				if (shoot > ProjectileID.RocketSnowmanIV) shoot = ProjectileID.RocketSnowmanIV;
+			}
-			else if (sItem.useAmmo == AmmoID.Rocket)
+			else if (sItem.useAmmo == AmmoID.Rocket) {
 				projToShoot += item.shoot;
+			}
-			else if (sItem.useAmmo == 780)
+			else if (sItem.useAmmo == 780) {
 				projToShoot += item.shoot;
+			}
-			else if (item.shoot > 0)
+			else if (item.shoot > 0) {
 				projToShoot = item.shoot;
+			}
 
 			if (sItem.type == 3019 && projToShoot == 1)
 				projToShoot = 485;
@@ -35360,8 +_,14 @@
 
 			speed += item.shootSpeed;
 			if (item.ranged) {
-				if (item.damage > 0)
-					Damage += (int)((float)item.damage * rangedDamage);
+				if (item.damage > 0) {
+					// determine damage multiplier using item base damage and apply to ammo
+					// equivalent to Damage *= (item.damage + sItem.damage) / sItem.damage
+					if (sItem.damage > 0) // coin gun fix.
+						Damage += (int)(item.damage * Damage / (float)sItem.damage);
+					else
+						Damage += item.damage;
+				}
 			}
 			else {
 				Damage += item.damage;
@@ -35373,11 +_,12 @@
 					if (speed > 20f)
 						speed = 20f;
 				}
-
-				Damage = (int)((double)Damage * 1.2);
+				// archery buff damage moved into GetWeaponDamage
+				// Damage = (int)((double)((float)Damage) * 1.2);
 			}
 
 			KnockBack += item.knockBack;
+			ItemLoader.PickAmmo(sItem, item, this, ref shoot, ref speed, ref Damage, ref KnockBack);
 			bool flag2 = dontConsume;
 			if (sItem.type == 3245 && Main.rand.Next(3) == 0)
 				flag2 = true;
@@ -35421,7 +_,7 @@
 			if (sItem.type == 434 && itemAnimation < sItem.useAnimation - 2)
 				flag2 = true;
 
-			if (sItem.type == 4953 && itemAnimation > sItem.useAnimation - 8)
+			if (sItem.type == 434 && itemAnimation < PlayerHooks.TotalMeleeTime(sItem.useAnimation, this, sItem) - 2)
 				flag2 = true;
 
 			if (chloroAmmoCost80 && Main.rand.Next(5) == 0)
@@ -35439,7 +_,10 @@
 			if ((projToShoot == 145 || projToShoot == 146 || projToShoot == 147 || projToShoot == 148 || projToShoot == 149) && itemAnimation < itemAnimationMax - 5)
 				flag2 = true;
 
+			flag2 |= !PlayerHooks.ConsumeAmmo(this, sItem, item) | !ItemLoader.ConsumeAmmo(sItem, item, this);
 			if (!flag2 && item.consumable) {
+				PlayerHooks.OnConsumeAmmo(this, sItem, item);
+				ItemLoader.OnConsumeAmmo(sItem, item, this);
 				item.stack--;
 				if (item.stack <= 0) {
 					item.active = false;
@@ -35481,14 +_,20 @@
 						NetMessage.SendData(17, -1, -1, null, 0, x, y, 1f);
 					}
 
-					if (Main.tile[x, y].type == 21)
+					if (Main.tile[x, y].type == 21 || Main.tile[x, y].type >= TileID.Count && TileID.Sets.BasicChest[Main.tile[x, y].type])
 						NetMessage.SendData(34, -1, -1, null, 1, x, y);
 
 					if (Main.tile[x, y].type == 467)
 						NetMessage.SendData(34, -1, -1, null, 5, x, y);
 
-					if (Main.tile[x, y].type == 88)
+					if (TileLoader.IsDresser(Main.tile[x, y].type))
 						NetMessage.SendData(34, -1, -1, null, 3, x, y);
+
+					if (Main.tile[x, y].type >= TileID.Count && TileID.Sets.BasicChest[Main.tile[x, y].type])
+						NetMessage.SendData(34, -1, -1, null, 101, x, y, 0f, 0, Main.tile[x, y].type, 0);
+
+					if (Main.tile[x, y].type >= TileID.Count && TileLoader.IsDresser(Main.tile[x, y].type))
+						NetMessage.SendData(34, -1, -1, null, 103, x, y, 0f, 0, Main.tile[x, y].type, 0);
 				}
 				else {
 					bool num2 = Main.tile[x, y].active();
@@ -35559,7 +_,22 @@
 			if (Main.tileNoFail[tileTarget.type])
 				num = 100;
 
-			num = ((!Main.tileDungeon[tileTarget.type] && tileTarget.type != 25 && tileTarget.type != 58 && tileTarget.type != 117 && tileTarget.type != 203) ? ((tileTarget.type == 85) ? (num + pickPower / 3) : ((tileTarget.type != 48 && tileTarget.type != 232) ? ((tileTarget.type == 226) ? (num + pickPower / 4) : ((tileTarget.type != 107 && tileTarget.type != 221) ? ((tileTarget.type != 108 && tileTarget.type != 222) ? ((tileTarget.type == 111 || tileTarget.type == 223) ? (num + pickPower / 4) : ((tileTarget.type != 211) ? (num + pickPower) : (num + pickPower / 5))) : (num + pickPower / 3)) : (num + pickPower / 2))) : (num + pickPower * 2))) : (num + pickPower / 2));
+			if (Main.tileDungeon[(int)tile.type] || tile.type == 25 || tile.type == 58 || tile.type == 117 || tile.type == 203)
+				num += pickPower / 2;
+			else if (tile.type == 48 || tile.type == 232)
+				num += pickPower / 4;
+			else if (tile.type == 226)
+				num += pickPower / 4;
+			else if (tile.type == 107 || tile.type == 221)
+				num += pickPower / 2;
+			else if (tile.type == 108 || tile.type == 222)
+				num += pickPower / 3;
+			else if (tile.type == 111 || tile.type == 223)
+				num += pickPower / 4;
+			else if (tile.type == 211)
+				num += pickPower / 5;
+			else
+				TileLoader.MineDamage(pickPower, ref num);
 			if (tileTarget.type == 211 && pickPower < 200)
 				num = 0;
 
@@ -35614,6 +_,9 @@
 			else if (tileTarget.type == 223 && pickPower < 150) {
 				num = 0;
 			}
+			else {
+				TileLoader.PickPowerCheck(tile, pickPower, ref num);
+			}
 
 			if (tileTarget.type == 147 || tileTarget.type == 0 || tileTarget.type == 40 || tileTarget.type == 53 || tileTarget.type == 57 || tileTarget.type == 59 || tileTarget.type == 123 || tileTarget.type == 224 || tileTarget.type == 397)
 				num += pickPower;
@@ -35911,19 +_,41 @@
 					if (inventory[i].type == 3507 || inventory[i].type == 3506 || inventory[i].type == 3509)
 						flag = false;
 
-					if (flag) {
+			IList<Item> startInventory = PlayerHooks.SetupStartInventory(this, true);
+			IDictionary<int, int> startCounts = new Dictionary<int, int>();
+			foreach (Item item in startInventory) {
+				if (!startCounts.ContainsKey(item.netID))
+					startCounts[item.netID] = 0;
+
+				startCounts[item.netID] += item.stack;
+			}
+
+			startCounts[ModContent.ItemType<ModLoader.Default.StartBag>()] = 1;
+				Item item = inventory[i];
+				if (item.stack > 0 && (!startCounts.ContainsKey(item.netID) || startCounts[item.netID] < item.stack)) {
+					int stack = item.stack;
+					if (startCounts.ContainsKey(item.netID)) {
+						stack -= startCounts[item.netID];
+						startCounts[item.netID] = 0;
+					}
+
 						int num = Item.NewItem((int)position.X, (int)position.Y, width, height, inventory[i].type);
 						Main.item[num].netDefaults(inventory[i].netID);
 						Main.item[num].Prefix(inventory[i].prefix);
-						Main.item[num].stack = inventory[i].stack;
+					Main.item[num].stack = stack;
 						Main.item[num].velocity.Y = (float)Main.rand.Next(-20, 1) * 0.2f;
 						Main.item[num].velocity.X = (float)Main.rand.Next(-20, 21) * 0.2f;
 						Main.item[num].noGrabDelay = 100;
 						Main.item[num].newAndShiny = false;
+					Main.item[num].modItem = inventory[i].modItem;
+					Main.item[num].globalItems = inventory[i].globalItems;
 						if (Main.netMode == 1)
 							NetMessage.SendData(21, -1, -1, null, num);
 					}
 				}
+				else if (item.stack > 0 && startCounts.ContainsKey(item.netID)) {
+					startCounts[item.netID] -= item.stack;
+				}
 
 				inventory[i].TurnToAir();
 				if (i < armor.Length) {
@@ -35936,6 +_,8 @@
 						Main.item[num2].velocity.X = (float)Main.rand.Next(-20, 21) * 0.2f;
 						Main.item[num2].noGrabDelay = 100;
 						Main.item[num2].newAndShiny = false;
+						Main.item[num2].modItem = armor[i].modItem;
+						Main.item[num2].globalItems = armor[i].globalItems;
 						if (Main.netMode == 1)
 							NetMessage.SendData(21, -1, -1, null, num2);
 					}
@@ -35953,6 +_,8 @@
 						Main.item[num3].velocity.X = (float)Main.rand.Next(-20, 21) * 0.2f;
 						Main.item[num3].noGrabDelay = 100;
 						Main.item[num3].newAndShiny = false;
+						Main.item[num3].modItem = dye[i].modItem;
+						Main.item[num3].globalItems = dye[i].globalItems;
 						if (Main.netMode == 1)
 							NetMessage.SendData(21, -1, -1, null, num3);
 					}
@@ -35970,6 +_,8 @@
 						Main.item[num4].velocity.X = (float)Main.rand.Next(-20, 21) * 0.2f;
 						Main.item[num4].noGrabDelay = 100;
 						Main.item[num4].newAndShiny = false;
+						Main.item[num4].modItem = miscEquips[i].modItem;
+						Main.item[num4].globalItems = miscEquips[i].globalItems;
 						if (Main.netMode == 1)
 							NetMessage.SendData(21, -1, -1, null, num4);
 					}
@@ -35989,6 +_,8 @@
 					Main.item[num5].velocity.X = (float)Main.rand.Next(-20, 21) * 0.2f;
 					Main.item[num5].noGrabDelay = 100;
 					Main.item[num5].newAndShiny = false;
+					Main.item[num5].modItem = miscDyes[i].modItem;
+					Main.item[num5].globalItems = miscDyes[i].globalItems;
 					if (Main.netMode == 1)
 						NetMessage.SendData(21, -1, -1, null, num5);
 				}
@@ -35996,21 +_,18 @@
 				miscDyes[i].TurnToAir();
 			}
 
-			inventory[0].SetDefaults(3507);
-			inventory[0].Prefix(-1);
-			inventory[1].SetDefaults(3509);
-			inventory[1].Prefix(-1);
-			inventory[2].SetDefaults(3506);
-			inventory[2].Prefix(-1);
+			PlayerHooks.SetStartInventory(this, startInventory);
 			Main.mouseItem.TurnToAir();
 		}
 
 		public object Clone() => MemberwiseClone();
 
 		public void CopyVisuals(Player other) {
+			Player player = new Player(false);
 			skinVariant = other.skinVariant;
 			direction = other.direction;
 			selectedItem = other.selectedItem;
+			PlayerHooks.CopyCustomBiomesTo(this, player);
 			extraAccessory = other.extraAccessory;
 			skinColor = other.skinColor;
 			eyeColor = other.eyeColor;
@@ -36106,13 +_,14 @@
 			}
 
 			player.trashItem = trashItem.Clone();
-			for (int j = 0; j < 22; j++) {
+			for (int j = 0; j < MaxBuffs; j++) {
 				player.buffType[j] = buffType[j];
 				player.buffTime[j] = buffTime[j];
 			}
 
 			DpadRadial.CopyTo(player.DpadRadial);
 			CircularRadial.CopyTo(player.CircularRadial);
+			PlayerHooks.clientClone(this, player);
 			return player;
 		}
 
@@ -36123,7 +_,7 @@
 			if (Main.tile[x, y - 1] == null)
 				return false;
 
-			if (!Main.tile[x, y - 1].active() || Main.tile[x, y - 1].type != 79)
+			if (!Main.tile[x, y - 1].active() || Main.tile[x, y - 1].type != 79 && !TileLoader.IsModBed(Main.tile[x, y - 1].type))
 				return false;
 
 			for (int i = x - 1; i <= x + 1; i++) {
@@ -36255,6 +_,7 @@
 			if (path == null || path == "")
 				return;
 
+			BackupIO.Player.ArchivePlayer(path, isCloudSave);
 			if (FileUtilities.Exists(path, isCloudSave))
 				FileUtilities.Copy(path, path + ".bak", isCloudSave);
 
@@ -36262,13 +_,14 @@
 			using (Stream stream = isCloudSave ? ((Stream)new MemoryStream(2000)) : ((Stream)new FileStream(path, FileMode.Create))) {
 				using (CryptoStream cryptoStream = new CryptoStream(stream, rijndaelManaged.CreateEncryptor(ENCRYPTION_KEY, ENCRYPTION_KEY), CryptoStreamMode.Write)) {
 					using (BinaryWriter binaryWriter = new BinaryWriter(cryptoStream)) {
+						PlayerHooks.PreSavePlayer(player);
 						binaryWriter.Write(227);
 						playerFile.Metadata.Write(binaryWriter);
 						binaryWriter.Write(player.name);
 						binaryWriter.Write(player.difficulty);
 						binaryWriter.Write(playerFile.GetPlayTime().Ticks);
 						binaryWriter.Write(player.hair);
-						binaryWriter.Write(player.hairDye);
+						PlayerIO.WriteVanillaHairDye(player.hairDye, binaryWriter);
 						BitsByte bb = (byte)0;
 						for (int i = 0; i < 8; i++) {
 							bb[i] = player.hideVisibleAccessory[i];
@@ -36312,51 +_,50 @@
 						binaryWriter.Write(player.shoeColor.G);
 						binaryWriter.Write(player.shoeColor.B);
 						for (int k = 0; k < player.armor.Length; k++) {
-							binaryWriter.Write(player.armor[k].netID);
+							ItemIO.WriteVanillaID(player.armor[k], binaryWriter);
 							binaryWriter.Write(player.armor[k].prefix);
 						}
 
 						for (int l = 0; l < player.dye.Length; l++) {
-							binaryWriter.Write(player.dye[l].netID);
+							ItemIO.WriteVanillaID(player.dye[l], binaryWriter);
 							binaryWriter.Write(player.dye[l].prefix);
 						}
 
 						for (int m = 0; m < 58; m++) {
-							binaryWriter.Write(player.inventory[m].netID);
+							ItemIO.WriteVanillaID(player.inventory[m], binaryWriter);
 							binaryWriter.Write(player.inventory[m].stack);
 							binaryWriter.Write(player.inventory[m].prefix);
 							binaryWriter.Write(player.inventory[m].favorited);
 						}
 
 						for (int n = 0; n < player.miscEquips.Length; n++) {
-							binaryWriter.Write(player.miscEquips[n].netID);
+							ItemIO.WriteVanillaID(player.miscEquips[n], binaryWriter);
 							binaryWriter.Write(player.miscEquips[n].prefix);
-							binaryWriter.Write(player.miscDyes[n].netID);
+							ItemIO.WriteVanillaID(player.miscDyes[n], binaryWriter);
 							binaryWriter.Write(player.miscDyes[n].prefix);
 						}
 
 						for (int num = 0; num < 40; num++) {
-							binaryWriter.Write(player.bank.item[num].netID);
+							ItemIO.WriteVanillaID(player.bank.item[num], binaryWriter);
 							binaryWriter.Write(player.bank.item[num].stack);
 							binaryWriter.Write(player.bank.item[num].prefix);
 						}
 
 						for (int num2 = 0; num2 < 40; num2++) {
-							binaryWriter.Write(player.bank2.item[num2].netID);
+							ItemIO.WriteVanillaID(player.bank2.item[num2], binaryWriter);
 							binaryWriter.Write(player.bank2.item[num2].stack);
 							binaryWriter.Write(player.bank2.item[num2].prefix);
 						}
 
 						for (int num3 = 0; num3 < 40; num3++) {
-							binaryWriter.Write(player.bank3.item[num3].netID);
+							ItemIO.WriteVanillaID(player.bank3.item[num3], binaryWriter);
 							binaryWriter.Write(player.bank3.item[num3].stack);
 							binaryWriter.Write(player.bank3.item[num3].prefix);
 						}
 
 						for (int num4 = 0; num4 < 40; num4++) {
-							binaryWriter.Write(player.bank4.item[num4].netID);
-							binaryWriter.Write(player.bank4.item[num4].stack);
-							binaryWriter.Write(player.bank4.item[num4].prefix);
+							binaryWriter.Write(0);
+							binaryWriter.Write(0);
 						}
 
 						binaryWriter.Write(player.voidVaultInfo);
@@ -36413,9 +_,13 @@
 						stream.Flush();
 						if (isCloudSave && SocialAPI.Cloud != null)
 							SocialAPI.Cloud.Write(playerFile.Path, ((MemoryStream)stream).ToArray());
+
+						PlayerHooks.PostSavePlayer(player);
 					}
 				}
 			}
+
+			PlayerIO.Save(player, path, isCloudSave);
 		}
 
 		private void SaveTemporaryItemSlotContents(BinaryWriter writer) {
@@ -36488,7 +_,7 @@
 			if (Main.rand == null)
 				Main.rand = new UnifiedRandom((int)DateTime.Now.Ticks);
 
-			Player player = new Player();
+			Player player = new Player(false); // setup inventory is unnecessary
 			try {
 				RijndaelManaged rijndaelManaged = new RijndaelManaged();
 				rijndaelManaged.Padding = PaddingMode.None;
@@ -36822,7 +_,7 @@
 							if (num >= 11) {
 								int num28 = 22;
 								if (num < 74)
-									num28 = 10;
+									num27 = num27 - 12;
 
 								for (int num29 = 0; num29 < num28; num29++) {
 									player.buffType[num29] = binaryReader.ReadInt32();
@@ -36910,6 +_,8 @@
 								CreativePowerManager.Instance.LoadToPlayer(player, binaryReader, num);
 
 							LoadPlayer_LastMinuteFixes(player);
+
+							player.ResetEffects();
 						}
 					}
 				}
@@ -36919,6 +_,9 @@
 				playerFileData.Player = player;
 				return playerFileData;
 			}
+			catch (CustomModDataException e) {
+				playerFileData.customDataFail = e;
+			}
 			catch {
 			}
 
@@ -36976,12 +_,17 @@
 			PlayerFileData playerFileData = LoadPlayer(file, cloudSave);
 			if (playerFileData.Player != null) {
 				if (playerFileData.Player.loadStatus != 0 && playerFileData.Player.loadStatus != 1) {
+					CustomModDataException customDataFail = playerFileData.customDataFail;
-					if (FileUtilities.Exists(file + ".bak", cloudSave))
+					if (FileUtilities.Exists(file + ".bak", cloudSave)) {
 						FileUtilities.Move(file + ".bak", file, cloudSave);
+						PlayerIO.LoadBackup(file, cloudSave);
+					}
 
 					playerFileData = LoadPlayer(file, cloudSave);
 					if (playerFileData.Player == null)
 						return null;
+
+					playerFileData.customDataFail = customDataFail;
 				}
 
 				return playerFileData;
@@ -37031,7 +_,33 @@
 			return -1;
 		}
 
-		public Player() {
+		internal IList<string> usedMods;
+		internal ModPlayer[] modPlayers = new ModPlayer[0];
+
+		private ModPlayer GetModPlayer(int? index) => index.HasValue ? modPlayers[index.Value] : null;
+
+		public ModPlayer GetModPlayer(Mod mod, string name) => GetModPlayer(mod.GetPlayer(name)?.index);
+
+		[Obsolete("Use GetModPlayer<T>() instead", true)]
+		public T GetModPlayer<T>(Mod mod) where T : ModPlayer => (T)GetModPlayer(mod, typeof(T).Name);
+
+		public T GetModPlayer<T>() where T : ModPlayer => (T)GetModPlayer(ModContent.GetInstance<T>()?.index);
+
+		public Player(bool startupInventory = true) {
+			NPCBannerBuff = new bool[NPCLoader.NPCCount];
+			buffType = new int[MaxBuffs];
+			buffTime = new int[MaxBuffs];
+			buffImmune = new bool[BuffLoader.BuffCount]; // TODO: Move all these patches to field initializers.
+			allDamage = 1f;
+			allDamageMult = 1f;
+			meleeDamageMult = 1f;
+			rangedDamageMult = 1f;
+			thrownDamageMult = 1f;
+			magicDamageMult = 1f;
+			minionDamageMult = 1f;
+			ownedProjectileCounts = new int[ProjectileLoader.ProjectileCount];
+			npcTypeNoAggro = new bool[NPCLoader.NPCCount];
+			PlayerHooks.SetupPlayer(this);
 			width = 20;
 			height = 42;
 			name = string.Empty;
@@ -37068,11 +_,12 @@
 			}
 
 			trashItem = new Item();
-			lastVisualizedSelectedItem = new Item();
-			grappling[0] = -1;
+			if (startupInventory)
+				PlayerHooks.SetStartInventory(this);
+
 			statManaMax = 20;
 			extraAccessory = false;
-			for (int n = 0; n < 623; n++) {
+			for (int n = 0; n < adjTile.Length; n++) {
 				adjTile[n] = false;
 				oldAdjTile[n] = false;
 			}
@@ -37300,6 +_,7 @@
 		}
 
 		public void GetAnglerReward() {
+			List<Item> rewardItems = new List<Item>();
 			Item item = new Item();
 			item.type = 0;
 			int num = anglerQuestsFinished;
@@ -37485,56 +_,22 @@
 					}
 			}
 
-			item.position = base.Center;
-			GetItemSettings nPCEntityToPlayerInventorySettings = GetItemSettings.NPCEntityToPlayerInventorySettings;
-			Item item2 = GetItem(whoAmI, item, nPCEntityToPlayerInventorySettings);
-			if (item2.stack > 0) {
-				int number = Item.NewItem((int)position.X, (int)position.Y, width, height, item2.type, item2.stack, noBroadcast: false, 0, noGrabDelay: true);
-				if (Main.netMode == 1)
-					NetMessage.SendData(21, -1, -1, null, number, 1f);
-			}
-
+			rewardItems.Add(item);
 			if (item.type == 2417) {
 				Item item3 = new Item();
 				Item item4 = new Item();
 				item3.SetDefaults(2418);
-				item3.position = base.Center;
-				item2 = GetItem(whoAmI, item3, nPCEntityToPlayerInventorySettings);
-				if (item2.stack > 0) {
-					int number2 = Item.NewItem((int)position.X, (int)position.Y, width, height, item2.type, item2.stack, noBroadcast: false, 0, noGrabDelay: true);
-					if (Main.netMode == 1)
-						NetMessage.SendData(21, -1, -1, null, number2, 1f);
-				}
-
+				rewardItems.Add(item3);
 				item4.SetDefaults(2419);
-				item4.position = base.Center;
-				item2 = GetItem(whoAmI, item4, nPCEntityToPlayerInventorySettings);
-				if (item2.stack > 0) {
-					int number3 = Item.NewItem((int)position.X, (int)position.Y, width, height, item2.type, item2.stack, noBroadcast: false, 0, noGrabDelay: true);
-					if (Main.netMode == 1)
-						NetMessage.SendData(21, -1, -1, null, number3, 1f);
-				}
+				rewardItems.Add(item4);
 			}
 			else if (item.type == 2498) {
 				Item item5 = new Item();
 				Item item6 = new Item();
 				item5.SetDefaults(2499);
-				item5.position = base.Center;
-				item2 = GetItem(whoAmI, item5, nPCEntityToPlayerInventorySettings);
-				if (item2.stack > 0) {
-					int number4 = Item.NewItem((int)position.X, (int)position.Y, width, height, item2.type, item2.stack, noBroadcast: false, 0, noGrabDelay: true);
-					if (Main.netMode == 1)
-						NetMessage.SendData(21, -1, -1, null, number4, 1f);
-				}
-
+				rewardItems.Add(item5);
 				item6.SetDefaults(2500);
-				item6.position = base.Center;
-				item2 = GetItem(whoAmI, item6, nPCEntityToPlayerInventorySettings);
-				if (item2.stack > 0) {
-					int number5 = Item.NewItem((int)position.X, (int)position.Y, width, height, item2.type, item2.stack, noBroadcast: false, 0, noGrabDelay: true);
-					if (Main.netMode == 1)
-						NetMessage.SendData(21, -1, -1, null, number5, 1f);
-				}
+				rewardItems.Add(item6);
 			}
 
 			Item item7 = new Item();
@@ -37566,16 +_,9 @@
 				item7.stack = num3;
 			}
 
-			item7.position = base.Center;
-			item2 = GetItem(whoAmI, item7, nPCEntityToPlayerInventorySettings);
-			if (item2.stack > 0) {
-				int number6 = Item.NewItem((int)position.X, (int)position.Y, width, height, item2.type, item2.stack, noBroadcast: false, 0, noGrabDelay: true);
-				if (Main.netMode == 1)
-					NetMessage.SendData(21, -1, -1, null, number6, 1f);
-			}
-
+			rewardItems.Add(item7);
 			if (Main.rand.Next((int)(100f * num2)) > 50)
-				return;
+				goto postAnglerQuestCountCheck;
 
 			Item item8 = new Item();
 			if (Main.rand.Next((int)(15f * num2)) == 0)
@@ -37603,12 +_,18 @@
 			if (Main.rand.Next(250) <= num)
 				item8.stack++;
 
+			rewardItems.Add(item8);
+
+			postAnglerQuestCountCheck:
+			PlayerHooks.AnglerQuestReward(this, num, rewardItems);
+			foreach (Item rewardItem in rewardItems) {
-			item8.position = base.Center;
+				rewardItem.position = Center;
-			item2 = GetItem(whoAmI, item8, GetItemSettings.NPCEntityToPlayerInventorySettings);
+				Item getItem = GetItem(whoAmI, rewardItem, longText: true);
-			if (item2.stack > 0) {
+				if (getItem.stack > 0) {
-				int number7 = Item.NewItem((int)position.X, (int)position.Y, width, height, item2.type, item2.stack, noBroadcast: false, 0, noGrabDelay: true);
+					int number = Item.NewItem((int)position.X, (int)position.Y, width, height, getItem.type, getItem.stack, noBroadcast: false, 0, noGrabDelay: true);
-				if (Main.netMode == 1)
+					if (Main.netMode == 1)
-					NetMessage.SendData(21, -1, -1, null, number7, 1f);
+						NetMessage.SendData(21, -1, -1, null, number, 1f);
+				}
 			}
 		}
 
@@ -37733,6 +_,7 @@
 					list.Add(3024);
 			}
 
+			PlayerHooks.GetDyeTraderReward(this, list);
 			num = list[Main.rand.Next(list.Count)];
 			Item item = new Item();
 			item.SetDefaults(num);
@@ -37746,6 +_,49 @@
 			}
 		}
 
+		public int GetManaCost(Item item) {
+			float reduce = manaCost;
+			float mult = 1;
+			if (item.type == ItemID.SpaceGun && spaceGun)
+				mult = 0;
+
+			CombinedHooks.ModifyManaCost(this, item, ref reduce, ref mult);
+			int mana = (int)(item.mana * reduce * mult);
+			return mana >= 0 ? mana : 0;
+		}
+
+		public bool CheckMana(Item item, int amount = -1, bool pay = false, bool blockQuickMana = false) {
+			if (amount <= -1)
+				amount = GetManaCost(item);
+
+			if (statMana >= amount) {
+				if (pay) {
+					CombinedHooks.OnConsumeMana(this, item, amount);
+					statMana -= amount;
+				}
+
+				return true;
+			}
+
+			if (blockQuickMana)
+				return false;
+
+			CombinedHooks.OnMissingMana(this, item, amount);
+			if (statMana < amount && manaFlower)
+				QuickMana();
+
+			if (statMana >= amount) {
+				if (pay) {
+					CombinedHooks.OnConsumeMana(this, item, amount);
+					statMana -= amount;
+				}
+
+				return true;
+			}
+
+			return false;
+		}
+
 		public bool CheckMana(int amount, bool pay = false, bool blockQuickMana = false) {
 			int num = (int)((float)amount * manaCost);
 			if (statMana >= num) {
@@ -37778,7 +_,7 @@
 		public bool ConsumeSolarFlare() {
 			if (setSolar && solarShields > 0) {
 				solarShields--;
-				for (int i = 0; i < 22; i++) {
+				for (int i = 0; i < MaxBuffs; i++) {
 					if (buffType[i] >= 170 && buffType[i] <= 172)
 						DelBuff(i);
 				}
@@ -38016,7 +_,7 @@
 				return;
 
 			int timeToAdd = 480;
-			for (int i = 0; i < 22; i++) {
+			for (int i = 0; i < MaxBuffs; i++) {
 				if (buffType[i] >= type && buffType[i] < type + 3)
 					DelBuff(i);
 			}
