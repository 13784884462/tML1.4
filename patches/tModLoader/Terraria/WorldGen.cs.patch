--- src/Terraria/Terraria/WorldGen.cs
+++ src/tModLoader/Terraria/WorldGen.cs
@@ -18,6 +_,8 @@
 using Terraria.ObjectData;
 using Terraria.Utilities;
 using Terraria.World.Generation;
+using Terraria.ModLoader;
+using Terraria.ModLoader.IO;
 #if CLIENT
 using Terraria.Map;
 #endif
@@ -454,7 +_,13 @@
 		private static int lAltarY;
 		public static int tileReframeCount = 0;
 		public static bool noMapUpdate = false;
+		public static StructureMap structures;
+		public static double worldSurface;
 		public static double worldSurfaceLow;
+		public static double worldSurfaceHigh;
+		public static double rockLayer;
+		public static double rockLayerLow;
+		public static double rockLayerHigh;
 		public static int tLeft;
 		public static int tRight;
 		public static int tTop;
@@ -804,9 +_,9 @@
 			}
 
 			int num2 = -1;
-			for (int i = 0; i < 580; i++) {
+			for (int i = 0; i < Main.townNPCCanSpawn.Length; i++) {
 				if (!Main.townNPCCanSpawn[i] || !CheckSpecialTownNPCSpawningConditions(i))
 					continue;
 
 				if (NPC.AnyNPCs(i)) {
 					Main.townNPCCanSpawn[i] = false;
@@ -832,7 +_,9 @@
 			return false;
 		}
 
 		public static bool CheckSpecialTownNPCSpawningConditions(int type) {
+			if (!NPCLoader.CheckConditions(type))
+				return false;
 			if (type == 160) {
 				if ((double)roomY2 > Main.worldSurface)
 					return false;
@@ -1363,7 +_,7 @@
 			if (num7 > Main.maxTilesY)
 				num7 = Main.maxTilesY - 1;
 
-			int[] tileTypeCounts = new int[470];
+			int[] tileTypeCounts = new int[TileLoader.TileCount];
 			CountTileTypesInArea(tileTypeCounts, num4 + 1, num5 - 1, num6 + 2, num7 + 1);
 			int num8 = -GetTileTypeCountByCategory(tileTypeCounts, TileScanGroup.TotalGoodEvil);
 			if (num8 < 50)
@@ -1507,7 +_,7 @@
 			roomY2 = y;
 			numRoomTiles = 0;
 			roomCeilingsCount = 0;
-			for (int i = 0; i < 470; i++) {
+			for (int i = 0; i < houseTile.Length; i++) {
 				houseTile[i] = false;
 			}
 
@@ -1579,6 +_,8 @@
 			if (Main.tile[x, y].nactive()) {
 				houseTile[Main.tile[x, y].type] = true;
 				if (Main.tileSolid[Main.tile[x, y].type] || (Main.tile[x, y].type == 11 && (Main.tile[x, y].frameX == 0 || Main.tile[x, y].frameX == 54 || Main.tile[x, y].frameX == 72 || Main.tile[x, y].frameX == 126)) || Main.tile[x, y].type == 389 || (Main.tile[x, y].type == 386 && ((Main.tile[x, y].frameX < 36 && Main.tile[x, y].frameY == 18) || (Main.tile[x, y].frameX >= 36 && Main.tile[x, y].frameY == 0))))
 					return;
+				if (TileLoader.CloseDoorID(Main.tile[x, y]) >= 0 && (Main.tile[x, y].frameX == 0 || Main.tile[x, y].frameX == 54 || Main.tile[x, y].frameX == 72 || Main.tile[x, y].frameX == 126))
+					return;
 			}
 
@@ -1835,10 +_,20 @@
 		}
 
 		public static void worldGenCallBack(object threadContext) {
+			try {
+				do_worldGenCallBack(threadContext);
+			}
+			catch (Exception e) {
+				Logging.Terraria.Error(Language.GetTextValue("tModLoader.WorldGenError"), e);
+			}
+		}
+
+		public static void do_worldGenCallBack(object threadContext) {
 			Main.PlaySound(10);
 			clearWorld();
 			generateWorld(Main.ActiveWorldFileData.Seed, threadContext as GenerationProgress);
 			WorldFile.saveWorld(Main.ActiveWorldFileData.IsCloudSave, resetTime: true);
+			BackupIO.archiveLock = false;
 			if (Main.menuMode == 10 || Main.menuMode == 888)
 				Main.menuMode = 6;
 
@@ -1888,10 +_,21 @@
 
 		public static void SaveAndQuit(Action callback = null) {
 			Main.PlaySound(11);
+			ModHooks.PreSaveAndQuit();
 			ThreadPool.QueueUserWorkItem(SaveAndQuitCallBack, callback);
 		}
 
 		public static void playWorldCallBack(object threadContext) {
+			try {
+				Logging.Terraria.InfoFormat("Loading World: {0}, IsCloud={1}", Main.ActiveWorldFileData.Name, Main.ActiveWorldFileData.IsCloudSave);
+				do_playWorldCallBack(threadContext);
+			}
+			catch (Exception e) {
+				Logging.Terraria.Error(Language.GetTextValue("tModLoader.PlayerLoadWorldFail"), e);
+			}
+		}
+
+		public static void do_playWorldCallBack(object threadContext) {
 			if (Main.rand == null)
 				Main.rand = new UnifiedRandom((int)DateTime.Now.Ticks);
 
@@ -1921,13 +_,20 @@
 					}
 
 					if (!worldBackup) {
-						Console.WriteLine(Language.GetTextValue("Error.LoadFailedNoBackup"));
+						string message = Language.GetTextValue("Error.LoadFailedNoBackup");
+						if (WorldIO.customDataFail != null) {
+							message = WorldIO.customDataFail.modName + " " + message;
+							message += "\n" + WorldIO.customDataFail.InnerException;
+						}
+
+						Console.WriteLine(message);
 						return;
 					}
 
 					FileUtilities.Copy(Main.worldPathName, Main.worldPathName + ".bad", isCloudSave);
 					FileUtilities.Copy(Main.worldPathName + ".bak", Main.worldPathName, isCloudSave);
 					FileUtilities.Delete(Main.worldPathName + ".bak", isCloudSave);
+					WorldIO.LoadDedServBackup(Main.worldPathName, isCloudSave);
 					WorldFile.loadWorld(Main.ActiveWorldFileData.IsCloudSave);
 					if (loadFailed || !loadSuccess) {
 						WorldFile.loadWorld(Main.ActiveWorldFileData.IsCloudSave);
@@ -1935,7 +_,14 @@
 							FileUtilities.Copy(Main.worldPathName, Main.worldPathName + ".bak", isCloudSave);
 							FileUtilities.Copy(Main.worldPathName + ".bad", Main.worldPathName, isCloudSave);
 							FileUtilities.Delete(Main.worldPathName + ".bad", isCloudSave);
-							Console.WriteLine(Language.GetTextValue("Error.LoadFailed"));
+							WorldIO.RevertDedServBackup(Main.worldPathName, isCloudSave);
+							string message = Language.GetTextValue("Error.LoadFailed");
+							if (WorldIO.customDataFail != null) {
+								message = WorldIO.customDataFail.modName + " " + message;
+								message += "\n" + WorldIO.customDataFail.InnerException;
+							}
+
+							Console.WriteLine(message);
 							return;
 						}
 					}
@@ -1962,6 +_,12 @@
 			if (Main.netMode == 0 && Main.anglerWhoFinishedToday.Contains(Main.player[Main.myPlayer].name))
 				Main.anglerQuestFinished = true;
 
+			// Move rest of method to main thread to fix concurrent modification exceptions
+			Main.OnTick += FinishPlayWorld;
+		}
+
+		internal static void FinishPlayWorld() {
+			Main.OnTick -= FinishPlayWorld;
 			Main.player[Main.myPlayer].Spawn();
 			Main.player[Main.myPlayer].Update(Main.myPlayer);
 			Main.ActivePlayerFileData.StartPlayTimer();
@@ -1994,6 +_,7 @@
 		}
 
 		public static void serverLoadWorldCallBack(object threadContext) {
+			Logging.Terraria.InfoFormat("Loading World: {0}, IsCloud={1}", Main.ActiveWorldFileData.Name, Main.ActiveWorldFileData.IsCloudSave);
 			Main.rand = new UnifiedRandom((int)DateTime.Now.Ticks);
 			WorldFile.loadWorld(Main.ActiveWorldFileData.IsCloudSave);
 			if (loadFailed || !loadSuccess) {
@@ -2227,6 +_,7 @@
 			}
 
 			setWorldSize();
+			WorldHooks.SetupWorld();
 			worldCleared = true;
 		}
 
@@ -3691,17 +_,18 @@
 		}
 
 		public static void generateWorld(int seed, GenerationProgress customProgressObject = null) {
+			Logging.Terraria.InfoFormat("Generating World: {0}", Main.ActiveWorldFileData.Name);
 			_lastSeed = seed;
 			_generator = new WorldGenerator(seed);
 			Main.rand = new UnifiedRandom(seed);
 			MicroBiome.ResetAll();
-			StructureMap structures = new StructureMap();
+			structures = new StructureMap();
-			double worldSurface = 0.0;
+			worldSurface = 0.0;
 			worldSurfaceLow = 0.0;
-			double worldSurfaceHigh = 0.0;
+			worldSurfaceHigh = 0.0;
-			double rockLayer = 0.0;
+			rockLayer = 0.0;
-			double rockLayerLow = 0.0;
+			rockLayerLow = 0.0;
-			double rockLayerHigh = 0.0;
+			rockLayerHigh = 0.0;
 			int copper = 7;
 			int iron = 6;
 			int silver = 9;
@@ -3736,6 +_,7 @@
 				}
 			}
 
+			WorldHooks.PreWorldGen();
 			AddGenerationPass("Reset", delegate (GenerationProgress progress) {
 				Liquid.ReInit();
 				noTileActions = true;
@@ -5971,7 +_,7 @@
 								int num386 = genRand.Next(num371 - num378, num371 + num378 + 1);
 								int num387 = genRand.Next(num372 - num379, num372 + num379 - 2);
 								PlaceTile(num386, num387, 4, mute: true, forced: false, -1, 3);
-								if (Main.tile[num386, num387].type == 4)
+								if (TileLoader.IsTorch(Main.tile[num386, num387].type))
 									flag29 = true;
 							}
 
@@ -8113,7 +_,7 @@
 							}
 						}
 
-						if (TileID.Sets.BasicChest[Main.tile[num21, num22].type]) {
+						if (TileID.Sets.BasicChest[Main.tile[num21, num22].type] && Main.tile[num21, num22].type < TileID.Count) {
 							int num50 = Main.tile[num21, num22].frameX / 18;
 							int num51 = 0;
 							int num52 = num21;
@@ -8287,7 +_,7 @@
 			});
 
 			AddGenerationPass("Micro Biomes", delegate (GenerationProgress progress) {
-				progress.Message = Lang.gen[76].Value;
+				progress.Message = Lang.gen[76].Value + "..Thin Ice";
 				float num = (float)(Main.maxTilesX * Main.maxTilesY) / 5040000f;
 				float num2 = (float)Main.maxTilesX / 4200f;
 				int num3 = (int)((float)genRand.Next(3, 6) * num);
@@ -8298,7 +_,8 @@
 				}
 
 				progress.Set(0.1f);
+				progress.Message = Lang.gen[76] + "..Enchanted Swords";
 				int num5 = (int)Math.Ceiling(num);
 				int num6 = 0;
 				Point origin = default(Point);
 				while (num6 < num5) {
@@ -8313,6 +_,7 @@
 				}
 
 				progress.Set(0.2f);
+				progress.Message = Lang.gen[76] + "..Campsites";
 				int num7 = (int)((float)genRand.Next(6, 12) * num);
 				int num8 = 0;
 				while (num8 < num7) {
@@ -8320,6 +_,8 @@
 						num8++;
 				}
 
+				progress.Message = Lang.gen[76] + "..Mining Explosives";
+				progress.Set(0.25f);
 				int num9 = (int)((float)genRand.Next(14, 30) * num);
 				int num10 = 0;
 				while (num10 < num9) {
@@ -8327,6 +_,7 @@
 						num10++;
 				}
 
+				progress.Message = Lang.gen[76] + "..Mahogany Trees";
 				progress.Set(0.3f);
 				int num11 = (int)((float)genRand.Next(6, 12) * num2);
 				int num12 = 0;
@@ -8338,6 +_,7 @@
 					num13++;
 				}
 
+				progress.Message = Lang.gen[76] + "..Corruption Pits";
 				progress.Set(0.4f);
 				if (!crimson) {
 					int num14 = (int)((float)genRand.Next(1, 3) * num);
@@ -8348,6 +_,8 @@
 					}
 				}
 
+				progress.Message = Lang.gen[76] + "..Minecart Tracks";
+				progress.Set(0.5f);
 				TrackGenerator.Run((int)(10f * num), (int)(num * 25f) + 250);
 				progress.Set(1f);
 			});
@@ -8382,8 +_,11 @@
 				Main.AnglerQuestSwap();
 			});
 
+			WorldHooks.ModifyWorldGenTasks(_generator._passes, ref _generator._totalLoadWeight);
 			_generator.GenerateWorld(customProgressObject);
+			WorldHooks.PostWorldGen();
 			Main.WorldFileMetadata = FileMetadata.FromCurrentSettings(FileType.World);
+			BackupIO.archiveLock = true;
 		}
 
 		public static Point RandomRectanglePoint(Rectangle rectangle) => new Point(genRand.Next(rectangle.X, rectangle.X + rectangle.Width), genRand.Next(rectangle.Y, rectangle.Y + rectangle.Height));
@@ -8394,4 +_,4 @@
 		public static bool GrowPalmTree(int i, int y) {
 			int j;
-			for (j = y; Main.tile[i, j].type == 20; j++) {
+			for (j = y; TileLoader.IsSapling(Main.tile[i, j].type); j++) {
 			}
@@ -8404,7 +_,7 @@
 			if (tile2.wall != 0 || tile2.liquid != 0)
 				return false;
 
-			if (tile.type != 53 && tile.type != 234 && tile.type != 116 && tile.type != 112)
+			if (tile.type != 53 && tile.type != 234 && tile.type != 116 && tile.type != 112 && !TileLoader.CanGrowModPalmTree(tile.type))
 				return false;
 
 			if (!EmptyTileCheck(i - 1, i + 1, j - 30, j - 1, 20))
@@ -8456,10 +_,10 @@
 
 		public static bool GrowEpicTree(int i, int y) {
 			int j;
-			for (j = y; Main.tile[i, j].type == 20; j++) {
+			for (j = y; TileLoader.IsSapling(Main.tile[i, j].type); j++) {
 			}
 
-			if (Main.tile[i, j].active() && !Main.tile[i, j].halfBrick() && Main.tile[i, j].slope() == 0 && Main.tile[i, j].type == 2 && Main.tile[i, j - 1].wall == 0 && Main.tile[i, j - 1].liquid == 0 && ((Main.tile[i - 1, j].active() && (Main.tile[i - 1, j].type == 2 || Main.tile[i - 1, j].type == 23 || Main.tile[i - 1, j].type == 60 || Main.tile[i - 1, j].type == 109)) || (Main.tile[i + 1, j].active() && (Main.tile[i + 1, j].type == 2 || Main.tile[i + 1, j].type == 23 || Main.tile[i + 1, j].type == 60 || Main.tile[i + 1, j].type == 109)))) {
+			if (Main.tile[i, j].active() && !Main.tile[i, j].halfBrick() && Main.tile[i, j].slope() == 0 && Main.tile[i, j].type == 2 && Main.tile[i, j - 1].wall == 0 && Main.tile[i, j - 1].liquid == 0 && ((Main.tile[i - 1, j].active() && (Main.tile[i - 1, j].type == 2 || Main.tile[i - 1, j].type == 23 || Main.tile[i - 1, j].type == 60 || Main.tile[i - 1, j].type == 109 || TileLoader.CanGrowModTree(Main.tile[i - 1, j].type)) || (Main.tile[i + 1, j].active() && (Main.tile[i + 1, j].type == 2 || Main.tile[i + 1, j].type == 23 || Main.tile[i + 1, j].type == 60 || Main.tile[i + 1, j].type == 109 || TileLoader.CanGrowModTree(Main.tile[i + 1, j].type)))) {
 				int num = 2;
 				if (EmptyTileCheck(i - num, i + num, j - 55, j - 1, 20)) {
 					bool flag = false;
@@ -8683,10 +_,10 @@
 					int num5 = genRand.Next(3);
 					bool flag3 = false;
 					bool flag4 = false;
-					if (Main.tile[i - 1, j].active() && !Main.tile[i - 1, j].halfBrick() && Main.tile[i - 1, j].slope() == 0 && (Main.tile[i - 1, j].type == 2 || Main.tile[i - 1, j].type == 23 || Main.tile[i - 1, j].type == 60 || Main.tile[i - 1, j].type == 109))
+					if (Main.tile[i - 1, j].active() && !Main.tile[i - 1, j].halfBrick() && Main.tile[i - 1, j].slope() == 0 && (Main.tile[i - 1, j].type == 2 || Main.tile[i - 1, j].type == 23 || Main.tile[i - 1, j].type == 60 || Main.tile[i - 1, j].type == 109 || TileLoader.CanGrowModTree(Main.tile[i - 1, j].type)))
 						flag3 = true;
 
-					if (Main.tile[i + 1, j].active() && !Main.tile[i + 1, j].halfBrick() && Main.tile[i + 1, j].slope() == 0 && (Main.tile[i + 1, j].type == 2 || Main.tile[i + 1, j].type == 23 || Main.tile[i + 1, j].type == 60 || Main.tile[i + 1, j].type == 109))
+					if (Main.tile[i + 1, j].active() && !Main.tile[i + 1, j].halfBrick() && Main.tile[i + 1, j].slope() == 0 && (Main.tile[i + 1, j].type == 2 || Main.tile[i + 1, j].type == 23 || Main.tile[i + 1, j].type == 60 || Main.tile[i + 1, j].type == 109 || TileLoader.CanGrowModTree(Main.tile[i + 1, j].type)))
 						flag4 = true;
 
 					if (!flag3) {
@@ -9613,6 +_,14 @@
 						num4 = 2;
 				}
 
+				TileLoader.TreeGrowthFXGore(type, ref num2);
+				if (num2 > 0)
+					break;
+
+				TileLoader.PalmTreeGrowthFXGore(type, ref num2);
+				if (num2 > 0)
+					break;
+
 				switch (tile3.type) {
 					case 2:
 						num2 = 910;
@@ -9722,13 +_,13 @@
 
 		public static bool GrowTree(int i, int y) {
 			int j;
-			for (j = y; Main.tile[i, j].type == 20; j++) {
+			for (j = y; TileLoader.IsSapling(Main.tile[i, j].type; j++) {
 			}
 
 			if ((Main.tile[i - 1, j - 1].liquid != 0 || Main.tile[i, j - 1].liquid != 0 || Main.tile[i + 1, j - 1].liquid != 0) && Main.tile[i, j].type != 60)
 				return false;
 
-			if (Main.tile[i, j].nactive() && !Main.tile[i, j].halfBrick() && Main.tile[i, j].slope() == 0 && (Main.tile[i, j].type == 2 || Main.tile[i, j].type == 23 || Main.tile[i, j].type == 60 || Main.tile[i, j].type == 109 || Main.tile[i, j].type == 147 || Main.tile[i, j].type == 199 || Main.tile[i, j].type == 70) && (Main.tile[i, j - 1].wall == 0 || Main.tile[i, j - 1].wall == 106 || Main.tile[i, j - 1].wall == 107 || (Main.tile[i, j - 1].wall >= 138 && Main.tile[i, j - 1].wall <= 141) || Main.tile[i, j - 1].wall == 145 || Main.tile[i, j - 1].wall == 150 || Main.tile[i, j - 1].wall == 152) && ((Main.tile[i - 1, j].active() && (Main.tile[i - 1, j].type == 2 || Main.tile[i - 1, j].type == 23 || Main.tile[i - 1, j].type == 60 || Main.tile[i - 1, j].type == 109 || Main.tile[i - 1, j].type == 147 || Main.tile[i - 1, j].type == 199 || Main.tile[i - 1, j].type == 70)) || (Main.tile[i + 1, j].active() && (Main.tile[i + 1, j].type == 2 || Main.tile[i + 1, j].type == 23 || Main.tile[i + 1, j].type == 60 || Main.tile[i + 1, j].type == 109 || Main.tile[i + 1, j].type == 147 || Main.tile[i + 1, j].type == 199 || Main.tile[i + 1, j].type == 70)))) {
+			if (Main.tile[i, j].nactive() && !Main.tile[i, j].halfBrick() && Main.tile[i, j].slope() == 0 && (Main.tile[i, j].type == 2 || Main.tile[i, j].type == 23 || Main.tile[i, j].type == 60 || Main.tile[i, j].type == 109 || Main.tile[i, j].type == 147 || Main.tile[i, j].type == 199 || Main.tile[i, j].type == 70 || TileLoader.CanGrowModTree(Main.tile[i, j].type)) && (Main.tile[i, j - 1].wall == 0 || Main.tile[i, j - 1].wall == 106 || Main.tile[i, j - 1].wall == 107 || Main.tile[i, j - 1].wall >= 138 && Main.tile[i, j - 1].wall <= 141 || Main.tile[i, j - 1].wall == 145 || Main.tile[i, j - 1].wall == 150 || Main.tile[i, j - 1].wall == 152) && (Main.tile[i - 1, j].active() && (Main.tile[i - 1, j].type == 2 || Main.tile[i - 1, j].type == 23 || Main.tile[i - 1, j].type == 60 || Main.tile[i - 1, j].type == 109 || Main.tile[i - 1, j].type == 147 || Main.tile[i - 1, j].type == 199 || Main.tile[i - 1, j].type == 70 || TileLoader.CanGrowModTree(Main.tile[i - 1, j].type)) || Main.tile[i + 1, j].active() && (Main.tile[i + 1, j].type == 2 || Main.tile[i + 1, j].type == 23 || Main.tile[i + 1, j].type == 60 || Main.tile[i + 1, j].type == 109 || Main.tile[i + 1, j].type == 147 || Main.tile[i + 1, j].type == 199 || Main.tile[i + 1, j].type == 70 || TileLoader.CanGrowModTree(Main.tile[i + 1, j].type)))) {
 				int num = 2;
 				int num2 = 16;
 				if (Main.tile[i, j].type == 60)
@@ -9956,10 +_,10 @@
 					int num6 = genRand.Next(3);
 					bool flag3 = false;
 					bool flag4 = false;
-					if (Main.tile[i - 1, j].nactive() && !Main.tile[i - 1, j].halfBrick() && Main.tile[i - 1, j].slope() == 0 && (Main.tile[i - 1, j].type == 2 || Main.tile[i - 1, j].type == 23 || Main.tile[i - 1, j].type == 60 || Main.tile[i - 1, j].type == 109 || Main.tile[i - 1, j].type == 147 || Main.tile[i - 1, j].type == 199))
+					if (Main.tile[i - 1, j].nactive() && !Main.tile[i - 1, j].halfBrick() && Main.tile[i - 1, j].slope() == 0 && (Main.tile[i - 1, j].type == 2 || Main.tile[i - 1, j].type == 23 || Main.tile[i - 1, j].type == 60 || Main.tile[i - 1, j].type == 109 || Main.tile[i - 1, j].type == 147 || Main.tile[i - 1, j].type == 199 || TileLoader.CanGrowModTree(Main.tile[i - 1, j].type)))
 						flag3 = true;
 
-					if (Main.tile[i + 1, j].nactive() && !Main.tile[i + 1, j].halfBrick() && Main.tile[i + 1, j].slope() == 0 && (Main.tile[i + 1, j].type == 2 || Main.tile[i + 1, j].type == 23 || Main.tile[i + 1, j].type == 60 || Main.tile[i + 1, j].type == 109 || Main.tile[i + 1, j].type == 147 || Main.tile[i + 1, j].type == 199))
+					if (Main.tile[i + 1, j].nactive() && !Main.tile[i + 1, j].halfBrick() && Main.tile[i + 1, j].slope() == 0 && (Main.tile[i + 1, j].type == 2 || Main.tile[i + 1, j].type == 23 || Main.tile[i + 1, j].type == 60 || Main.tile[i + 1, j].type == 109 || Main.tile[i + 1, j].type == 147 || Main.tile[i + 1, j].type == 199 || TileLoader.CanGrowModTree(Main.tile[i + 1, j].type)))
 						flag4 = true;
 
 					if (!flag3) {
@@ -10614,12 +_,12 @@
 
 								break;
 							}
-						case 20:
+						case int _ when TileLoader.IsSapling(ignoreID):
 							switch (Main.tile[i, j].type) {
 								default:
 									return false;
 								case 3:
-								case 20:
+								case int _ when TileLoader.IsSapling(Main.tile[i, j].type):
 								case 24:
 								case 32:
 								case 61:
@@ -10655,6 +_,7 @@
 		}
 
 		public static void smCallBack(object threadContext) {
+			List<GenPass> hardmodetasks = new List<GenPass>();
 			IsGeneratingHardMode = true;
 			if (Main.rand == null)
 				Main.rand = new UnifiedRandom((int)DateTime.Now.Ticks);
@@ -10687,8 +_,15 @@
 				num3 = (int)((float)Main.maxTilesX * (1f - num2));
 			}
 
-			GERunner(num3, 0, 3 * num5, 5f);
-			GERunner(num4, 0, 3 * -num5, 5f, good: false);
+			hardmodetasks.Add(new PassLegacy("Hardmode Good", delegate (GenerationProgress progress) {
+				GERunner(num3, 0, 3 * num5, 5f, true);
+			}));
+
+			hardmodetasks.Add(new PassLegacy("Hardmode Evil", delegate (GenerationProgress progress) {
+				GERunner(num4, 0, 3 * -(float)num5, 5f, false);
+			}));
+
+			hardmodetasks.Add(new PassLegacy("Hardmode Walls", delegate (GenerationProgress progress) {
 			float num7 = (float)Main.maxTilesX / 4200f;
 			int num8 = (int)(25f * num7);
 			ShapeData shapeData = new ShapeData();
@@ -10718,13 +_,22 @@
 					shapeData.Clear();
 				}
 			}
+			}));
 
+			hardmodetasks.Add(new PassLegacy("Hardmode Announcment", delegate (GenerationProgress progress) {
 			if (Main.netMode == 0)
 				Main.NewText(Lang.misc[15].Value, 50, byte.MaxValue, 130);
 			else if (Main.netMode == 2)
 				NetMessage.BroadcastChatMessage(NetworkText.FromKey(Lang.misc[15].Key), new Color(50, 255, 130));
 
 			AchievementsHelper.NotifyProgressionEvent(9);
+			}));
+
+			WorldHooks.ModifyHardmodeTasks(hardmodetasks);
+			foreach (GenPass task in hardmodetasks) {
+				task.Apply(null);
+			}
+
 			if (Main.netMode == 2)
 				Netplay.ResetSections();
 
@@ -10766,7 +_,7 @@
 
 			int frameX = Main.tile[i, j].frameX;
 			Tile tile = Main.tile[i, j];
-			if (tile.type != 11)
+			if (TileLoader.CloseDoorID(Main.tile[i, j]) < 0)
 				return false;
 
 			int num4 = tile.frameY;
@@ -10813,13 +_,14 @@
 				}
 			}
 
+			ushort closeDoorID = (ushort)TileLoader.CloseDoorID(tile);
 			for (int l = num7; l < num7 + 2; l++) {
 				for (int m = num3; m < num3 + 3; m++) {
 					if (l == num2) {
 						if (Main.tile[l, m] == null)
 							Main.tile[l, m] = new Tile();
 
-						Main.tile[l, m].type = 10;
+						Main.tile[l, m].type = closeDoorID;
 						Main.tile[l, m].frameX = (short)(genRand.Next(3) * 18 + num6);
 					}
 					else {
@@ -10977,7 +_,7 @@
 							bool flag2 = false;
 							for (int k = num6 - 8; k < num6 + 8; k++) {
 								for (int l = num7 - 8; l < num7 + 8; l++) {
-									if (Main.tile[k, l].active() && Main.tile[k, l].type == 4) {
+									if (Main.tile[k, l].active() && TileLoader.IsTorch(Main.tile[k, l].type)) {
 										flag2 = true;
 										break;
 									}
@@ -16527,10 +_,7 @@
 				Main.tile[i, j] = new Tile();
 
 			Tile tile = Main.tile[i, j];
-			if (tile.type != 10)
-				return false;
-
-			if (tile.frameY >= 594 && tile.frameY <= 646 && tile.frameX < 54)
+			if (TileLoader.OpenDoorID(Main.tile[i, j]) < 0)
 				return false;
 
 			short num2 = 0;
@@ -16592,8 +_,9 @@
 
 			int num8 = num4 % 36 * 54;
 			Main.PlaySound(8, i * 16, j * 16);
+			ushort openDoorID = (ushort)TileLoader.OpenDoorID(Main.tile[i, j]);
 			Main.tile[num6, num].active(active: true);
-			Main.tile[num6, num].type = 11;
+			Main.tile[num6, num].type = openDoorID;
 			Main.tile[num6, num].frameY = (short)num8;
 			Main.tile[num6, num].frameX = num2;
 			Main.tile[num6, num].color(color);
@@ -16601,7 +_,7 @@
 				Main.tile[num6 + 1, num] = new Tile();
 
 			Main.tile[num6 + 1, num].active(active: true);
-			Main.tile[num6 + 1, num].type = 11;
+			Main.tile[num6 + 1, num].type = openDoorID;
 			Main.tile[num6 + 1, num].frameY = (short)num8;
 			Main.tile[num6 + 1, num].frameX = (short)(num2 + 18);
 			Main.tile[num6 + 1, num].color(color);
@@ -16609,7 +_,7 @@
 				Main.tile[num6, num + 1] = new Tile();
 
 			Main.tile[num6, num + 1].active(active: true);
-			Main.tile[num6, num + 1].type = 11;
+			Main.tile[num6, num + 1].type = openDoorID;
 			Main.tile[num6, num + 1].frameY = (short)(num8 + 18);
 			Main.tile[num6, num + 1].frameX = num2;
 			Main.tile[num6, num + 1].color(color2);
@@ -16617,7 +_,7 @@
 				Main.tile[num6 + 1, num + 1] = new Tile();
 
 			Main.tile[num6 + 1, num + 1].active(active: true);
-			Main.tile[num6 + 1, num + 1].type = 11;
+			Main.tile[num6 + 1, num + 1].type = openDoorID;
 			Main.tile[num6 + 1, num + 1].frameY = (short)(num8 + 18);
 			Main.tile[num6 + 1, num + 1].frameX = (short)(num2 + 18);
 			Main.tile[num6 + 1, num + 1].color(color2);
@@ -16625,7 +_,7 @@
 				Main.tile[num6, num + 2] = new Tile();
 
 			Main.tile[num6, num + 2].active(active: true);
-			Main.tile[num6, num + 2].type = 11;
+			Main.tile[num6, num + 2].type = openDoorID;
 			Main.tile[num6, num + 2].frameY = (short)(num8 + 36);
 			Main.tile[num6, num + 2].frameX = num2;
 			Main.tile[num6, num + 2].color(color3);
@@ -16633,7 +_,7 @@
 				Main.tile[num6 + 1, num + 2] = new Tile();
 
 			Main.tile[num6 + 1, num + 2].active(active: true);
-			Main.tile[num6 + 1, num + 2].type = 11;
+			Main.tile[num6 + 1, num + 2].type = openDoorID;
 			Main.tile[num6 + 1, num + 2].frameY = (short)(num8 + 36);
 			Main.tile[num6 + 1, num + 2].frameX = (short)(num2 + 18);
 			Main.tile[num6 + 1, num + 2].color(color3);
@@ -17232,6 +_,9 @@
 						KillTile(x, num4 + l, false, false, false);
 				}
 
+				if (!TileLoader.Drop(x, j, type))
+					goto skipDrop;
+
 				if (type == 92)
 					Item.NewItem(x * 16, j * 16, 32, 32, 341, 1, false, 0, false, false);
 
@@ -17288,7 +_,8 @@
 
 					Item.NewItem(x * 16, j * 16, 32, 32, type3, 1, false, 0, false, false);
 				}
-
+				
+				skipDrop:
 				destroyObject = false;
 			}
 		}
@@ -17387,6 +_,9 @@
 						KillTile(num + 1, num4 + num5, false, false, false);
 				}
 
+				if (!TileLoader.Drop(num, j, type))
+					goto skipDrop;
+
 				if (type == 104) {
 					int num6 = frameX / 36;
 					int type2;
@@ -17497,6 +_,7 @@
 					TETrainingDummy.Kill(num, num4);
 				}
 
+				skipDrop:
 				destroyObject = false;
 			}
 		}
@@ -18392,7 +_,9 @@
 					}
 				}
 
+				if (TileLoader.Drop(x, y, TileID.ChristmasTree))
-				Item.NewItem(x * 16, y * 16, 32, 32, 1873, 1, false, 0, false, false);
+					Item.NewItem(x * 16, y * 16, 32, 32, 1873, 1, false, 0, false, false);
+
 				destroyObject = false;
 			}
 		}
@@ -18482,7 +_,9 @@
 			if (!SolidTileAllowBottomSlope(x, num + 2) && !TileID.Sets.Platforms[Main.tile[x, num + 2].type])
 				flag = true;
 
-			if (Main.tile[x, num].type == 20) {
+			if (TileLoader.IsSapling(Main.tile[x, num].type)) {
+				int originalType = Main.tile[x, num].type;
+				int newType = TileID.Saplings;
 				int num3 = Main.tile[x, num].frameX / 54;
 				int type2 = Main.tile[x, num + 2].type;
 				int num4 = -1;
@@ -18506,10 +_,13 @@
 					num4 = 8;
 				else if (type2 == 112)
 					num4 = 9;
+				else if (TileLoader.SaplingGrowthType(type2, ref newType, ref num4)) {}
 				else
 					flag = true;
 
-				if (!flag && num3 != num4) {
+				if (!flag && (originalType != newType || num3 != num4)) {
+					Main.tile[x, num].type = (ushort)newType;
+					Main.tile[x, num + 1].type = (ushort)newType;
 					int num5 = 54 * num4;
 					num5 += genRand.Next(3) * 18;
 					Main.tile[x, num].frameX = (short)num5;
@@ -18525,6 +_,9 @@
 				if (Main.tile[x, num + 1].type == type)
 					KillTile(x, num + 1, false, false, false);
 
+				if (!TileLoader.Drop(x, num, type))
+					goto skipDrop;
+
 				if (type == 216)
 					Item.NewItem(x * 16, num * 16, 32, 32, 970 + num2, 1, false, 0, false, false);
 
@@ -18609,7 +_,8 @@
 					else
 						Item.NewItem(x * 16, num * 16, 32, 32, 525, 1, false, 0, false, false);
 				}
-
+				
+				skipDrop:
 				destroyObject = false;
 			}
 		}
@@ -18743,6 +_,9 @@
 				if (type != 395)
 					Sign.KillSign(num7, num8);
 
+				if (!TileLoader.Drop(x, y, type))
+					goto skipDrop;
+
 				if (type == 85) {
 					int type2 = 321;
 					if (num10 >= 6 && num10 <= 10)
@@ -18762,7 +_,8 @@
 				else {
 					Item.NewItem(x * 16, y * 16, 32, 32, 171, 1, false, 0, false, false);
 				}
-
+				
+				skipDrop:
 				destroyObject = false;
 				return;
 			}
@@ -20056,6 +_,9 @@
 						KillTile(x, i + l, false, false, false);
 				}
 
+				if (!TileLoader.Drop(x, i + 1, type))
+					goto skipDrop;
+
 				if (type == 91) {
 					int num2 = frameX / 18;
 					num2 += num * 111;
@@ -20084,7 +_,8 @@
 					else
 						Item.NewItem(x * 16, (i + 1) * 16, 32, 32, 337 + num2, 1, false, 0, false, false);
 				}
-
+				
+				skipDrop:
 				destroyObject = false;
 			}
 		}
@@ -20247,7 +_,9 @@
 
 			if (flag) {
 				destroyObject = true;
+				if (TileLoader.Drop(i, j, TileID.WeaponsRack))
-				Item.NewItem(i * 16, j * 16, 48, 48, 2699, 1, false, 0, false, false);
+					Item.NewItem(i * 16, j * 16, 48, 48, 2699, 1, false, 0, false, false);
+
 				for (int num7 = 0; num7 < 3; num7++) {
 					for (int num8 = 0; num8 < 3; num8++) {
 						int num9 = num3 + num7;
@@ -20352,7 +_,9 @@
 
 			if (flag) {
 				destroyObject = true;
+				if (TileLoader.Drop(i, j, TileID.Mannequin))
-				Item.NewItem(i * 16, j * 16, 32, 32, 498, 1, false, 0, false, false);
+					Item.NewItem(i * 16, j * 16, 32, 32, 498, 1, false, 0, false, false);
+
 				for (int num5 = 0; num5 <= 1; num5++) {
 					for (int num6 = 0; num6 <= 2; num6++) {
 						int num7 = num2 + num5;
@@ -20402,7 +_,9 @@
 
 			if (flag) {
 				destroyObject = true;
+				if (TileLoader.Drop(i, j, TileID.Womannequin))
-				Item.NewItem(i * 16, j * 16, 32, 32, 1989, 1, false, 0, false, false);
+					Item.NewItem(i * 16, j * 16, 32, 32, 1989, 1, false, 0, false, false);
+
 				for (int num5 = 0; num5 <= 1; num5++) {
 					for (int num6 = 0; num6 <= 2; num6++) {
 						int num7 = num2 + num5;
@@ -20041,7 +_,7 @@
 
 		public static void Place1x2(int x, int y, ushort type, int style) {
 			short frameX = 0;
-			if (type == 20)
+			if (TileLoader.IsSapling(type))
 				frameX = (short)(genRand.Next(3) * 18);
 
 			if (Main.tile[x, y - 1] == null)
@@ -20501,6 +_,9 @@
 				if (Main.tile[x, num2 + 1].type == type)
 					KillTile(x, num2 + 1, false, false, false);
 
+				if (!TileLoader.Drop(x, num2, type))
+					goto skipDrop;
+
 				if (type == 42) {
 					int type2 = 0;
 					if (num == 0)
@@ -20572,7 +_,8 @@
 				else if (type == 271) {
 					Item.NewItem(x * 16, num2 * 16, 32, 32, 2005, 1, false, 0, false, false);
 				}
-
+				
+				skipDrop:
 				destroyObject = false;
 			}
 		}
@@ -20707,6 +_,9 @@
 				if (Main.tile[num3 + 1, y].type == type)
 					KillTile(num3 + 1, y, false, false, false);
 
+				if (!TileLoader.Drop(num3, y, type))
+					goto skipDrop;
+
 				if (type == 16) {
 					if (num2 == 1)
 						Item.NewItem(num3 * 16, y * 16, 32, 32, 716, 1, false, 0, false, false);
@@ -20873,6 +_,7 @@
 						Item.NewItem(num3 * 16, y * 16, 32, 32, 525, 1, false, 0, false, false);
 				}
 
+				skipDrop:
 				destroyObject = false;
 				SquareTileFrame(num3, y, true);
 				SquareTileFrame(num3 + 1, y, true);
@@ -20956,6 +_,8 @@
 					}
 				}
 
+				if (!TileLoader.Drop(i, j, type))
+				goto skipDrop;
 				if (type == 79) {
 					int type2;
 					if (num2 == 0)
@@ -21044,6 +_,7 @@
 					Item.NewItem(i * 16, j * 16, 32, 32, type3, 1, false, 0, false, false);
 				}
 
+				skipDrop:
 				destroyObject = false;
 				for (int num5 = num - 1; num5 < num + 4; num5++) {
 					for (int num6 = k - 1; num6 < k + 4; num6++) {
@@ -21199,6 +_,9 @@
 				}
 
 				if (flag) {
+					if (!TileLoader.Drop(i, j, type))
+						goto skipDrop; // do not know the size for this
+
 					if (type == 238) {
 						float num4 = i * 16;
 						float num5 = j * 16;
@@ -21219,6 +_,7 @@
 					if (type == 236)
 						Item.NewItem(i * 16, j * 16, 32, 32, 1291, 1, false, 0, false, false);
 
+					skipDrop:
 					short arg_2A9_0 = Main.tile[i, j].frameX;
 					destroyObject = true;
 					for (int num9 = k; num9 < k + 2; num9++) {
@@ -21404,7 +_,9 @@
 			if (type == 444 && Main.netMode != 1 && !flag5)
 				Projectile.NewProjectile(num2 * 16 + 16, num3 * 16 + 16, 0f, 0f, 655, 0, 0f, Main.myPlayer, 0f, 0f);
 
-			if (num12 != 0)
+			// FishingCrate, GeyserTrap, and BeeHive
+			// geyser is 2x1
+			if (TileLoader.Drop(num2, num3, type) && num12 != 0)
 				Item.NewItem(num2 * 16, num3 * 16, tileData.CoordinateFullWidth, tileData.CoordinateFullHeight, num12, 1, false, 0, false, false);
 
 			destroyObject = false;
@@ -21462,7 +_,7 @@
 			if (type == 138) {
 				ushort type2 = Main.tile[k, num4 - 1].type;
 				ushort type3 = Main.tile[k + 1, num4 - 1].type;
-				if (!TileID.Sets.BasicChest[type2] && !TileID.Sets.BasicChest[type3] && type2 != 88 && type3 != 88 && !TileID.Sets.BasicChestFake[type2] && !TileID.Sets.BasicChestFake[type3] && !SolidTileAllowBottomSlope(k, num4 + 2) && !SolidTileAllowBottomSlope(k + 1, num4 + 2))
+				if (!TileID.Sets.BasicChest[type2] && !TileID.Sets.BasicChest[type3] && !TileLoader.IsDresser(type2) && !TileLoader.IsDresser(type3) && !TileID.Sets.BasicChestFake[type2] && !TileID.Sets.BasicChestFake[type3] && !SolidTileAllowBottomSlope(k, num4 + 2) && !SolidTileAllowBottomSlope(k + 1, num4 + 2))
 					flag = true;
 			}
 			else if (type == 132) {
@@ -21651,7 +_,7 @@
 					num13 = 3896;
 			}
 
-			if (num13 != 0)
+			if (TileLoader.Drop(i, j, type) && num13 != 0)
 				Item.NewItem(i * 16, j * 16, 32, 32, num13, 1, false, 0, false, false);
 
 			if (type == 138 && !gen && Main.netMode != 1)
@@ -21676,7 +_,7 @@
 			}
 
 			k = j - k / 18;
-			return TileID.Sets.BasicChest[Main.tile[num, k - 1].type] || TileID.Sets.BasicChest[Main.tile[num + 1, k - 1].type] || TileID.Sets.BasicChestFake[Main.tile[num, k - 1].type] || TileID.Sets.BasicChestFake[Main.tile[num + 1, k - 1].type] || Main.tile[num, k - 1].type == 88 || Main.tile[num + 1, k - 1].type == 88;
+			return TileID.Sets.BasicChest[Main.tile[num, k - 1].type] || TileID.Sets.BasicChest[Main.tile[num + 1, k - 1].type] || TileID.Sets.BasicChestFake[Main.tile[num, k - 1].type] || TileID.Sets.BasicChestFake[Main.tile[num + 1, k - 1].type] || TileLoader.IsDresser(Main.tile[num, k - 1].type) || TileLoader.IsDresser(Main.tile[num + 1, k - 1].type);
 		}
 
 		public static void OreRunner(int i, int j, double strength, int steps, ushort type) {
@@ -21712,7 +_,7 @@
 
 				for (int k = num3; k < num4; k++) {
 					for (int l = num5; l < num6; l++) {
-						if ((double)(Math.Abs((float)k - value.X) + Math.Abs((float)l - value.Y)) < strength * 0.5 * (1.0 + genRand.Next(-10, 11) * 0.015) && Main.tile[k, l].active() && (Main.tile[k, l].type == 0 || Main.tile[k, l].type == 1 || Main.tile[k, l].type == 23 || Main.tile[k, l].type == 25 || Main.tile[k, l].type == 40 || Main.tile[k, l].type == 53 || Main.tile[k, l].type == 57 || Main.tile[k, l].type == 59 || Main.tile[k, l].type == 60 || Main.tile[k, l].type == 70 || Main.tile[k, l].type == 109 || Main.tile[k, l].type == 112 || Main.tile[k, l].type == 116 || Main.tile[k, l].type == 117 || Main.tile[k, l].type == 147 || Main.tile[k, l].type == 161 || Main.tile[k, l].type == 163 || Main.tile[k, l].type == 164 || Main.tileMoss[Main.tile[k, l].type] || Main.tile[k, l].type == 199 || Main.tile[k, l].type == 200 || Main.tile[k, l].type == 203 || Main.tile[k, l].type == 234)) {
+						if ((double)(Math.Abs((float)k - value.X) + Math.Abs((float)l - value.Y)) < strength * 0.5 * (1.0 + genRand.Next(-10, 11) * 0.015) && Main.tile[k, l].active() && (TileID.Sets.CanBeClearedDuringOreRunner[Main.tile[k, l].type] || Main.tileMoss[Main.tile[k, l].type])) {
 							Main.tile[k, l].type = type;
 							SquareTileFrame(k, l, true);
 							if (Main.netMode == 2)
@@ -21885,7 +_,7 @@
 				if (!Main.tile[l, j].active() || Main.tile[l, j].type != type || Main.tile[l, j].frameX != (l - k) * 18 + num2 || Main.tile[l, j].frameY != 0)
 					flag = true;
 
-				if (Main.tile[l, j - 1].active() && (TileID.Sets.BasicChest[Main.tile[l, j - 1].type] || TileID.Sets.BasicChestFake[Main.tile[l, j - 1].type] || Main.tile[l, j - 1].type == 88))
+				if (Main.tile[l, j - 1].active() && (TileID.Sets.BasicChest[Main.tile[l, j - 1].type] || TileID.Sets.BasicChestFake[Main.tile[l, j - 1].type] || TileLoader.IsDresser(Main.tile[l, j - 1].type)))
 					return;
 
 				if (!SolidTileAllowBottomSlope(l, j + 1))
@@ -21895,7 +_,7 @@
 			if (flag) {
 				short arg_167_0 = Main.tile[i, j].frameX;
 				destroyObject = true;
-				if (type == 235)
+				if (TileLoader.Drop(i, j, type) && type == 235)
 					Item.NewItem(i * 16, j * 16, 32, 32, 1263, 1, false, 0, false, false);
 
 				for (int m = k; m < k + 3; m++) {
@@ -21995,6 +_,9 @@
 					}
 				}
 
+				if (!TileLoader.Drop(i, j, type))
+					goto skipDrop;
+				
 				if (type == 14) {
 					int type2;
 					if (num5 >= 1 && num5 <= 3)
@@ -22347,6 +_,7 @@
 						Item.NewItem(i * 16, j * 16, 32, 32, 989, 1, false, 0, false, false);
 				}
 
+				skipDrop:
 				destroyObject = false;
 				for (int num9 = k - 1; num9 < k + 4; num9++) {
 					for (int num10 = num4 - 1; num10 < num4 + 4; num10++) {
@@ -22394,6 +_,9 @@
 					}
 				}
 
+				if (!TileLoader.Drop(i, j, type))
+					goto skipDrop;
+
 				if (type == 101) {
 					int type2;
 					if (num == 1)
@@ -22466,6 +_,7 @@
 					Item.NewItem(i * 16, j * 16, 32, 32, 3813, 1, false, 0, false, false);
 				}
 
+				skipDrop:
 				destroyObject = false;
 				for (int num5 = num2 - 1; num5 < num2 + 4; num5++) {
 					for (int num6 = num3 - 1; num6 < num3 + 4; num6++) {
@@ -22513,12 +_,16 @@
 					}
 				}
 
+				if (!TileLoader.Drop(i, j, type))
+					goto skipDrop;
+
 				if (type == 464)
 					Item.NewItem(i * 16, j * 16, 32, 32, 3814, 1, false, 0, false, false);
 
 				if (type == 466)
 					Item.NewItem(i * 16, j * 16, 32, 32, 3816, 1, false, 0, false, false);
 
+				skipDrop:
 				destroyObject = false;
 				for (int num5 = num2 - 1; num5 < num2 + 6; num5++) {
 					for (int num6 = num3 - 1; num6 < num3 + 5; num6++) {
@@ -22561,6 +_,9 @@
 					}
 				}
 
+				if (!TileLoader.Drop(i, j, type))
+					goto skipDrop;
+
 				if (type == 275)
 					Item.NewItem(i * 16, j * 16, 32, 32, 2162, 1, false, 0, false, false);
 
@@ -22603,6 +_,7 @@
 				if (type == 359)
 					Item.NewItem(i * 16, j * 16, 32, 32, 3071, 1, false, 0, false, false);
 
+				skipDrop:
 				destroyObject = false;
 				for (int num4 = num - 1; num4 < num + 7; num4++) {
 					for (int num5 = num2 - 1; num5 < num2 + 4; num5++) {
@@ -22894,6 +_,9 @@
 					}
 				}
 
+				if (!TileLoader.Drop(i, j, type))
+					goto skipDrop;
+
 				int type2 = 928;
 				switch (num) {
 					case 1:
@@ -22909,6 +_,8 @@
 				}
 
 				Item.NewItem(i * 16, j * 16, 32, 32, type2, 1, false, 0, false, false);
+
+				skipDrop:
 				destroyObject = false;
 				for (int num7 = k; num7 < k + 4; num7++) {
 					for (int num8 = l; num8 < l + 3; num8++) {
@@ -23009,7 +_,8 @@
 					if (Main.tile[l, m] == null)
 						Main.tile[l, m] = new Tile();
 
-					if (Main.tile[l, m].active() && (Main.tile[l, m].type == 139 || Main.tile[l, m].type == 35)) {
+					if (Main.tile[l, m].active() && (Main.tile[l, m].type == 139 || Main.tile[l, m].type == 35
+						|| TileLoader.IsModMusicBox(Main.tile[l, m]))) {
 						if (Main.tile[l, m].frameX < 36) {
 							Tile expr_E9 = Main.tile[l, m];
 							expr_E9.frameX += 36;
@@ -23160,6 +_,9 @@
 					}
 				}
 
+				// size ???
+				if (!TileLoader.Drop(i, j, type))
+					goto skipDrop;
 				if (type == 35)
 					Item.NewItem(i * 16, j * 16, 32, 32, 1813, 1, false, 0, false, false);
 				else if (num == 28)
@@ -23190,7 +_,8 @@
 					Item.NewItem(i * 16, j * 16, 32, 32, 1596 + num - 13, 1, false, 0, false, false);
 				else
 					Item.NewItem(i * 16, j * 16, 32, 32, 562 + num, 1, false, 0, false, false);
-
+				
+				skipDrop:
 				for (int num7 = num4 - 1; num7 < num4 + 3; num7++) {
 					for (int num8 = num5 - 1; num8 < num5 + 3; num8++) {
 						TileFrame(num7, num8, false, false);
@@ -23311,8 +_,8 @@
 		}
 
 		public static bool PlaceObject(int x, int y, int type, bool mute = false, int style = 0, int alternate = 0, int random = -1, int direction = -1) {
-			if (type >= 470)
-				return false;
+			//if (type >= 470)
+			//	return false;
 
 			TileObject toBePlaced;
 			if (!TileObject.CanPlace(x, y, type, style, direction, out toBePlaced, false))
@@ -23486,7 +_,9 @@
 			if (point.Y == 0)
 				type2 = 3239;
 
+			if (TileLoader.Drop(x, y, type))
-			Item.NewItem(x * 16, y * 16, num * 16, num2 * 16, type2, 1, false, 0, false, false);
+				Item.NewItem(x * 16, y * 16, num * 16, num2 * 16, type2, 1, false, 0, false, false);
+
 			for (int k = x - 1; k < x + num + 1; k++) {
 				for (int l = y - 1; l < y + num2 + 1; l++) {
 					TileFrame(k, l, false, false);
@@ -23541,7 +_,9 @@
 			if (point.Y == 0)
 				type2 = 3240;
 
+			if (TileLoader.Drop(x, y, type))
-			Item.NewItem(x * 16, y * 16, width * 16, height * 16, type2, 1, false, 0, false, false);
+				Item.NewItem(x * 16, y * 16, width * 16, height * 16, type2, 1, false, 0, false, false);
+
 			for (int l = x - 1; l < x + width + 1; l++) {
 				for (int m = y - 1; m < y + height + 1; m++) {
 					TileFrame(l, m, false, false);
@@ -23871,7 +_,7 @@
 				}
 			}
 
-			if (type == 88) {
+			if (TileLoader.IsDresser(type)) {
 				int num2 = Chest.CreateChest(x - 1, y - 1, -1);
 				if (num2 == -1)
 					flag2 = false;
@@ -24058,6 +_,9 @@
 					}
 				}
 
+				if (!TileLoader.Drop(i, j, type))
+					goto skipDrop;
+
 				if (type == 254) {
 					if (frameX >= 72) {
 						if (frameX < 108) {
@@ -24227,6 +_,7 @@
 						Item.NewItem(i * 16, j * 16, 32, 32, num7, 1, false, 0, false, false);
 				}
 
+				skipDrop:
 				destroyObject = false;
 				for (int num8 = l - 1; num8 < l + 3; num8++) {
 					for (int num9 = num - 1; num9 < num + 3; num9++) {
@@ -24586,6 +_,8 @@
 					}
 				}
 
+				if (!TileLoader.Drop(i, j, type))
+					goto skipDrop;
 				if (type == 454) {
 					switch (Main.rand.Next(9)) {
 						case 2:
@@ -24722,6 +_,7 @@
 					Item.NewItem(i * 16, j * 16, 32, 32, type2, 1, false, 0, false, false);
 				}
 
+				skipDrop:
 				destroyObject = false;
 				for (int num19 = k - 1; num19 < k + num + 1; num19++) {
 					for (int num20 = l - 1; num20 < l + 4; num20++) {
@@ -24790,6 +_,9 @@
 					}
 				}
 
+				if (!TileLoader.Drop(num, j, type))
+					goto skipDrop;
+
 				if (type == 106) {
 					Item.NewItem(i * 16, j * 16, 32, 32, 363, 1, false, 0, false, false);
 				}
@@ -24864,6 +_,7 @@
 					NPC.SpawnOnPlayer(plr, 222);
 				}
 
+				skipDrop:
 				destroyObject = false;
 				for (int num16 = k - 1; num16 < k + 4; num16++) {
 					for (int num17 = num6 - 1; num17 < num6 + 4; num17++) {
@@ -25078,7 +_,9 @@
 					}
 				}
 
+				if (TileLoader.Drop(i, j, type))
-				Item.NewItem(i * 16, j * 16, 32, 32, 63, 1, false, 0, false, false);
+					Item.NewItem(i * 16, j * 16, 32, 32, 63, 1, false, 0, false, false);
+
 				destroyObject = false;
 			}
 		}
@@ -25204,7 +_,7 @@
 				}
 			}
 
-			if (!Main.tile[num2, num].nactive() || Main.tile[num2, num].halfBrick() || Main.tile[num2, num].slope() != 0 || Main.tile[num2, num].type != 53 && Main.tile[num2, num].type != 112 && Main.tile[num2, num].type != 116 && Main.tile[num2, num].type != 234) {
+			if (!Main.tile[num2, num].nactive() || Main.tile[num2, num].halfBrick() || Main.tile[num2, num].slope() != 0 || Main.tile[num2, num].type != 53 && Main.tile[num2, num].type != 112 && Main.tile[num2, num].type != 116 && Main.tile[num2, num].type != 234 && !TileLoader.CanGrowModCactus(Main.tile[num2, num].type)) {
 				KillTile(i, j, false, false, false);
 				return true;
 			}
@@ -25215,7 +_,7 @@
 					return true;
 				}
 			}
-			else if (i == num2 && (!Main.tile[i, j + 1].active() || Main.tile[i, j + 1].type != 80 && Main.tile[i, j + 1].type != 53 && Main.tile[i, j + 1].type != 112 && Main.tile[i, j + 1].type != 116 && Main.tile[i, j + 1].type != 234)) {
+			else if (i == num2 && (!Main.tile[i, j + 1].active() || Main.tile[i, j + 1].type != 80 && Main.tile[i, j + 1].type != 53 && Main.tile[i, j + 1].type != 112 && Main.tile[i, j + 1].type != 116 && Main.tile[i, j + 1].type != 234 && !TileLoader.CanGrowModCactus(Main.tile[i, j + 1].type))) {
 				KillTile(i, j, false, false, false);
 				return true;
 			}
@@ -25283,6 +_,9 @@
 				}
 
 				if (Main.netMode != 1 && !noTileActions) {
+					if (TileLoader.Drop(num, num2, type))
+						goto skipDrop;
+
 					if (type == 12) {
 						Item.NewItem(num * 16, num2 * 16, 32, 32, 29, 1, false, 0, false, false);
 					}
@@ -25371,6 +_,7 @@
 
 						AchievementsHelper.NotifyProgressionEvent(7);
 					}
+					skipDrop:
 				}
 
 				if (flag)
@@ -25406,6 +_,9 @@
 			if (num2 == 112)
 				num2 = 53;
 
+			if (TileLoader.CanGrowModPalmTree(num2))
+				num2 = 53;
+
 			if (num2 != 53 && num2 != type)
 				KillTile(i, j, false, false, false);
 
@@ -25475,6 +_,9 @@
 			if (num4 == 199)
 				num4 = 2;
 
+			if (TileLoader.CanGrowModTree(num4))
+				num4 = 2;
+
 			if (num4 != 2 && num4 != type && (Main.tile[i, j].frameX == 0 && Main.tile[i, j].frameY <= 130 || Main.tile[i, j].frameX == 22 && Main.tile[i, j].frameY <= 130 || Main.tile[i, j].frameX == 44 && Main.tile[i, j].frameY <= 130))
 				KillTile(i, j, false, false, false);
 
@@ -25766,7 +_,7 @@
 						int type = Main.tile[k, l].type;
 						int wall = Main.tile[k, l].wall;
 						if (conversionType == 4) {
-							if (type <= 470 && wall <= 231) {
+							if (true) {//if (type <= 470 && wall <= 231) {
 								if (WallID.Sets.Conversion.Grass[wall] && wall != 81) {
 									Main.tile[k, l].wall = 81;
 									SquareWallFrame(k, l, true);
@@ -25832,7 +_,7 @@
 							}
 						}
 						else if (conversionType == 2) {
-							if (type <= 470 && wall <= 231) {
+							if (true) {//if (type <= 470 && wall <= 231) {
 								if (WallID.Sets.Conversion.Grass[wall] && wall != 70) {
 									Main.tile[k, l].wall = 70;
 									SquareWallFrame(k, l, true);
@@ -25898,7 +_,7 @@
 							}
 						}
 						else if (conversionType == 1) {
-							if (type <= 470 && wall <= 231) {
+							if (true) {//if (type <= 470 && wall <= 231) {
 								if (WallID.Sets.Conversion.Grass[wall] && wall != 69) {
 									Main.tile[k, l].wall = 69;
 									SquareWallFrame(k, l, true);
@@ -26252,10 +_,10 @@
 			if (Main.tile[i, j - 1].liquid > 0)
 				return;
 
-			if (Main.tile[i, j].type != 53 && Main.tile[i, j].type != 80 && Main.tile[i, j].type != 234 && Main.tile[i, j].type != 112 && Main.tile[i, j].type != 116)
+			if (Main.tile[i, j].type != 53 && Main.tile[i, j].type != 80 && Main.tile[i, j].type != 234 && Main.tile[i, j].type != 112 && Main.tile[i, j].type != 116 && !TileLoader.CanGrowModCactus(Main.tile[i, j].type))
 				return;
 
-			if (Main.tile[i, j].type == 53 || Main.tile[i, j].type == 112 || Main.tile[i, j].type == 116 || Main.tile[i, j].type == 234) {
+			if (Main.tile[i, j].type == 53 || Main.tile[i, j].type == 112 || Main.tile[i, j].type == 116 || Main.tile[i, j].type == 234 || TileLoader.CanGrowModCactus(Main.tile[i, j].type)) {
 				if (Main.tile[i, j - 1].active() || Main.tile[i - 1, j - 1].active() || Main.tile[i + 1, j - 1].active())
 					return;
 
@@ -26271,7 +_,7 @@
 										return;
 								}
 
-								if (Main.tile[k, l].type == 53 || Main.tile[k, l].type == 112 || Main.tile[k, l].type == 116 || Main.tile[k, l].type == 234)
+								if (Main.tile[k, l].type == 53 || Main.tile[k, l].type == 112 || Main.tile[k, l].type == 116 || Main.tile[k, l].type == 234 || TileLoader.CanGrowModCactus(Main.tile[k, l].type))
 									num4++;
 							}
 						}
@@ -26456,6 +_,10 @@
 			}
 
 			if (flag) {
+				// size ???
+				if (!TileLoader.Drop(num, num2, type))
+					goto skipDrop;
+
 				destroyObject = true;
 				if (num >= 7 && num <= 9)
 					Main.PlaySound(6, i * 16, j * 16, 1, 1f, 0f);
@@ -26906,7 +_,8 @@
 						}
 					}
 				}
-
+				
+				skipDrop:
 				destroyObject = false;
 			}
 		}
@@ -26934,6 +_,9 @@
 			if (num != -1 && Main.netMode == 1 && type == 467)
 				NetMessage.SendData(34, -1, -1, null, 4, x, y, style, 0, 0, 0);
 
+			if (num != 1 && Main.netMode == 1 && type >= TileID.Count && TileID.Sets.BasicChest[type])
+				NetMessage.SendData(34, -1, -1, null, 100, x, y, style, 0, type, 0);
+
 			return num;
 		}
 
@@ -27056,7 +_,9 @@
 					}
 				}
 
+				if (TileLoader.Drop(i, j, type))
-				Item.NewItem(i * 16, j * 16, 32, 32, type2, 1, false, 0, false, false);
+					Item.NewItem(i * 16, j * 16, 32, 32, type2, 1, false, 0, false, false);
+
 				destroyObject = false;
 				if (Main.tile[k, num + 2].type == 138 || Main.tile[k + 1, num + 2].type == 138)
 					SquareTileFrame(k, num + 2, true);
@@ -27244,8 +_,8 @@
 		}
 
 		public static bool PlaceTile(int i, int j, int type, bool mute = false, bool forced = false, int plr = -1, int style = 0) {
-			if (type >= 470)
-				return false;
+			//if (type >= 470)
+			//	return false;
 
 			bool result = false;
 			if (i >= 0 && j >= 0 && i < Main.maxTilesX && j < Main.maxTilesY) {
@@ -27245,7 +_,7 @@
 							if (style != 8 && style != 11)
 								return false;
 						}
-						else if (type == 3 || type == 20 || type == 24 || type == 27 || type == 32 || type == 51 || type == 69 || type == 72 || type == 201 || type == 352) {
+						else if (type == 3 || TileLoader.IsSapling(type) || type == 24 || type == 27 || type == 32 || type == 51 || type == 69 || type == 72 || type == 201 || type == 352) {
 							return false;
 						}
 					}
@@ -27420,7 +_,7 @@
 							SquareTileFrame(i, j, true);
 						}
 					}
-					else if (type == 4) {
+					else if (TileLoader.IsTorch(type)) {
 						if (Main.tile[i - 1, j] == null)
 							Main.tile[i - 1, j] = new Tile();
 
@@ -27543,7 +_,7 @@
 						PlaceOnTable1x1(i, j, type, style);
 						SquareTileFrame(i, j, true);
 					}
-					else if (type == 14 || type == 26 || type == 86 || type == 87 || type == 88 || type == 89 || type == 114 || type == 186 || type == 187 || type == 215 || type == 217 || type == 218 || type == 377) {
+					else if (type == 14 || type == 26 || type == 86 || type == 87 || TileLoader.IsDresser(type) || type == 89 || type == 114 || type == 186 || type == 187 || type == 215 || type == 217 || type == 218 || type == 377) {
 						Place3x2(i, j, (ushort)type, style);
 						SquareTileFrame(i, j, true);
 					}
@@ -27555,12 +_,14 @@
 						PlaceJunglePlant(i, j, (ushort)type, 0, 0);
 						SquareTileFrame(i, j, true);
 					}
-					else if (type == 20) {
+					else if (TileLoader.IsSapling(type)) {
 						if (Main.tile[i, j + 1] == null)
 							Main.tile[i, j + 1] = new Tile();
 
 						int type2 = Main.tile[i, j + 1].type;
+						int dummyType = TileID.Saplings;
+						int dummyStyle = 0;
-						if (Main.tile[i, j + 1].active() && (type2 == 2 || type2 == 109 || type2 == 147 || type2 == 60 || type2 == 23 || type2 == 199 || type2 == 53 || type2 == 234 || type2 == 116 || type2 == 112)) {
+						if (Main.tile[i, j + 1].active() && (type2 == 2 || type2 == 109 || type2 == 147 || type2 == 60 || type2 == 23 || type2 == 199 || type2 == 53 || type2 == 234 || type2 == 116 || type2 == 112 || TileLoader.SaplingGrowthType(type2, ref dummyType, ref dummyStyle))) {
 							Place1x2(i, j, (ushort)type, style);
 							SquareTileFrame(i, j, true);
 						}
@@ -27686,6 +_,9 @@
 					else if (type == 314) {
 						Minecart.PlaceTrack(tile, style);
 					}
+					else if (type >= TileID.Count && TileObjectData.GetTileData(type, style) != null) {
+						PlaceObject(i, j, type, mute, style);
+					}
 					else {
 						tile.active(true);
 						tile.type = (ushort)type;
@@ -27735,7 +_,9 @@
 					if (tile.wall == 87 && !NPC.downedGolemBoss)
 						fail = true;
 
+					WallLoader.KillWall(i, j, tile.wall, ref fail);
+					if (!WallLoader.KillSound(i, j, tile.wall)) {}
-					if (tile.wall == 21 || tile.wall == 186 || tile.wall == 136 || tile.wall == 137 || tile.wall == 168 || tile.wall == 169 || tile.wall == 172 || tile.wall == 226 || tile.wall == 227)
+					else if (tile.wall == 21 || tile.wall == 186 || tile.wall == 136 || tile.wall == 137 || tile.wall == 168 || tile.wall == 169 || tile.wall == 172 || tile.wall == 226 || tile.wall == 227)
 						Main.PlaySound(13, i * 16, j * 16, 1, 1f, 0f);
 					else if (tile.wall >= 63 && tile.wall <= 70)
 						Main.PlaySound(6, i * 16, j * 16, 1, 1f, 0f);
@@ -27746,6 +_,7 @@
 					if (fail)
 						num = 3;
 
+					WallLoader.NumDust(i, j, tile.wall, fail, ref num);
 					for (int k = 0; k < num; k++) {
 						int num2 = 0;
 						if (tile.wall == 148)
@@ -28109,6 +_,9 @@
 						else if (tile.wall == 17 || tile.wall == 18 || tile.wall == 19)
 							num2 = 1;
 
+						if (!WallLoader.CreateDust(i, j, tile.wall, ref num2))
+							continue;
+
 						if (tile.wall == 44) {
 							int num3 = Dust.NewDust(new Vector2(i * 16, j * 16), 16, 16, 66, 0f, 0f, 100, new Color(Main.DiscoR, Main.DiscoG, Main.DiscoB), 0.75f);
 							Main.dust[num3].noGravity = true;
@@ -28507,13 +_,13 @@
 					if (tile.wall >= 138 && tile.wall <= 141)
 						num4 = 2210 + tile.wall - 138;
 
-					if (num4 > 0)
+					if (WallLoader.Drop(i, j, tile.wall, ref num4) && num4 > 0)
 						Item.NewItem(i * 16, j * 16, 16, 16, num4, 1, false, 0, false, false);
 
 					tile.wall = 0;
 					tile.wallColor(0);
 					SquareWallFrame(i, j, true);
-					if (tile.type >= 0 && tile.type < 470 && TileID.Sets.FramesOnKillWall[tile.type])
+					if (tile.type >= 0 && TileID.Sets.FramesOnKillWall[tile.type])
 						TileFrame(i, j, false, false);
 				}
 			}
@@ -28730,6 +_,9 @@
 			if (!tile.active())
 				return false;
 
+			if (!TileLoader.CanKillTile(i, j, tile.type, ref blockDamaged))
+				return false;
+
 			if (j >= 1)
 				tile2 = Main.tile[i, j - 1];
 
@@ -28590,7 +_,7 @@
 						goto IL_12B;
 					}
 				}
-				else if (num != 72 && num != 88) {
+				else if (num != 72 && !TileLoader.IsDresser(num)) {
 					if (num != 323)
 						goto IL_12B;
 
@@ -28619,7 +_,7 @@
 					return false;
 				}
 			}
-			else if (type2 != 88) {
+			else if (!TileLoader.IsDresser(type2)) {
 				if (type2 != 138) {
 					if (type2 == 235) {
 						int num2 = i - tile.frameX % 54 / 18;
@@ -28655,7 +_,7 @@
 					if (j >= 1 && Main.tile[i, j - 1] == null)
 						Main.tile[i, j - 1] = new Tile();
 
-					if (j >= 1 && Main.tile[i, j - 1].active() && (Main.tile[i, j - 1].type == 5 && tile.type != 5 || Main.tile[i, j - 1].type == 323 && tile.type != 323 || TileID.Sets.BasicChest[Main.tile[i, j - 1].type] && !TileID.Sets.BasicChest[tile.type] || Main.tile[i, j - 1].type == 323 && tile.type != 323 || Main.tile[i, j - 1].type == 88 && tile.type != 88 || Main.tile[i, j - 1].type == 26 && tile.type != 26 || Main.tile[i, j - 1].type == 72 && tile.type != 72)) {
+					if (j >= 1 && Main.tile[i, j - 1].active() && (Main.tile[i, j - 1].type == 5 && tile.type != 5 || Main.tile[i, j - 1].type == 323 && tile.type != 323 || TileID.Sets.BasicChest[Main.tile[i, j - 1].type] && !TileID.Sets.BasicChest[tile.type] || Main.tile[i, j - 1].type == 323 && tile.type != 323 || TileLoader.IsDresser(Main.tile[i, j - 1].type) && !TileLoader.IsDresser(tile.type) || Main.tile[i, j - 1].type == 26 && tile.type != 26 || Main.tile[i, j - 1].type == 72 && tile.type != 72)) {
 						if (Main.tile[i, j - 1].type == 5) {
 							if ((Main.tile[i, j - 1].frameX != 66 || Main.tile[i, j - 1].frameY < 0 || Main.tile[i, j - 1].frameY > 44) && (Main.tile[i, j - 1].frameX != 88 || Main.tile[i, j - 1].frameY < 66 || Main.tile[i, j - 1].frameY > 110) && Main.tile[i, j - 1].frameY < 198)
 								return;
@@ -28675,18 +_,20 @@
 						int frameX = tile.frameX;
 						int num = i - frameX % 54 / 18;
 						for (int k = 0; k < 3; k++) {
-							if (Main.tile[num + k, j - 1].active() && (TileID.Sets.BasicChest[Main.tile[num + k, j - 1].type] || TileID.Sets.BasicChestFake[Main.tile[num + k, j - 1].type] || Main.tile[num + k, j - 1].type == 88)) {
+							if (Main.tile[num + k, j - 1].active() && (TileID.Sets.BasicChest[Main.tile[num + k, j - 1].type] || TileID.Sets.BasicChestFake[Main.tile[num + k, j - 1].type] || TileLoader.IsDresser(Main.tile[num + k, j - 1].type))) {
 								fail = true;
 								break;
 							}
 						}
 					}
 
+					TileLoader.KillTile(i, j, tile.type, ref fail, ref effectOnly, ref noItem);
 					if (!effectOnly && !stopDrops) {
 						if (!noItem && FixExploitManEaters.SpotProtected(i, j))
 							return;
 
+						if (!TileLoader.KillSound(i, j, tile.type)) { }
-						if (tile.type == 127) {
+						else if (tile.type == 127) {
 							Main.PlaySound(SoundID.Item27, i * 16, j * 16);
 						}
 						else if (tile.type == 147 || tile.type == 224) {
@@ -28851,7 +_,7 @@
 						}
 					}
 
-					int num13 = KillTile_GetTileDustAmount(fail, tile);
+					int num13 = KillTile_GetTileDustAmount(fail, tile, i, j);
 					for (int num14 = 0; num14 < num13; num14++) {
 						KillTile_MakeTileDust(i, j, tile);
 					}
@@ -28885,7 +_,7 @@
 							return;
 					}
 
-					if (tile.type == 88 && Main.netMode != 1) {
+					if (TileLoader.IsDresser(tile.type) && Main.netMode != 1) {
 						int num16 = tile.frameX / 18;
 						int y2 = j - tile.frameY / 18;
 						num16 %= 3;
@@ -28912,6 +_,7 @@
 						}
 
 						if (tile.type == 73) {
+							//patch file: num17, num18
 							num17 = 200;
 							num18 = 50;
 							if (tile.frameX >= 108) {
@@ -28957,6 +_,7 @@
 							num19 = 10;
 						}
 
+						TileLoader.DropCritterChance(i, j, tile.type, ref num17, ref num18, ref num19);
 						if (num17 > 0 && NPC.CountNPCS(357) < 5 && genRand.Next(num17) == 0) {
 							int type = 357;
 							if (genRand.Next(NPC.goldCritterChance) == 0)
@@ -29227,7 +_,7 @@
 										}
 
 										if (Main.tile[i, num29] != null) {
-											if (Main.tile[i, num29].type == 2 || Main.tile[i, num29].type == 109 || Main.tile[i, num29].type == 147 || Main.tile[i, num29].type == 199 || Main.tile[i, num29].type == 23) {
+											if (Main.tile[i, num29].type == 2 || Main.tile[i, num29].type == 109 || Main.tile[i, num29].type == 147 || Main.tile[i, num29].type == 199 || Main.tile[i, num29].type == 23 || TileLoader.CanDropAcorn(Main.tile[i, num29].type)) {
 												num23 = 9;
 												num24 = 27;
 											}
@@ -29272,6 +_,7 @@
 
 								if (Main.tile[num30, num31].active()) {
 									ushort type4 = Main.tile[num30, num31].type;
+									//patch file: type4
 									if (type4 <= 70) {
 										if (type4 != 23) {
 											if (type4 != 60) {
@@ -29298,6 +_,8 @@
 									else {
 										num23 = 621;
 									}
+
+									TileLoader.DropTreeWood(type4, ref num23);
 								}
 
 								int num32 = Player.FindClosest(new Vector2(num30 * 16, num31 * 16), 16, 16);
@@ -29318,6 +_,7 @@
 
 							if (Main.tile[i, num33].active()) {
 								ushort type4 = Main.tile[i, num33].type;
+								//patch file: type4
 								if (type4 != 112) {
 									if (type4 != 116) {
 										if (type4 == 234)
@@ -29330,6 +_,8 @@
 								else {
 									num23 = 619;
 								}
+
+								TileLoader.DropPalmTreeWood(type4, ref num23);
 							}
 						}
 						else if (tile.type == 408) {
@@ -30252,7 +_,8 @@
 							num23 = 2504;
 						}
 
-						if (num23 > 0) {
+						bool vanillaDrop = TileLoader.Drop(i, j, tile.type);
+						if (vanillaDrop && num23 > 0) {
 							int num45 = 1;
 							if (flag)
 								num45++;
@@ -30260,7 +_,7 @@
 							Item.NewItem(i * 16, j * 16, 16, 16, num23, num45, false, -1, false, false);
 						}
 
-						if (num24 > 0)
+						if (vanillaDrop && num24 > 0)
 							Item.NewItem(i * 16, j * 16, 16, 16, num24, 1, false, -1, false, false);
 					}
 
@@ -30291,7 +_,7 @@
 			}
 		}
 
-		public static int KillTile_GetTileDustAmount(bool fail, Tile tileCache) {
+		public static int KillTile_GetTileDustAmount(bool fail, Tile tileCache, int i, int j) {
 			int result = 10;
 			if (tileCache.type == 231)
 				result = 6;
@@ -30571,6 +_,7 @@
 			if (tileCache.type == 376)
 				result = 0;
 
+			TileLoader.NumDust(i, j, tileCache.type, fail, ref result);
 			return result;
 		}
 
@@ -31112,8 +_,11 @@
 						if (Main.tile[num13, num14].active() && Main.tile[num13, num14].type == 199)
 							num = 121;
 
+						//patch file: num13, num14
 						if (Main.tile[num13, num14].active() && Main.tile[num13, num14].type == 147)
 							num = 122;
+
+						TileLoader.TreeDust(Main.tile[num13, num14], ref num);
 					}
 				}
 			}
@@ -31133,8 +_,11 @@
 						if (Main.tile[i, num15].active() && Main.tile[i, num15].type == 116)
 							num = 79;
 
+						//patch file: num15
 						if (Main.tile[i, num15].active() && Main.tile[i, num15].type == 112)
 							num = 77;
+
+						TileLoader.PalmTreeDust(Main.tile[i, num15], ref num);
 					}
 				}
 			}
@@ -31805,7 +_,7 @@
 
 			flag = true;
 		IL_2622:
-			if (num < 0)
+			if (!TileLoader.CreateDust(i, j, tileCache.type, ref num) || num < 0) // TODO, fix
 				return 6000;
 
 			if (tileCache.type == 352 && num == 5) {
@@ -33517,6 +_,7 @@
 		}
 
 		public static void UpdateWorld() {
+			WorldHooks.PreUpdate();
 			int num = 20;
 			int maxValue = 40;
 			if (Main.expertMode)
@@ -33448,6 +_,7 @@
 
 				int num7 = genRand.Next(10, Main.maxTilesX - 10);
 				int num8 = genRand.Next(10, (int)Main.worldSurface - 1);
+				//patch file: num7, num8
 				int num9 = num7 - 1;
 				int num10 = num7 + 2;
 				int num11 = num8 - 1;
@@ -34022,6 +_,9 @@
 							}
 						}
 					}
+
+					TileLoader.RandomUpdate(num7, num8, Main.tile[num7, num8].type);
+					WallLoader.RandomUpdate(num7, num8, Main.tile[num7, num8].wall);
 				}
 
 				num6++;
@@ -34604,13 +_,15 @@
 					}
 
 					SpreadDesertWalls(num, num64, num65);
+					TileLoader.RandomUpdate(num64, num65, Main.tile[num64, num65].type);
+					WallLoader.RandomUpdate(num64, num65, Main.tile[num64, num65].wall);
 				}
 
 				num63++;
 			}
 
 			if (!Main.dayTime) {
-				float num143 = Main.maxTilesX / 4200;
+				float num143 = Main.maxTilesX / 4200f; // Selfish fix for falling stars on extra small worlds
 				if (Main.rand.Next(8000) < 10f * num143) {
 					int num144 = 12;
 					int num145 = Main.rand.Next(Main.maxTilesX - 50) + 100;
@@ -34627,6 +_,8 @@
 					Projectile.NewProjectile(vector.X, vector.Y, num147, num148, 12, 1000, 10f, Main.myPlayer, 0f, 0f);
 				}
 			}
+
+			WorldHooks.PostUpdate();
 		}
 
 		private static void TrySpawningTownNPC(int x, int y) {
@@ -34751,7 +_,7 @@
 				Main.tile[i, j] = new Tile();
 
 			if (Main.tile[i, j].wall == 0) {
-				Main.tile[i, j].wall = (byte)type;
+				Main.tile[i, j].wall = (ushort)type;
 				SquareWallFrame(i, j, true);
 				if (!mute)
 					Main.PlaySound(0, i * 16, j * 16, 1, 1f, 0f);
@@ -37846,6 +_,9 @@
 
 			if (Main.tile[i, j - 1].active()) {
 				ushort type2 = Main.tile[i, j - 1].type;
+				if (TileID.Sets.BasicChest[type2])
+					return false;
+
 				if (type2 <= 77) {
 					if (type2 <= 21) {
 						if (type2 != 5 && type2 != 21)
@@ -38277,7 +_,10 @@
 						Liquid.AddWater(i, j);
 
 					if (tile.active()) {
-						if (noBreak && Main.tileFrameImportant[tile.type] && tile.type != 4)
+						if (!TileLoader.TileFrame(i, j, tile.type, ref resetFrame, ref noBreak))
+							return;
+
+						if (noBreak && Main.tileFrameImportant[tile.type] && !TileLoader.IsTorch(tile.type))
 							return;
 
 						int num = tile.type;
@@ -38266,7 +_,7 @@
 						int frameY = tile.frameY;
 						Rectangle rectangle = new Rectangle(-1, -1, 0, 0);
 						if (Main.tileFrameImportant[tile.type]) {
-							if (num == 4) {
+							if (TileLoader.IsTorch(num)) {
 								Tile tile2 = Main.tile[i, j - 1];
 								Tile tile3 = Main.tile[i, j + 1];
 								Tile tile4 = Main.tile[i - 1, j];
@@ -39000,7 +_,7 @@
 							else if (num == 106 || num == 212 || num == 219 || num == 220 || num == 228 || num == 231 || num == 243 || num == 247 || num == 283 || num >= 300 && num <= 308 || num == 354 || num == 406 || num == 412 || num == 355 || num == 452 || num == 455) {
 								Check3x3(i, j, (ushort)num);
 							}
-							else if (num == 15 || num == 20 || num == 216 || num == 338 || num == 390) {
+							else if (num == 15 || TileLoader.IsSapling(num) || num == 216 || num == 338 || num == 390) {
 								Check1x2(i, j, (ushort)num);
 							}
 							else if (num == 14 || num == 469 || num == 17 || num == 26 || num == 77 || num == 86 || num == 87 || num == 377 || num == 88 || num == 89 || num == 114 || num == 133 || num == 186 || num == 187 || num == 215 || num == 217 || num == 218 || num == 237 || num == 244 || num == 285 || num == 286 || num == 298 || num == 299 || num == 310 || num == 339 || num >= 361 && num <= 364 || num >= 391 && num <= 394 || num == 405) {
@@ -39018,7 +_,7 @@
 							else if (num == 13 || num == 33 || num == 50 || num == 78 || num == 174 || num == 372) {
 								CheckOnTable1x1(i, j, (byte)num);
 							}
-							else if (TileID.Sets.BasicChest[num]) {
+							else if (TileID.Sets.BasicChest[num] && num < TileID.Count) {
 								CheckChest(i, j, num);
 							}
 							else if (num == 128) {
@@ -39146,6 +_,9 @@
 							else if (num == 323) {
 								CheckPalmTree(i, j);
 							}
+							else {
+								TileLoader.CheckModTile(i, j, num);
+							}
 
 							return;
 						}
@@ -39259,17 +_,17 @@
 								num59 = -1;
 							}
 
-							if (num == 147) {
+							if (TileID.Sets.Snow[num]) {
 								TileMergeAttempt(num, Main.tileBrick, TileID.Sets.Ices, ref num56, ref num61, ref num58, ref num59, ref num55, ref num57, ref num60, ref num62);
 							}
-							else if (num == 161 || num == 163 || num == 164 || num == 200) {
+							else if (TileID.Sets.Ices[num]) {
 								TileMergeAttempt(num, Main.tileBrick, TileID.Sets.Snow, ref num56, ref num61, ref num58, ref num59, ref num55, ref num57, ref num60, ref num62);
 							}
 							else if (num == 162) {
 								TileMergeAttempt(num, Main.tileBrick, TileID.Sets.IcesSnow, ref num56, ref num61, ref num58, ref num59, ref num55, ref num57, ref num60, ref num62);
 							}
 							else if (Main.tileBrick[num]) {
-								if (num == 60 || num == 70)
+								if (TileID.Sets.GrassSpecial[num])
 									TileMergeAttempt(num, Main.tileBrick, TileID.Sets.Mud, ref num56, ref num61, ref num58, ref num59, ref num55, ref num57, ref num60, ref num62);
 								else
 									TileMergeAttempt(num, Main.tileBrick, ref num56, ref num61, ref num58, ref num59, ref num55, ref num57, ref num60, ref num62);
@@ -39278,14 +_,14 @@
 								TileMergeAttempt(num, Main.tilePile, ref num56, ref num61, ref num58, ref num59, ref num55, ref num57, ref num60, ref num62);
 							}
 
-							if ((num == 1 || Main.tileMoss[num] || num == 117 || num == 25 || num == 203) && num61 == 165) {
+							if ((TileID.Sets.Stone[num] || Main.tileMoss[num]) && num61 == 165) {
 								if (tile3.frameY == 72)
 									num61 = num;
 								else if (tile3.frameY == 0)
 									num61 = num;
 							}
 
-							if ((num == 1 || Main.tileMoss[num] || num == 117 || num == 25 || num == 203) && num56 == 165) {
+							if ((TileID.Sets.Stone[num] || Main.tileMoss[num]) && num56 == 165) {
 								if (tile2.frameY == 90)
 									num56 = num;
 								else if (tile2.frameY == 54)
@@ -39300,7 +_,7 @@
 									num56 = num;
 							}
 
-							if ((num == 200 || num == 161 || num == 163 || num == 164) && num61 == 165)
+							if (TileID.Sets.Ices[num] && num61 == 165)
 								num61 = num;
 
 							if ((tile.slope() == 1 || tile.slope() == 2) && num61 > -1 && !TileID.Sets.Platforms[num61])
@@ -39417,7 +_,7 @@
 									if (mergeDown)
 										num56 = num;
 								}
-								else if (num56 == 147) {
+								else if (num56 > -1 && TileID.Sets.Snow[num56]) {
 									TileFrame(i, j - 1, false, false);
 									if (mergeDown)
 										num56 = num;
@@ -39428,7 +_,7 @@
 									if (mergeUp)
 										num61 = num;
 								}
-								else if (num61 == 147) {
+								else if (num61 > -1 && TileID.Sets.Snow[num61]) {
 									TileFrame(i, j + 1, false, false);
 									if (mergeUp)
 										num61 = num;
@@ -39439,7 +_,7 @@
 									if (mergeRight)
 										num58 = num;
 								}
-								else if (num58 == 147) {
+								else if (num58 > -1 && TileID.Sets.Snow[num58]) {
 									TileFrame(i - 1, j, false, false);
 									if (mergeRight)
 										num58 = num;
@@ -39450,42 +_,42 @@
 									if (mergeLeft)
 										num59 = num;
 								}
-								else if (num59 == 147) {
+								else if (num59 > -1 && TileID.Sets.Snow[num59]) {
 									TileFrame(i + 1, j, false, false);
 									if (mergeLeft)
 										num59 = num;
 								}
 
-								if (num56 == 2 || num56 == 23 || num56 == 109 || num56 == 199)
+								if (num56 > -1 && TileID.Sets.Grass[num56])
 									num56 = num;
 
-								if (num61 == 2 || num61 == 23 || num61 == 109 || num61 == 199)
+								if (num61 > -1 && TileID.Sets.Grass[num61])
 									num61 = num;
 
-								if (num58 == 2 || num58 == 23 || num58 == 109 || num58 == 199)
+								if (num58 > -1 && TileID.Sets.Grass[num58])
 									num58 = num;
 
-								if (num59 == 2 || num59 == 23 || num59 == 109 || num59 == 199)
+								if (num59 > -1 && TileID.Sets.Grass[num59])
 									num59 = num;
 
 								if (num55 > -1 && Main.tileMergeDirt[num55])
 									num55 = num;
-								else if (num55 == 2 || num55 == 23 || num55 == 109 || num55 == 199)
+								else if (num55 > -1 && TileID.Sets.Grass[num55])
 									num55 = num;
 
 								if (num57 > -1 && Main.tileMergeDirt[num57])
 									num57 = num;
-								else if (num57 == 2 || num57 == 23 || num57 == 109 || num57 == 199)
+								else if (num57 > -1 && TileID.Sets.Grass[num57])
 									num57 = num;
 
 								if (num60 > -1 && Main.tileMergeDirt[num60])
 									num60 = num;
-								else if (num60 == 2 || num60 == 23 || num60 == 109 || num60 == 199)
+								else if (num60 > -1 && TileID.Sets.Grass[num60])
 									num60 = num;
 
 								if (num62 > -1 && Main.tileMergeDirt[num62])
 									num62 = num;
-								else if (num62 == 2 || num62 == 23 || num62 == 109 || num62 == 199)
+								else if (num62 > -1 && TileID.Sets.Grass[num62])
 									num62 = num;
 
 								TileMergeAttempt(-2, 59, ref num56, ref num61, ref num58, ref num59, ref num55, ref num57, ref num60, ref num62);
@@ -39532,14 +_,14 @@
 									TileMergeAttemptFrametest(i, j, num, 57, ref num56, ref num61, ref num58, ref num59, ref num55, ref num57, ref num60, ref num62);
 								}
 							}
-							else if (num == 58 || num == 76 || num == 75) {
+							else if (TileID.Sets.HellSpecial[num]) {
 								TileMergeAttempt(-2, 57, ref num56, ref num61, ref num58, ref num59, ref num55, ref num57, ref num60, ref num62);
 							}
 							else if (num == 57) {
 								TileMergeAttempt(-2, 1, ref num56, ref num61, ref num58, ref num59, ref num55, ref num57, ref num60, ref num62);
 								TileMergeAttemptFrametest(i, j, num, TileID.Sets.HellSpecial, ref num56, ref num61, ref num58, ref num59, ref num55, ref num57, ref num60, ref num62);
 							}
-							else if (num == 59) {
+							else if (TileID.Sets.Mud[num]) {
 								if (j > Main.rockLayer)
 									TileMergeAttempt(-2, 1, ref num56, ref num61, ref num58, ref num59, ref num55, ref num57, ref num60, ref num62);
 
@@ -39566,10 +_,10 @@
 							else if (num == 196) {
 								TileMergeAttempt(-2, 189, ref num56, ref num61, ref num58, ref num59, ref num55, ref num57, ref num60, ref num62);
 							}
-							else if (num == 147) {
+							else if (TileID.Sets.Snow[num]) {
 								TileMergeAttemptFrametest(i, j, num, TileID.Sets.IcesSlush, ref num56, ref num61, ref num58, ref num59, ref num55, ref num57, ref num60, ref num62);
 							}
-							else if (num == 161 || num == 163 || num == 164 || num == 200 || num == 224) {
+							else if (TileID.Sets.IcesSlush[num]) {
 								TileMergeAttempt(-2, 147, ref num56, ref num61, ref num58, ref num59, ref num55, ref num57, ref num60, ref num62);
 							}
 							else if (num == 162) {
@@ -39669,11 +_,11 @@
 								mergeRight = true;
 							}
 
-							if (num == 2 || num == 23 || num == 60 || num == 70 || num == 109 || num == 199 || Main.tileMoss[num] || TileID.Sets.NeedsGrassFraming[num]) {
+							if (TileID.Sets.Grass[num] || TileID.Sets.GrassSpecial[num] || Main.tileMoss[num] || TileID.Sets.NeedsGrassFraming[num]) {
 								flag8 = true;
 								TileMergeAttemptWeird(num, -1, Main.tileSolid, ref num56, ref num61, ref num58, ref num59, ref num55, ref num57, ref num60, ref num62);
 								int num66 = TileID.Sets.NeedsGrassFramingDirt[num];
-								if (num == 60 || num == 70)
+								if (TileID.Sets.GrassSpecial[num])
 									num66 = 59;
 								else if (Main.tileMoss[num])
 									num66 = 1;
@@ -40926,7 +_,7 @@
 									}
 								}
 								else {
-									if (num != 2 && num != 23 && num != 60 && num != 70 && num != 109 && num != 199) {
+									if (!TileID.Sets.Grass[num] && !TileID.Sets.GrassSpecial[num]) {
 										if (num56 == -1 && num61 == -2 && num58 == num && num59 == num) {
 											if (num63 == 0) {
 												rectangle.X = 234;
@@ -41429,7 +_,7 @@
 								if (!flag8)
 									TileMergeAttemptWeird(num, -1, Main.tileSolid, ref num56, ref num61, ref num58, ref num59, ref num55, ref num57, ref num60, ref num62);
 
-								if (num == 2 || num == 23 || num == 60 || num == 70 || num == 109 || num == 199 || Main.tileMoss[num])
+								if (TileID.Sets.Grass[num] || TileID.Sets.GrassSpecial[num] || Main.tileMoss[num])
 									TileMergeAttempt(num, -2, ref num56, ref num61, ref num58, ref num59, ref num55, ref num57, ref num60, ref num62);
 
 								if (num56 == num && num61 == num && num58 == num && num59 == num) {
@@ -41792,7 +_,7 @@
 								if (Main.netMode == 0) {
 									if (tile3 != null && !tile3.active()) {
 										bool flag18 = true;
-										if (tile2.active() && (TileID.Sets.BasicChest[tile2.type] || TileID.Sets.BasicChestFake[tile2.type] || tile2.type == 323 || tile2.type == 88))
+										if (tile2.active() && (TileID.Sets.BasicChest[tile2.type] || TileID.Sets.BasicChestFake[tile2.type] || tile2.type == 323 || TileLoader.IsDresser(tile2.type)))
 											flag18 = false;
 
 										if (flag18) {
@@ -41845,7 +_,7 @@
 								}
 								else if (Main.netMode == 2 && tile3 != null && !tile3.active()) {
 									bool flag19 = true;
-									if (tile2.active() && (TileID.Sets.BasicChest[tile2.type] || TileID.Sets.BasicChestFake[tile2.type] || tile2.type == 323 || tile2.type == 88))
+									if (tile2.active() && (TileID.Sets.BasicChest[tile2.type] || TileID.Sets.BasicChestFake[tile2.type] || tile2.type == 323 || TileLoader.IsDresser(tile2.type)))
 										flag19 = false;
 
 									if (flag19) {
@@ -41914,7 +_,11 @@
 
 							if (rectangle.X != frameX && rectangle.Y != frameY && frameX >= 0 && frameY >= 0) {
 								tileReframeCount++;
+#if DEBUG
+								if (tileReframeCount < 20) {
+#else
 								if (tileReframeCount < 55) {
+#endif
 									bool flag21 = mergeUp;
 									bool flag22 = mergeDown;
 									bool flag23 = mergeLeft;
