--- src/Terraria/Terraria/WorldGen.cs
+++ src/tModLoader/Terraria/WorldGen.cs
@@ -23,6 +_,8 @@
 using Terraria.ObjectData;
 using Terraria.Utilities;
 using Terraria.WorldBuilding;
+using Terraria.ModLoader;
+using Terraria.ModLoader.IO;
 #if CLIENT
 using Terraria.Map;
 #endif
@@ -666,7 +_,13 @@
 		private static Queue<Action<StructureMap>> _postGenActions = new Queue<Action<StructureMap>>();
 		public static int tileReframeCount;
 		public static bool noMapUpdate;
+		public static StructureMap structures;
+		public static double worldSurface;
 		public static double worldSurfaceLow;
+		public static double worldSurfaceHigh;
+		public static double rockLayer;
+		public static double rockLayerLow;
+		public static double rockLayerHigh;
 		public static int tLeft;
 		public static int tRight;
 		public static int tTop;
@@ -1219,7 +_,7 @@
 			}
 
 			int num2 = -1;
-			for (int j = 0; j < 663; j++) {
+			for (int i = 0; i < Main.townNPCCanSpawn.Length; i++) {
 				if (!Main.townNPCCanSpawn[j] || !CheckSpecialTownNPCSpawningConditions(j))
 					continue;
 
@@ -1245,6 +_,8 @@
 		}
 
 		public static bool CheckSpecialTownNPCSpawningConditions(int type) {
+			if (!NPCLoader.CheckConditions(type))
+				return false;
 			if (type == 160) {
 				if ((double)roomY2 > Main.worldSurface)
 					return false;
@@ -1644,6 +_,7 @@
 				}
 			}
 
+			WorldHooks.PreWorldGen();
 			if (roomChair && roomTable && roomDoor && roomTorch)
 				canSpawn = true;
 			else
@@ -1806,7 +_,7 @@
 			if (num7 >= Main.maxTilesY - 5)
 				num7 = Main.maxTilesY - 6;
 
-			int[] tileTypeCounts = new int[623];
+			int[] tileTypeCounts = new int[TileLoader.TileCount];
 			CountTileTypesInArea(tileTypeCounts, num4 + 1, num5 - 1, num6 + 2, num7 + 1);
 			int num8 = -GetTileTypeCountByCategory(tileTypeCounts, TileScanGroup.TotalGoodEvil);
 			if (num8 < 50)
@@ -1937,7 +_,7 @@
 			roomY2 = y;
 			numRoomTiles = 0;
 			roomCeilingsCount = 0;
-			for (int i = 0; i < 623; i++) {
+			for (int i = 0; i < houseTile.Length; i++) {
 				houseTile[i] = false;
 			}
 
@@ -2010,6 +_,8 @@
 				houseTile[Main.tile[x, y].type] = true;
 				if (Main.tileSolid[Main.tile[x, y].type] || (Main.tile[x, y].type == 11 && (Main.tile[x, y].frameX == 0 || Main.tile[x, y].frameX == 54 || Main.tile[x, y].frameX == 72 || Main.tile[x, y].frameX == 126)) || Main.tile[x, y].type == 389 || (Main.tile[x, y].type == 386 && ((Main.tile[x, y].frameX < 36 && Main.tile[x, y].frameY == 18) || (Main.tile[x, y].frameX >= 36 && Main.tile[x, y].frameY == 0))))
 					return;
+				if (TileLoader.CloseDoorID(Main.tile[x, y]) >= 0 && (Main.tile[x, y].frameX == 0 || Main.tile[x, y].frameX == 54 || Main.tile[x, y].frameX == 72 || Main.tile[x, y].frameX == 126))
+					return;
 			}
 
 			if (x < roomX1)
@@ -2276,10 +_,20 @@
 		}
 
 		public static void worldGenCallback(object threadContext) {
+			try {
+				do_worldGenCallBack(threadContext);
+			}
+			catch (Exception e) {
+				Logging.Terraria.Error(Language.GetTextValue("tModLoader.WorldGenError"), e);
+			}
+		}
+
+		public static void do_worldGenCallBack(object threadContext) {
 			SoundEngine.PlaySound(10);
 			clearWorld();
 			GenerateWorld(Main.ActiveWorldFileData.Seed, threadContext as GenerationProgress);
 			WorldFile.SaveWorld(Main.ActiveWorldFileData.IsCloudSave, resetTime: true);
+			BackupIO.archiveLock = false;
 			if (Main.menuMode == 10 || Main.menuMode == 888)
 				Main.menuMode = 6;
 
@@ -2373,10 +_,21 @@
 
 		public static void SaveAndQuit(Action callback = null) {
 			SoundEngine.PlaySound(11);
+			ModHooks.PreSaveAndQuit();
 			ThreadPool.QueueUserWorkItem(SaveAndQuitCallBack, callback);
 		}
 
 		public static void playWorldCallBack(object threadContext) {
+			try {
+				Logging.Terraria.InfoFormat("Loading World: {0}, IsCloud={1}", Main.ActiveWorldFileData.Name, Main.ActiveWorldFileData.IsCloudSave);
+				do_playWorldCallBack(threadContext);
+			}
+			catch (Exception e) {
+				Logging.Terraria.Error(Language.GetTextValue("tModLoader.PlayerLoadWorldFail"), e);
+			}
+		}
+
+		public static void do_playWorldCallBack(object threadContext) {
 			if (Main.rand == null)
 				Main.rand = new UnifiedRandom((int)DateTime.Now.Ticks);
 
@@ -2406,13 +_,20 @@
 					}
 
 					if (!worldBackup) {
-						Console.WriteLine(Language.GetTextValue("Error.LoadFailedNoBackup"));
+						string message = Language.GetTextValue("Error.LoadFailedNoBackup");
+						if (WorldIO.customDataFail != null) {
+							message = WorldIO.customDataFail.modName + " " + message;
+							message += "\n" + WorldIO.customDataFail.InnerException;
+						}
+
+						Console.WriteLine(message);
 						return;
 					}
 
 					FileUtilities.Copy(Main.worldPathName, Main.worldPathName + ".bad", isCloudSave);
 					FileUtilities.Copy(Main.worldPathName + ".bak", Main.worldPathName, isCloudSave);
 					FileUtilities.Delete(Main.worldPathName + ".bak", isCloudSave);
+					WorldIO.LoadDedServBackup(Main.worldPathName, isCloudSave);
 					WorldFile.LoadWorld(Main.ActiveWorldFileData.IsCloudSave);
 					if (loadFailed || !loadSuccess) {
 						WorldFile.LoadWorld(Main.ActiveWorldFileData.IsCloudSave);
@@ -2420,7 +_,14 @@
 							FileUtilities.Copy(Main.worldPathName, Main.worldPathName + ".bak", isCloudSave);
 							FileUtilities.Copy(Main.worldPathName + ".bad", Main.worldPathName, isCloudSave);
 							FileUtilities.Delete(Main.worldPathName + ".bad", isCloudSave);
-							Console.WriteLine(Language.GetTextValue("Error.LoadFailed"));
+							WorldIO.RevertDedServBackup(Main.worldPathName, isCloudSave);
+							string message = Language.GetTextValue("Error.LoadFailed");
+							if (WorldIO.customDataFail != null) {
+								message = WorldIO.customDataFail.modName + " " + message;
+								message += "\n" + WorldIO.customDataFail.InnerException;
+							}
+
+							Console.WriteLine(message);
 							return;
 						}
 					}
@@ -2447,6 +_,12 @@
 			if (Main.netMode == 0 && Main.anglerWhoFinishedToday.Contains(Main.player[Main.myPlayer].name))
 				Main.anglerQuestFinished = true;
 
+			// Move rest of method to main thread to fix concurrent modification exceptions
+			Main.OnTick += FinishPlayWorld;
+		}
+
+		internal static void FinishPlayWorld() {
+			Main.OnTick -= FinishPlayWorld;
 			Main.player[Main.myPlayer].Spawn(PlayerSpawnContext.SpawningIntoWorld);
 			Main.ActivePlayerFileData.StartPlayTimer();
 			_lastSeed = Main.ActiveWorldFileData.Seed;
@@ -2478,6 +_,7 @@
 		}
 
 		public static void serverLoadWorldCallBack() {
+			Logging.Terraria.InfoFormat("Loading World: {0}, IsCloud={1}", Main.ActiveWorldFileData.Name, Main.ActiveWorldFileData.IsCloudSave);
 			Main.rand = new UnifiedRandom((int)DateTime.Now.Ticks);
 			WorldFile.LoadWorld(Main.ActiveWorldFileData.IsCloudSave);
 			if (loadFailed || !loadSuccess) {
@@ -2740,6 +_,7 @@
 
 			setWorldSize();
 			Star.SpawnStars();
+			WorldHooks.SetupWorld();
 			worldCleared = true;
 		}
 
@@ -5386,17 +_,18 @@
 			Main.lockMenuBGChange = true;
 			WorldGenConfiguration configuration = WorldGenConfiguration.FromEmbeddedPath("Terraria.GameContent.WorldBuilding.Configuration.json");
 			Hooks.ProcessWorldGenConfig(ref configuration);
+			Logging.Terraria.InfoFormat("Generating World: {0}", Main.ActiveWorldFileData.Name);
 			_lastSeed = seed;
 			_generator = new WorldGenerator(seed, configuration);
 			_genRand = new UnifiedRandom(seed);
 			Main.rand = new UnifiedRandom(seed);
-			StructureMap structures = new StructureMap();
+			structures = new StructureMap();
-			worldSurfaceLow = 0.0;
+			worldSurface = 0.0;
 			double worldSurface = 0.0;
-			double worldSurfaceHigh = 0.0;
+			worldSurfaceHigh = 0.0;
-			double rockLayerLow = 0.0;
+			rockLayer = 0.0;
-			double rockLayer = 0.0;
+			rockLayerLow = 0.0;
-			double rockLayerHigh = 0.0;
+			rockLayerHigh = 0.0;
 			int copper = 7;
 			int iron = 6;
 			int silver = 9;
@@ -8028,7 +_,7 @@
 								int num541 = genRand.Next(num526 - num534, num526 + num534 + 1);
 								int num542 = genRand.Next(num527 - num535, num527 + num535 - 2);
 								PlaceTile(num541, num542, 4, mute: true, forced: false, -1, 3);
-								if (Main.tile[num541, num542].type == 4)
+								if (TileLoader.IsTorch(Main.tile[num386, num387].type))
 									flag35 = true;
 							}
 
@@ -11077,7 +_,7 @@
 							}
 						}
 
-						if (TileID.Sets.BasicChest[Main.tile[num52, num53].type]) {
+						if (TileID.Sets.BasicChest[Main.tile[num21, num22].type] && Main.tile[num21, num22].type < TileID.Count) {
 							int num81 = Main.tile[num52, num53].frameX / 18;
 							int num82 = 0;
 							ushort type = 21;
@@ -11266,7 +_,7 @@
 			});
 
 			AddGenerationPass("Micro Biomes", delegate (GenerationProgress progress, GameConfiguration passConfig) {
-				progress.Message = Lang.gen[76].Value;
+				progress.Message = Lang.gen[76].Value + "..Thin Ice";
 				_ = (float)(Main.maxTilesX * Main.maxTilesY) / 5040000f;
 				float num27 = 10f;
 				if (getGoodWorldGen)
@@ -11317,6 +_,7 @@
 					}
 				}
 
+				progress.Message = Lang.gen[76] + "..Corruption Pits";
 				progress.Set(0.2f);
 				progress.Set(3f / num27);
 				if (!notTheBees) {
@@ -11356,6 +_,7 @@
 					num38++;
 				}
 
+				progress.Message = Lang.gen[76] + "..Mahogany Trees";
 				progress.Set(0.4f);
 				progress.Set(6f / num27);
 				progress.Set(7f / num27);
@@ -11380,6 +_,7 @@
 				}
 
 				progress.Set(8f / num27);
+				progress.Message = Lang.gen[76] + "..Campsites";
 				random6 = passConfig.Get<WorldGenRange>("StandardTrackCount").GetRandom(genRand);
 				worldGenRange = passConfig.Get<WorldGenRange>("StandardTrackLength");
 				int num42 = 0;
@@ -11404,6 +_,8 @@
 					}
 				}
 
+				progress.Message = Lang.gen[76] + "..Minecart Tracks";
+				progress.Set(0.5f);
 				progress.Set(1f);
 			});
 
@@ -11713,11 +_,14 @@
 				progress.Message = Lang.gen[87].Value;
 			});
 
+			WorldHooks.ModifyWorldGenTasks(_generator._passes, ref _generator._totalLoadWeight);
 			_generator.GenerateWorld(customProgressObject);
 			ConsumePostGenActions(structures);
+			WorldHooks.PostWorldGen();
 			Main.WorldFileMetadata = FileMetadata.FromCurrentSettings(FileType.World);
 			Main.NotifyOfEvent(GameNotificationType.WorldGen);
 			drunkWorldGenText = false;
+			BackupIO.archiveLock = true;
 		}
 
 		private static void NotTheBees() {
@@ -12360,7 +_,7 @@
 			if (tile2.wall != 0 || tile2.liquid != 0)
 				return false;
 
-			if (tile.type != 53 && tile.type != 234 && tile.type != 116 && tile.type != 112)
+			if (tile.type != 53 && tile.type != 234 && tile.type != 116 && tile.type != 112 && !TileLoader.CanGrowModPalmTree(tile.type))
 				return false;
 
 			if (!EmptyTileCheck(i, i, num - 2, num - 1, 20))
@@ -12422,10 +_,11 @@
 
 		public static bool GrowEpicTree(int i, int y) {
 			int j;
-			for (j = y; Main.tile[i, j].type == 20; j++) {
+			for (j = y; TileLoader.IsSapling(Main.tile[i, j].type); j++) {
+			for (j = y; TileLoader.IsSapling(Main.tile[i, j].type); j++) {
 			}
 
-			if (Main.tile[i, j].active() && !Main.tile[i, j].halfBrick() && Main.tile[i, j].slope() == 0 && Main.tile[i, j].type == 2 && Main.tile[i, j - 1].wall == 0 && Main.tile[i, j - 1].liquid == 0 && ((Main.tile[i - 1, j].active() && (Main.tile[i - 1, j].type == 2 || Main.tile[i - 1, j].type == 23 || Main.tile[i - 1, j].type == 60 || Main.tile[i - 1, j].type == 109)) || (Main.tile[i + 1, j].active() && (Main.tile[i + 1, j].type == 2 || Main.tile[i + 1, j].type == 23 || Main.tile[i + 1, j].type == 60 || Main.tile[i + 1, j].type == 109)))) {
+			if (Main.tile[i, j].active() && !Main.tile[i, j].halfBrick() && Main.tile[i, j].slope() == 0 && Main.tile[i, j].type == 2 && Main.tile[i, j - 1].wall == 0 && Main.tile[i, j - 1].liquid == 0 && ((Main.tile[i - 1, j].active() && (Main.tile[i - 1, j].type == 2 || Main.tile[i - 1, j].type == 23 || Main.tile[i - 1, j].type == 60 || Main.tile[i - 1, j].type == 109 || TileLoader.CanGrowModTree(Main.tile[i - 1, j].type))) || (Main.tile[i + 1, j].active() && (Main.tile[i + 1, j].type == 2 || Main.tile[i + 1, j].type == 23 || Main.tile[i + 1, j].type == 60 || Main.tile[i + 1, j].type == 109 || TileLoader.CanGrowModTree(Main.tile[i + 1, j].type))))) {
 				int num = 2;
 				if (EmptyTileCheck(i - num, i + num, j - 55, j - 1, 20)) {
 					bool flag = false;
@@ -12652,10 +_,10 @@
 					int num5 = genRand.Next(3);
 					bool flag3 = false;
 					bool flag4 = false;
-					if (Main.tile[i - 1, j].active() && !Main.tile[i - 1, j].halfBrick() && Main.tile[i - 1, j].slope() == 0 && (Main.tile[i - 1, j].type == 2 || Main.tile[i - 1, j].type == 23 || Main.tile[i - 1, j].type == 60 || Main.tile[i - 1, j].type == 109))
+					if (Main.tile[i - 1, j].active() && !Main.tile[i - 1, j].halfBrick() && Main.tile[i - 1, j].slope() == 0 && (Main.tile[i - 1, j].type == 2 || Main.tile[i - 1, j].type == 23 || Main.tile[i - 1, j].type == 60 || Main.tile[i - 1, j].type == 109 || TileLoader.CanGrowModTree(Main.tile[i - 1, j].type)))
 						flag3 = true;
 
-					if (Main.tile[i + 1, j].active() && !Main.tile[i + 1, j].halfBrick() && Main.tile[i + 1, j].slope() == 0 && (Main.tile[i + 1, j].type == 2 || Main.tile[i + 1, j].type == 23 || Main.tile[i + 1, j].type == 60 || Main.tile[i + 1, j].type == 109))
+					if (Main.tile[i + 1, j].active() && !Main.tile[i + 1, j].halfBrick() && Main.tile[i + 1, j].slope() == 0 && (Main.tile[i + 1, j].type == 2 || Main.tile[i + 1, j].type == 23 || Main.tile[i + 1, j].type == 60 || Main.tile[i + 1, j].type == 109 || TileLoader.CanGrowModTree(Main.tile[i + 1, j].type)))
 						flag4 = true;
 
 					if (!flag3) {
@@ -14649,14 +_,14 @@
 
 		public static bool GrowTree(int i, int y) {
 			int j;
-			for (j = y; Main.tile[i, j].type == 20; j++) {
+			for (j = y; TileLoader.IsSapling(Main.tile[i, j].type); j++) {
 			}
 
 			if ((Main.tile[i - 1, j - 1].liquid != 0 || Main.tile[i, j - 1].liquid != 0 || Main.tile[i + 1, j - 1].liquid != 0) && !notTheBees)
 				return false;
 
-			if (Main.tile[i, j].nactive() && !Main.tile[i, j].halfBrick() && Main.tile[i, j].slope() == 0 && IsTileTypeFitForTree(Main.tile[i, j].type) && (Main.tile[i, j - 1].wall == 0 || Main.tile[i, j - 1].wall == 106 || Main.tile[i, j - 1].wall == 107 || (Main.tile[i, j - 1].wall >= 138 && Main.tile[i, j - 1].wall <= 141) || Main.tile[i, j - 1].wall == 145 || Main.tile[i, j - 1].wall == 150 || Main.tile[i, j - 1].wall == 152 || Main.tile[i, j - 1].wall == 80) && ((Main.tile[i - 1, j].active() && IsTileTypeFitForTree(Main.tile[i - 1, j].type)) || (Main.tile[i + 1, j].active() && IsTileTypeFitForTree(Main.tile[i + 1, j].type)))) {
 				byte color = Main.tile[i, j].color();
+			if (Main.tile[i, j].nactive() && !Main.tile[i, j].halfBrick() && Main.tile[i, j].slope() == 0 && (Main.tile[i, j].type == 2 || Main.tile[i, j].type == 23 || Main.tile[i, j].type == 60 || Main.tile[i, j].type == 109 || Main.tile[i, j].type == 147 || Main.tile[i, j].type == 199 || Main.tile[i, j].type == 70 || TileLoader.CanGrowModTree(Main.tile[i, j].type)) && (Main.tile[i, j - 1].wall == 0 || Main.tile[i, j - 1].wall == 106 || Main.tile[i, j - 1].wall == 107 || Main.tile[i, j - 1].wall >= 138 && Main.tile[i, j - 1].wall <= 141 || Main.tile[i, j - 1].wall == 145 || Main.tile[i, j - 1].wall == 150 || Main.tile[i, j - 1].wall == 152) && (Main.tile[i - 1, j].active() && (Main.tile[i - 1, j].type == 2 || Main.tile[i - 1, j].type == 23 || Main.tile[i - 1, j].type == 60 || Main.tile[i - 1, j].type == 109 || Main.tile[i - 1, j].type == 147 || Main.tile[i - 1, j].type == 199 || Main.tile[i - 1, j].type == 70 || TileLoader.CanGrowModTree(Main.tile[i - 1, j].type)) || Main.tile[i + 1, j].active() && (Main.tile[i + 1, j].type == 2 || Main.tile[i + 1, j].type == 23 || Main.tile[i + 1, j].type == 60 || Main.tile[i + 1, j].type == 109 || Main.tile[i + 1, j].type == 147 || Main.tile[i + 1, j].type == 199 || Main.tile[i + 1, j].type == 70 || TileLoader.CanGrowModTree(Main.tile[i + 1, j].type)))) {
 				int num = 2;
 				int num2 = genRand.Next(5, 17);
 				int num3 = num2 + 4;
@@ -15763,10 +_,10 @@
 			int num6 = genRand.Next(3);
 			bool flag3 = false;
 			bool flag4 = false;
-			if (Main.tile[i - 1, y].nactive() && !Main.tile[i - 1, y].halfBrick() && Main.tile[i - 1, y].slope() == 0 && (Main.tile[i - 1, y].type == 2 || Main.tile[i - 1, y].type == 23 || Main.tile[i - 1, y].type == 60 || Main.tile[i - 1, y].type == 109 || Main.tile[i - 1, y].type == 147))
+					if (Main.tile[i - 1, j].nactive() && !Main.tile[i - 1, j].halfBrick() && Main.tile[i - 1, j].slope() == 0 && (Main.tile[i - 1, j].type == 2 || Main.tile[i - 1, j].type == 23 || Main.tile[i - 1, j].type == 60 || Main.tile[i - 1, j].type == 109 || Main.tile[i - 1, j].type == 147 || Main.tile[i - 1, j].type == 199 || TileLoader.CanGrowModTree(Main.tile[i - 1, j].type)))
 				flag3 = true;
 
-			if (Main.tile[i + 1, y].nactive() && !Main.tile[i + 1, y].halfBrick() && Main.tile[i + 1, y].slope() == 0 && (Main.tile[i + 1, y].type == 2 || Main.tile[i + 1, y].type == 23 || Main.tile[i + 1, y].type == 60 || Main.tile[i + 1, y].type == 109 || Main.tile[i + 1, y].type == 147))
+					if (Main.tile[i + 1, j].nactive() && !Main.tile[i + 1, j].halfBrick() && Main.tile[i + 1, j].slope() == 0 && (Main.tile[i + 1, j].type == 2 || Main.tile[i + 1, j].type == 23 || Main.tile[i + 1, j].type == 60 || Main.tile[i + 1, j].type == 109 || Main.tile[i + 1, j].type == 147 || Main.tile[i + 1, j].type == 199 || TileLoader.CanGrowModTree(Main.tile[i + 1, j].type)))
 				flag4 = true;
 
 			if (!flag3) {
@@ -16105,6 +_,7 @@
 		}
 
 		public static void smCallBack(object threadContext) {
+			List<GenPass> hardmodetasks = new List<GenPass>();
 			IsGeneratingHardMode = true;
 			if (Main.rand == null)
 				Main.rand = new UnifiedRandom((int)DateTime.Now.Ticks);
@@ -16137,8 +_,15 @@
 				num3 = (int)((float)Main.maxTilesX * (1f - num2));
 			}
 
-			GERunner(num3, 0, 3 * num5, 5f);
-			GERunner(num4, 0, 3 * -num5, 5f, good: false);
+			hardmodetasks.Add(new PassLegacy("Hardmode Good", delegate (GenerationProgress progress) {
+				GERunner(num3, 0, 3 * num5, 5f, true);
+			}));
+
+			hardmodetasks.Add(new PassLegacy("Hardmode Evil", delegate (GenerationProgress progress) {
+				GERunner(num4, 0, 3 * -(float)num5, 5f, false);
+			}));
+
+			hardmodetasks.Add(new PassLegacy("Hardmode Walls", delegate (GenerationProgress progress) {
 			float num7 = (float)Main.maxTilesX / 4200f;
 			int num8 = (int)(25f * num7);
 			ShapeData shapeData = new ShapeData();
@@ -16168,13 +_,22 @@
 					shapeData.Clear();
 				}
 			}
+			}));
 
+			hardmodetasks.Add(new PassLegacy("Hardmode Announcment", delegate (GenerationProgress progress) {
 			if (Main.netMode == 0)
 				Main.NewText(Lang.misc[15].Value, 50, byte.MaxValue, 130);
 			else if (Main.netMode == 2)
 				ChatHelper.BroadcastChatMessage(NetworkText.FromKey(Lang.misc[15].Key), new Color(50, 255, 130));
 
 			AchievementsHelper.NotifyProgressionEvent(9);
+			}));
+
+			WorldHooks.ModifyHardmodeTasks(hardmodetasks);
+			foreach (GenPass task in hardmodetasks) {
+				task.Apply(null);
+			}
+
 			if (Main.netMode == 2)
 				Netplay.ResetSections();
 
@@ -16219,7 +_,7 @@
 
 			int frameX = Main.tile[i, j].frameX;
 			Tile tile = Main.tile[i, j];
-			if (tile.type != 11)
+			if (TileLoader.CloseDoorID(Main.tile[i, j]) < 0)
 				return false;
 
 			int num4 = tile.frameY;
@@ -16266,13 +_,14 @@
 				}
 			}
 
+			ushort closeDoorID = (ushort)TileLoader.CloseDoorID(tile);
 			for (int l = num7; l < num7 + 2; l++) {
 				for (int m = num3; m < num3 + 3; m++) {
 					if (l == num2) {
 						if (Main.tile[l, m] == null)
 							Main.tile[l, m] = new Tile();
 
-						Main.tile[l, m].type = 10;
+						Main.tile[l, m].type = closeDoorID;
 						Main.tile[l, m].frameX = (short)(genRand.Next(3) * 18 + num6);
 					}
 					else {
@@ -16436,7 +_,7 @@
 							bool flag2 = false;
 							for (int k = num6 - 8; k < num6 + 8; k++) {
 								for (int l = num7 - 8; l < num7 + 8; l++) {
-									if (Main.tile[k, l].active() && Main.tile[k, l].type == 4) {
+									if (Main.tile[k, l].active() && TileLoader.IsTorch(Main.tile[k, l].type)) {
 										flag2 = true;
 										break;
 									}
@@ -22887,10 +_,7 @@
 				Main.tile[i, j] = new Tile();
 
 			Tile tile = Main.tile[i, j];
-			if (tile.type != 10)
-				return false;
-
-			if (IsLockedDoor(tile))
+			if (TileLoader.OpenDoorID(Main.tile[i, j]) < 0)
 				return false;
 
 			short num2 = 0;
@@ -22952,8 +_,9 @@
 
 			int num8 = num4 % 36 * 54;
 			SoundEngine.PlaySound(8, i * 16, j * 16);
+			ushort openDoorID = (ushort)TileLoader.OpenDoorID(Main.tile[i, j]);
 			Main.tile[num6, num].active(active: true);
-			Main.tile[num6, num].type = 11;
+			Main.tile[num6, num].type = openDoorID;
 			Main.tile[num6, num].frameY = (short)num8;
 			Main.tile[num6, num].frameX = num2;
 			Main.tile[num6, num].color(color);
@@ -22961,7 +_,7 @@
 				Main.tile[num6 + 1, num] = new Tile();
 
 			Main.tile[num6 + 1, num].active(active: true);
-			Main.tile[num6 + 1, num].type = 11;
+			Main.tile[num6 + 1, num].type = openDoorID;
 			Main.tile[num6 + 1, num].frameY = (short)num8;
 			Main.tile[num6 + 1, num].frameX = (short)(num2 + 18);
 			Main.tile[num6 + 1, num].color(color);
@@ -22969,7 +_,7 @@
 				Main.tile[num6, num + 1] = new Tile();
 
 			Main.tile[num6, num + 1].active(active: true);
-			Main.tile[num6, num + 1].type = 11;
+			Main.tile[num6, num + 1].type = openDoorID;
 			Main.tile[num6, num + 1].frameY = (short)(num8 + 18);
 			Main.tile[num6, num + 1].frameX = num2;
 			Main.tile[num6, num + 1].color(color2);
@@ -22977,7 +_,7 @@
 				Main.tile[num6 + 1, num + 1] = new Tile();
 
 			Main.tile[num6 + 1, num + 1].active(active: true);
-			Main.tile[num6 + 1, num + 1].type = 11;
+			Main.tile[num6 + 1, num + 1].type = openDoorID;
 			Main.tile[num6 + 1, num + 1].frameY = (short)(num8 + 18);
 			Main.tile[num6 + 1, num + 1].frameX = (short)(num2 + 18);
 			Main.tile[num6 + 1, num + 1].color(color2);
@@ -22985,7 +_,7 @@
 				Main.tile[num6, num + 2] = new Tile();
 
 			Main.tile[num6, num + 2].active(active: true);
-			Main.tile[num6, num + 2].type = 11;
+			Main.tile[num6, num + 2].type = openDoorID;
 			Main.tile[num6, num + 2].frameY = (short)(num8 + 36);
 			Main.tile[num6, num + 2].frameX = num2;
 			Main.tile[num6, num + 2].color(color3);
@@ -22993,7 +_,7 @@
 				Main.tile[num6 + 1, num + 2] = new Tile();
 
 			Main.tile[num6 + 1, num + 2].active(active: true);
-			Main.tile[num6 + 1, num + 2].type = 11;
+			Main.tile[num6 + 1, num + 2].type = openDoorID;
 			Main.tile[num6 + 1, num + 2].frameY = (short)(num8 + 36);
 			Main.tile[num6 + 1, num + 2].frameX = (short)(num2 + 18);
 			Main.tile[num6 + 1, num + 2].color(color3);
@@ -23054,6 +_,9 @@
 					KillTile(x, num5 + k);
 			}
 
+			if (!TileLoader.Drop(x, j, type))
+				goto skipDrop;
+
 			if (type == 92)
 				Item.NewItem(x * 16, j * 16, 32, 32, 341);
 
@@ -23163,6 +_,7 @@
 				Item.NewItem(x * 16, j * 16, 32, 32, type2);
 			}
 
+			skipDrop:
 			destroyObject = false;
 		}
 
@@ -23259,6 +_,9 @@
 					KillTile(num + 1, num6 + m);
 			}
 
+			if (!TileLoader.Drop(num, j, type))
+				goto skipDrop;
+
 			if (type == 104) {
 				int num7 = frameX / 36;
 				int num8 = 0;
@@ -24432,7 +_,8 @@
 				}
 			}
 
+			if (TileLoader.Drop(x, y, TileID.ChristmasTree))
-			Item.NewItem(x * 16, y * 16, 32, 32, 1873);
+				Item.NewItem(x * 16, y * 16, 32, 32, 1873);
 			destroyObject = false;
 		}
 
@@ -24750,7 +_,9 @@
 			if (!SolidTileAllowBottomSlope(x, num + 2) && !TileID.Sets.Platforms[Main.tile[x, num + 2].type])
 				flag = true;
 
-			if (Main.tile[x, num].type == 20) {
+			if (TileLoader.IsSapling(Main.tile[x, num].type)) {
+				int originalType = Main.tile[x, num].type;
+				int newType = TileID.Saplings;
 				int num5 = Main.tile[x, num].frameX / 54;
 				int type2 = Main.tile[x, num + 2].type;
 				int num6 = -1;
@@ -24787,12 +_,16 @@
 					case 112:
 						num6 = 9;
 						break;
+					case int _ when TileLoader.SaplingGrowthType(type2, ref newType, ref num5):
+						break;
 					default:
 						flag = true;
 						break;
 				}
 
-				if (!flag && num5 != num6) {
+				if (!flag && (originalType != newType || num4 != num5)) {
+					Main.tile[x, num].type = (ushort)newType;
+					Main.tile[x, num + 1].type = (ushort)newType;
 					int num7 = 54 * num6;
 					num7 += genRand.Next(3) * 18;
 					Main.tile[x, num].frameX = (short)num7;
@@ -24810,6 +_,9 @@
 			if (Main.tile[x, num + 1].type == type)
 				KillTile(x, num + 1);
 
+			if (!TileLoader.Drop(x, num, type))
+				goto skipDrop;
+
 			if (type == 216)
 				Item.NewItem(x * 16, num * 16, 32, 32, 970 + num3);
 
@@ -24865,6 +_,7 @@
 					break;
 			}
 
+			skipDrop:
 			destroyObject = false;
 		}
 
@@ -25001,6 +_,9 @@
 				if (type != 395)
 					Sign.KillSign(num7, num8);
 
+				if (!TileLoader.Drop(x, y, type))
+					goto skipDrop;
+
 				switch (type) {
 					case 85: {
 							int type2 = 321;
@@ -25039,6 +_,7 @@
 						break;
 				}
 
+				skipDrop:
 				destroyObject = false;
 				return;
 			}
@@ -26542,6 +_,9 @@
 					KillTile(x, num + k);
 			}
 
+			if (!TileLoader.Drop(x, num + 1, type))
+				goto skipDrop;
+
 			if (type == 91) {
 				int num3 = frameX / 18;
 				num3 += num2 * 111;
@@ -26579,6 +_,7 @@
 					Item.NewItem(x * 16, (num + 1) * 16, 32, 32, 337 + num3);
 			}
 
+			skipDrop:
 			destroyObject = false;
 		}
 
@@ -26741,7 +_,8 @@
 				return;
 
 			destroyObject = true;
+			if (TileLoader.Drop(i, j, TileID.WeaponsRack))
-			Item.NewItem(i * 16, j * 16, 48, 48, 2699);
+				Item.NewItem(i * 16, j * 16, 48, 48, 2699);
 			for (int m = 0; m < 3; m++) {
 				for (int n = 0; n < 3; n++) {
 					int num9 = num + m;
@@ -26845,7 +_,9 @@
 				return;
 
 			destroyObject = true;
+			if (TileLoader.Drop(i, j, TileID.Mannequin))
-			Item.NewItem(i * 16, j * 16, 32, 32, 498);
+				Item.NewItem(i * 16, j * 16, 32, 32, 498);
+
 			for (int m = 0; m <= 1; m++) {
 				for (int n = 0; n <= 2; n++) {
 					int num7 = num + m;
@@ -26897,7 +_,9 @@
 				return;
 
 			destroyObject = true;
+			if (TileLoader.Drop(i, j, TileID.Womannequin))
-			Item.NewItem(i * 16, j * 16, 32, 32, 1989);
+				Item.NewItem(i * 16, j * 16, 32, 32, 1989);
+
 			for (int m = 0; m <= 1; m++) {
 				for (int n = 0; n <= 2; n++) {
 					int num7 = num + m;
@@ -26907,12 +_,13 @@
 				}
 			}
 
+			skipDrop:
 			destroyObject = false;
 		}
 
 		public static void Place1x2(int x, int y, ushort type, int style) {
 			short frameX = 0;
-			if (type == 20)
+			if (TileLoader.IsSapling(type))
 				frameX = (short)(genRand.Next(3) * 18);
 
 			if (Main.tile[x, y - 1] == null)
@@ -26998,6 +_,9 @@
 			if (Main.tile[x, num + 1].type == type)
 				KillTile(x, num + 1);
 
+			if (!TileLoader.Drop(x, num, type))
+				goto skipDrop;
+
 			switch (type) {
 				case 42: {
 						int type2 = 0;
@@ -27144,6 +_,7 @@
 					break;
 			}
 
+			skipDrop:
 			destroyObject = false;
 		}
 
@@ -27275,6 +_,9 @@
 			if (Main.tile[num + 1, y].type == type)
 				KillTile(num + 1, y);
 
+			if (!TileLoader.Drop(num3, y, type))
+				goto skipDrop;
+
 			if (type == 16) {
 				if (num3 == 1)
 					Item.NewItem(num * 16, y * 16, 32, 32, 716);
@@ -27498,6 +_,7 @@
 					break;
 			}
 
+			skipDrop:
 			destroyObject = false;
 			SquareTileFrame(num, y);
 			SquareTileFrame(num + 1, y);
@@ -27592,6 +_,8 @@
 				}
 			}
 
+			if (!TileLoader.Drop(i, j, type))
+				goto skipDrop;
 			if (type == 79) {
 				int num6 = 0;
 				switch (num3) {
@@ -27796,6 +_,7 @@
 				Item.NewItem(i * 16, j * 16, 32, 32, type2);
 			}
 
+			skipDrop:
 			destroyObject = false;
 			for (int num7 = num - 1; num7 < num + 4; num7++) {
 				for (int num8 = num2 - 1; num8 < num2 + 4; num8++) {
@@ -28112,6 +_,8 @@
 				if (!flag)
 					return;
 
+				if (!TileLoader.Drop(i, j, type))
+					goto skipDrop; // do not know the size for this
 				if (type == 238) {
 					float num6 = i * 16;
 					float num7 = j * 16;
@@ -28132,6 +_,7 @@
 				if (type == 236)
 					Item.NewItem(i * 16, j * 16, 32, 32, 1291);
 
+				skipDrop:
 				_ = Main.tile[i, j].frameX;
 				destroyObject = true;
 				for (int n = num; n < num + 2; n++) {
@@ -28425,7 +_,9 @@
 			if (type == 444 && Main.netMode != 1 && !flag6)
 				Projectile.NewProjectile(num2 * 16 + 16, num3 * 16 + 16, 0f, 0f, 655, 0, 0f, Main.myPlayer);
 
-			if (num13 != 0)
+			// FishingCrate, GeyserTrap, and BeeHive
+			// geyser is 2x1
+			if (TileLoader.Drop(num2, num3, type) && num12 != 0)
 				Item.NewItem(num2 * 16, num3 * 16, tileData.CoordinateFullWidth, tileData.CoordinateFullHeight, num13);
 
 			destroyObject = false;
@@ -28491,7 +_,7 @@
 				case 484: {
 						ushort type4 = Main.tile[num2, num6 - 1].type;
 						ushort type5 = Main.tile[num2 + 1, num6 - 1].type;
-						if (!TileID.Sets.BasicChest[type4] && !TileID.Sets.BasicChest[type5] && type4 != 88 && type5 != 88 && !TileID.Sets.BasicChestFake[type4] && !TileID.Sets.BasicChestFake[type5] && !SolidTileAllowBottomSlope(num2, num6 + 2) && !SolidTileAllowBottomSlope(num2 + 1, num6 + 2))
+						if (!TileID.Sets.BasicChest[type4] && !TileID.Sets.BasicChest[type5] && !TileLoader.IsDresser(type4) && !TileLoader.IsDresser(type5) && !TileID.Sets.BasicChestFake[type4] && !TileID.Sets.BasicChestFake[type5] && !SolidTileAllowBottomSlope(num2, num6 + 2) && !SolidTileAllowBottomSlope(num2 + 1, num6 + 2))
 							flag = true;
 
 						break;
@@ -28845,7 +_,7 @@
 				}
 			}
 
-			if (num13 != 0)
+			if (TileLoader.Drop(i, j, type) && num13 != 0)
 				Item.NewItem(i * 16, j * 16, 32, 32, num13);
 
 			if (type == 138 && !gen && Main.netMode != 1)
@@ -28873,7 +_,7 @@
 			}
 
 			num2 = j - num2 / 18;
-			if (IsAContainer(Main.tile[num, num2 - 1]) || IsAContainer(Main.tile[num + 1, num2 - 1]))
+			if (TileID.Sets.BasicChest[Main.tile[num, num2 - 1].type] || TileID.Sets.BasicChest[Main.tile[num + 1, num2 - 1].type] || TileID.Sets.BasicChestFake[Main.tile[num, num2 - 1].type] || TileID.Sets.BasicChestFake[Main.tile[num + 1, num2 - 1].type] || TileLoader.IsDresser(Main.tile[num, num2 - 1].type) || TileLoader.IsDresser(Main.tile[num + 1, num2 - 1].type))
 				return true;
 
 			return false;
@@ -28919,7 +_,7 @@
 
 				for (int k = num3; k < num4; k++) {
 					for (int l = num5; l < num6; l++) {
-						if ((double)(Math.Abs((float)k - vector.X) + Math.Abs((float)l - vector.Y)) < strength * 0.5 * (1.0 + (double)genRand.Next(-10, 11) * 0.015) && Main.tile[k, l].active() && (Main.tile[k, l].type == 0 || Main.tile[k, l].type == 1 || Main.tile[k, l].type == 23 || Main.tile[k, l].type == 25 || Main.tile[k, l].type == 40 || Main.tile[k, l].type == 53 || Main.tile[k, l].type == 57 || Main.tile[k, l].type == 59 || Main.tile[k, l].type == 60 || Main.tile[k, l].type == 70 || Main.tile[k, l].type == 109 || Main.tile[k, l].type == 112 || Main.tile[k, l].type == 116 || Main.tile[k, l].type == 117 || Main.tile[k, l].type == 147 || Main.tile[k, l].type == 161 || Main.tile[k, l].type == 163 || Main.tile[k, l].type == 164 || Main.tileMoss[Main.tile[k, l].type] || Main.tile[k, l].type == 199 || Main.tile[k, l].type == 200 || Main.tile[k, l].type == 203 || Main.tile[k, l].type == 234 || (Main.tile[k, l].type == 225 && Main.tile[k, l].wall != 108))) {
+						if ((double)(Math.Abs((float)k - vector.X) + Math.Abs((float)l - vector.Y)) < strength * 0.5 * (1.0 + genRand.Next(-10, 11) * 0.015) && Main.tile[k, l].active() && (TileID.Sets.CanBeClearedDuringOreRunner[Main.tile[k, l].type] || Main.tileMoss[Main.tile[k, l].type])) {
 							Main.tile[k, l].type = type;
 							SquareTileFrame(k, l);
 							if (Main.netMode == 2)
@@ -29113,7 +_,7 @@
 				if (!Main.tile[k, j].active() || Main.tile[k, j].type != type || Main.tile[k, j].frameX != (k - num) * 18 + num3 || Main.tile[k, j].frameY != 0)
 					flag = true;
 
-				if (Main.tile[k, j - 1].active() && (TileID.Sets.BasicChest[Main.tile[k, j - 1].type] || TileID.Sets.BasicChestFake[Main.tile[k, j - 1].type] || Main.tile[k, j - 1].type == 88 || Main.tile[k, j - 1].type == 470 || Main.tile[k, j - 1].type == 475 || Main.tile[k, j - 1].type == 597))
+				if (Main.tile[k, j - 1].active() && (TileID.Sets.BasicChest[Main.tile[k, j - 1].type] || TileID.Sets.BasicChestFake[Main.tile[k, j - 1].type] || TileLoader.IsDresser(Main.tile[k, j - 1].type)))
 					return;
 
 				if (!SolidTileAllowBottomSlope(k, j + 1))
@@ -29125,7 +_,7 @@
 
 			_ = Main.tile[i, j].frameX;
 			destroyObject = true;
-			if (type == 235)
+			if (TileLoader.Drop(i, j, type) && type == 235)
 				Item.NewItem(i * 16, j * 16, 32, 32, 1263);
 
 			for (int l = num; l < num + 3; l++) {
@@ -29278,6 +_,9 @@
 				}
 			}
 
+			if (!TileLoader.Drop(i, j, type))
+				goto skipDrop;
+				
 			if (type == 14) {
 				int type2;
 				if (num6 >= 1 && num6 <= 3) {
@@ -29720,6 +_,7 @@
 					break;
 			}
 
+			skipDrop:
 			destroyObject = false;
 			for (int num12 = num5 - 1; num12 < num5 + 4; num12++) {
 				for (int num13 = num - 1; num13 < num + 4; num13++) {
@@ -29856,6 +_,9 @@
 				}
 			}
 
+			if (!TileLoader.Drop(i, j, type))
+				goto skipDrop;
+
 			switch (type) {
 				case 101: {
 						int type3;
@@ -29999,6 +_,7 @@
 					}
 			}
 
+			skipDrop:
 			destroyObject = false;
 			for (int num7 = num - 1; num7 < num + 4; num7++) {
 				for (int num8 = num2 - 1; num8 < num2 + 4; num8++) {
@@ -30049,12 +_,16 @@
 				}
 			}
 
+			if (!TileLoader.Drop(i, j, type))
+				goto skipDrop;
+
 			if (type == 464)
 				Item.NewItem(i * 16, j * 16, 32, 32, 3814);
 
 			if (type == 466)
 				Item.NewItem(i * 16, j * 16, 32, 32, 3816);
 
+			skipDrop:
 			destroyObject = false;
 			for (int num5 = num - 1; num5 < num + 6; num5++) {
 				for (int num6 = num2 - 1; num6 < num2 + 5; num6++) {
@@ -30100,6 +_,9 @@
 				}
 			}
 
+			if (!TileLoader.Drop(i, j, type))
+				goto skipDrop;
+
 			if (type == 275)
 				Item.NewItem(i * 16, j * 16, 32, 32, 2162);
 
@@ -30205,6 +_,7 @@
 			if (type == 612)
 				Item.NewItem(i * 16, j * 16, 32, 32, 4895);
 
+			skipDrop:
 			destroyObject = false;
 			for (int num4 = num - 1; num4 < num + 7; num4++) {
 				for (int num5 = num2 - 1; num5 < num2 + 4; num5++) {
@@ -30500,6 +_,9 @@
 				}
 			}
 
+			if (!TileLoader.Drop(i, j, type))
+				goto skipDrop;
+
 			int type2 = 928;
 			switch (num2) {
 				case 1:
@@ -30515,6 +_,7 @@
 			}
 
 			Item.NewItem(i * 16, j * 16, 32, 32, type2);
+			skipDrop:
 			destroyObject = false;
 			for (int num7 = num; num7 < num + 4; num7++) {
 				for (int num8 = num3; num8 < num3 + 3; num8++) {
@@ -30616,7 +_,8 @@
 					if (Main.tile[k, l] == null)
 						Main.tile[k, l] = new Tile();
 
-					if (Main.tile[k, l].active() && (Main.tile[k, l].type == 139 || Main.tile[k, l].type == 35)) {
+					if (Main.tile[k, l].active() && (Main.tile[k, l].type == 139 || Main.tile[k, l].type == 35
+						|| TileLoader.IsModMusicBox(Main.tile[k, l]))) {
 						if (Main.tile[k, l].frameX < 36)
 							Main.tile[k, l].frameX += 36;
 						else
@@ -30778,6 +_,9 @@
 				}
 			}
 
+			// size ???
+			if (!TileLoader.Drop(i, j, type))
+				goto skipDrop;
 			if (type == 35)
 				Item.NewItem(i * 16, j * 16, 32, 32, 1813);
 			else if (num3 == 28)
@@ -30899,6 +_,7 @@
 			else
 				Item.NewItem(i * 16, j * 16, 32, 32, 562 + num3);
 
+			skipDrop:
 			for (int num7 = num - 1; num7 < num + 3; num7++) {
 				for (int num8 = num2 - 1; num8 < num2 + 3; num8++) {
 					TileFrame(num7, num8);
@@ -31024,8 +_,8 @@
 		}
 
 		public static bool PlaceObject(int x, int y, int type, bool mute = false, int style = 0, int alternate = 0, int random = -1, int direction = -1) {
-			if (type >= 623)
-				return false;
+			//if (type >= 470)
+			//	return false;
 
 			if (!TileObject.CanPlace(x, y, type, style, direction, out TileObject objectData))
 				return false;
@@ -31199,7 +_,9 @@
 			if (point.Y == 0)
 				type2 = 3239;
 
+			if (TileLoader.Drop(x, y, type))
-			Item.NewItem(x * 16, y * 16, num * 16, num2 * 16, type2);
+				Item.NewItem(x * 16, y * 16, num * 16, num2 * 16, type2);
+
 			for (int k = x - 1; k < x + num + 1; k++) {
 				for (int l = y - 1; l < y + num2 + 1; l++) {
 					TileFrame(k, l);
@@ -31252,7 +_,9 @@
 			if (point.Y == 0)
 				type2 = 3240;
 
+			if (TileLoader.Drop(x, y, type))
-			Item.NewItem(x * 16, y * 16, width * 16, height * 16, type2);
+				Item.NewItem(x * 16, y * 16, width * 16, height * 16, type2);
+
 			for (int m = x - 1; m < x + width + 1; m++) {
 				for (int n = y - 1; n < y + height + 1; n++) {
 					TileFrame(m, n);
@@ -31595,7 +_,7 @@
 				}
 			}
 
-			if (type == 88) {
+			if (TileLoader.IsDresser(type)) {
 				if (Chest.CreateChest(x - 1, y - 1) == -1)
 					flag2 = false;
 				else if (Main.netMode == 1)
@@ -31772,6 +_,9 @@
 				}
 			}
 
+			if (!TileLoader.Drop(i, j, type))
+				goto skipDrop;
+
 			switch (type) {
 				case 254:
 					if (frameX < 72)
@@ -31980,6 +_,7 @@
 					}
 			}
 
+			skipDrop:
 			destroyObject = false;
 			for (int num8 = num3 - 1; num8 < num3 + 3; num8++) {
 				for (int num9 = num - 1; num9 < num + 3; num9++) {
@@ -32343,6 +_,8 @@
 				}
 			}
 
+			if (!TileLoader.Drop(i, j, type))
+				goto skipDrop;
 			if (type == 454) {
 				switch (Main.rand.Next(9)) {
 					case 2:
@@ -32545,6 +_,7 @@
 				Item.NewItem(i * 16, j * 16, 32, 32, type2);
 			}
 
+			skipDrop:
 			destroyObject = false;
 			for (int num19 = num - 1; num19 < num + num3 + 1; num19++) {
 				for (int num20 = num2 - 1; num20 < num2 + 4; num20++) {
@@ -32616,6 +_,9 @@
 				}
 			}
 
+			if (!TileLoader.Drop(num, j, type))
+				goto skipDrop;
+
 			switch (type) {
 				case 106:
 					Item.NewItem(i * 16, j * 16, 32, 32, 363);
@@ -32711,6 +_,7 @@
 					break;
 			}
 
+			skipDrop:
 			destroyObject = false;
 			for (int num16 = num - 1; num16 < num + 4; num16++) {
 				for (int num17 = num2 - 1; num17 < num2 + 4; num17++) {
@@ -33125,7 +_,8 @@
 				}
 			}
 
+			if (TileLoader.Drop(i, j, type))
-			Item.NewItem(i * 16, j * 16, 32, 32, 63);
+				Item.NewItem(i * 16, j * 16, 32, 32, 63);
 			destroyObject = false;
 		}
 
@@ -33305,7 +_,7 @@
 				}
 			}
 
-			if (!Main.tile[num2, num].nactive() || Main.tile[num2, num].halfBrick() || Main.tile[num2, num].slope() != 0 || (Main.tile[num2, num].type != 53 && Main.tile[num2, num].type != 112 && Main.tile[num2, num].type != 116 && Main.tile[num2, num].type != 234)) {
+			if (!Main.tile[num2, num].nactive() || Main.tile[num2, num].halfBrick() || Main.tile[num2, num].slope() != 0 || Main.tile[num2, num].type != 53 && Main.tile[num2, num].type != 112 && Main.tile[num2, num].type != 116 && Main.tile[num2, num].type != 234 && !TileLoader.CanGrowModCactus(Main.tile[num2, num].type)) {
 				KillTile(i, j);
 				return true;
 			}
@@ -33316,7 +_,7 @@
 					return true;
 				}
 			}
-			else if (i == num2 && (!Main.tile[i, j + 1].active() || (Main.tile[i, j + 1].type != 80 && Main.tile[i, j + 1].type != 53 && Main.tile[i, j + 1].type != 112 && Main.tile[i, j + 1].type != 116 && Main.tile[i, j + 1].type != 234))) {
+			else if (i == num2 && (!Main.tile[i, j + 1].active() || Main.tile[i, j + 1].type != 80 && Main.tile[i, j + 1].type != 53 && Main.tile[i, j + 1].type != 112 && Main.tile[i, j + 1].type != 116 && Main.tile[i, j + 1].type != 234 && !TileLoader.CanGrowModCactus(Main.tile[i, j + 1].type))) {
 				KillTile(i, j);
 				return true;
 			}
@@ -33377,7 +_,7 @@
 				}
 			}
 
-			if (Main.netMode != 1 && !noTileActions) {
+			if (Main.netMode != 1 && !noTileActions && TileLoader.Drop(num, num2, type)) {
 				switch (type) {
 					case 12:
 						Item.NewItem(num * 16, num2 * 16, 32, 32, 29);
@@ -33505,6 +_,9 @@
 			if (num2 == 112)
 				num2 = 53;
 
+			if (TileLoader.CanGrowModPalmTree(num2))
+				num2 = 53;
+
 			if (num2 != 53 && num2 != type)
 				KillTile(i, j);
 
@@ -33888,6 +_,9 @@
 			if (num4 == 492)
 				num4 = 2;
 
+			if (TileLoader.CanGrowModTree(num4))
+				num4 = 2;
+
 			if (num4 != 2 && num4 != type && ((Main.tile[i, j].frameX == 0 && Main.tile[i, j].frameY <= 130) || (Main.tile[i, j].frameX == 22 && Main.tile[i, j].frameY <= 130) || (Main.tile[i, j].frameX == 44 && Main.tile[i, j].frameY <= 130)))
 				KillTile(i, j);
 
@@ -34182,7 +_,7 @@
 					int wall = Main.tile[k, l].wall;
 					switch (conversionType) {
 						case 4:
-							if (type <= 623 && wall <= 316) {
+							if (true) {//if (type <= 470 && wall <= 231) {
 								if (WallID.Sets.Conversion.Grass[wall] && wall != 81) {
 									Main.tile[k, l].wall = 81;
 									SquareWallFrame(k, l);
@@ -34268,8 +_,6 @@
 							}
 							continue;
 						case 2:
-							if (type > 623 || wall > 316)
-								continue;
 							if (WallID.Sets.Conversion.Grass[wall] && wall != 70) {
 								Main.tile[k, l].wall = 70;
 								SquareWallFrame(k, l);
@@ -34357,7 +_,7 @@
 							}
 							continue;
 						case 1:
-							if (type <= 623 && wall <= 316) {
+							if (true) {//if (type <= 470 && wall <= 231) {
 								if (WallID.Sets.Conversion.Grass[wall] && wall != 69) {
 									Main.tile[k, l].wall = 69;
 									SquareWallFrame(k, l);
@@ -34778,7 +_,7 @@
 			if (num3 / 255 > cactusWaterLimit)
 				return;
 
-			if (Main.tile[i, j].type == 53 || Main.tile[i, j].type == 112 || Main.tile[i, j].type == 116 || Main.tile[i, j].type == 234) {
+			if (Main.tile[i, j].type == 53 || Main.tile[i, j].type == 112 || Main.tile[i, j].type == 116 || Main.tile[i, j].type == 234 || TileLoader.CanGrowModCactus(Main.tile[i, j].type)) {
 				if (Main.tile[i, j - 1].active() || Main.tile[i - 1, j - 1].active() || Main.tile[i + 1, j - 1].active())
 					return;
 
@@ -34796,7 +_,7 @@
 									return;
 							}
 
-							if (Main.tile[m, n].type == 53 || Main.tile[m, n].type == 112 || Main.tile[m, n].type == 116 || Main.tile[m, n].type == 234)
+							if (Main.tile[k, l].type == 53 || Main.tile[k, l].type == 112 || Main.tile[k, l].type == 116 || Main.tile[k, l].type == 234 || TileLoader.CanGrowModCactus(Main.tile[k, l].type))
 								num5++;
 						}
 						catch {
@@ -34964,6 +_,10 @@
 			if (!flag)
 				return;
 
+			// size ???
+			if (!TileLoader.Drop(num, num2, type))
+				goto skipDrop;
+
 			destroyObject = true;
 			if (num4 >= 7 && num4 <= 9)
 				SoundEngine.PlaySound(6, i * 16, j * 16);
@@ -35459,6 +_,7 @@
 				}
 			}
 
+			skipDrop:
 			destroyObject = false;
 		}
 
@@ -35487,6 +_,9 @@
 			if (num != -1 && Main.netMode == 1 && type == 467)
 				NetMessage.SendData(34, -1, -1, null, 4, x, y, style);
 
+			if (num != 1 && Main.netMode == 1 && type >= TileID.Count && TileID.Sets.BasicChest[type])
+				NetMessage.SendData(34, -1, -1, null, 100, x, y, style, 0, type, 0);
+
 			return num;
 		}
 
@@ -35606,7 +_,9 @@
 				}
 			}
 
+			if (TileLoader.Drop(i, j, type))
-			Item.NewItem(i * 16, j * 16, 32, 32, chestItemDrop);
+				Item.NewItem(i * 16, j * 16, 32, 32, type2);
+
 			destroyObject = false;
 		}
 
@@ -36594,8 +_,8 @@
 			if (gen && Main.tile[i, j].active() && Main.tile[i, j].type == 488)
 				return false;
 
-			if (num >= 623)
-				return false;
+			//if (type >= 470)
+			//	return false;
 
 			bool result = false;
 			if (i >= 0 && j >= 0 && i < Main.maxTilesX && j < Main.maxTilesY) {
@@ -36673,6 +_,7 @@
 									return false;
 								break;
 							case 3:
+							case int _ when TileLoader.IsSapling(type):
 							case 20:
 							case 24:
 							case 27:
@@ -36915,7 +_,7 @@
 							SquareTileFrame(i, j);
 						}
 					}
-					else if (num == 4) {
+					else if (TileLoader.IsTorch(type)) {
 						if (Main.tile[i - 1, j] == null)
 							Main.tile[i - 1, j] = new Tile();
 
@@ -37050,6 +_,7 @@
 							case 26:
 							case 86:
 							case 87:
+									case int _ when TileLoader.IsDresser(type):
 							case 88:
 							case 89:
 							case 114:
@@ -37071,12 +_,14 @@
 								PlaceJunglePlant(i, j, (ushort)num, 0, 0);
 								SquareTileFrame(i, j);
 								break;
-							case 20: {
+									case int _ when TileLoader.IsSapling(type): {
 									if (Main.tile[i, j + 1] == null)
 										Main.tile[i, j + 1] = new Tile();
 
 									int type = Main.tile[i, j + 1].type;
+											int dummyType = TileID.Saplings;
+											int dummyStyle = 0;
-									if (Main.tile[i, j + 1].active() && (type == 2 || type == 109 || type == 147 || type == 60 || type == 23 || type == 199 || type == 53 || type == 234 || type == 116 || type == 112)) {
+											if (Main.tile[i, j + 1].active() && (type2 == 2 || type2 == 109 || type2 == 147 || type2 == 60 || type2 == 23 || type2 == 199 || type2 == 53 || type2 == 234 || type2 == 116 || type2 == 112 || TileLoader.SaplingGrowthType(type2, ref dummyType, ref dummyStyle))) {
 										Place1x2(i, j, (ushort)num, style);
 										SquareTileFrame(i, j);
 									}
@@ -37272,6 +_,9 @@
 											case 314:
 												Minecart.PlaceTrack(tile, style);
 												break;
+													case int _ when type >= TileID.Count && TileObjectData.GetTileData(type, style) != null:
+														PlaceObject(i, j, type, mute, style);
+														break;
 											default:
 												tile.active(active: true);
 												tile.type = (ushort)num;
@@ -37340,6 +_,7 @@
 			if (fail)
 				num = 3;
 
+			WallLoader.NumDust(i, j, tile.wall, fail, ref num);
 			for (int k = 0; k < num; k++) {
 				KillWall_MakeWallDust(i, j, tile);
 			}
@@ -37349,11 +_,12 @@
 				return;
 			}
 
+			if (WallLoader.Drop(i, j, tile.wall, ref num4) && num4 > 0)
 			KillWall_DropItems(i, j, tile);
 			tile.wall = 0;
 			tile.wallColor(0);
 			SquareWallFrame(i, j);
-			if (tile.type >= 0 && tile.type < 623 && TileID.Sets.FramesOnKillWall[tile.type])
+			if (tile.type >= 0 && TileID.Sets.FramesOnKillWall[tile.type])
 				TileFrame(i, j);
 		}
 
@@ -38503,6 +_,9 @@
 			if (tileCache.wall == 245)
 				num = 195;
 
+				if (!WallLoader.CreateDust(i, j, tile.wall, ref num2))
+					continue;
+
 			if (tileCache.wall == 44) {
 				int num2 = Dust.NewDust(new Vector2(i * 16, j * 16), 16, 16, 66, 0f, 0f, 100, new Color(Main.DiscoR, Main.DiscoG, Main.DiscoB), 0.75f);
 				Main.dust[num2].noGravity = true;
@@ -38583,6 +_,9 @@
 			if (!tile.active())
 				return false;
 
+			if (!TileLoader.CanKillTile(i, j, tile.type, ref blockDamaged))
+				return false;
+
 			if (j >= 1)
 				tile2 = Main.tile[i, j - 1];
 
@@ -38604,6 +_,7 @@
 					case 88:
 					case 467:
 					case 488:
+					case int t when TileLoader.IsDresser(t):
 						if (tile.type != type)
 							return false;
 						break;
@@ -38647,6 +_,7 @@
 					if (!Chest.CanDestroyChest(i - tile.frameX / 18 % 2, j - tile.frameY / 18))
 						return false;
 					break;
+				case ushort t when TileLoader.IsDresser(t):
 				case 88:
 					if (!Chest.CanDestroyChest(i - tile.frameX / 18 % 3, j - tile.frameY / 18))
 						return false;
@@ -38767,7 +_,7 @@
 					return true;
 			}
 
-			if (tile.type == 88) {
+			if (TileLoader.IsDresser(tile.type) && Main.netMode != 1) {
 				int num2 = tile.frameX / 18;
 				int y3 = y - tile.frameY / 18;
 				num2 %= 3;
@@ -39636,7 +_,7 @@
 			if ((tile.type == 471 && TEWeaponsRack.KillTileDropItem(tile, i, j)) || (tile.type == 470 && (CheckTileBreakability2_ShouldTileSurvive(i, j) || fail)) || (tile.type == 475 && (CheckTileBreakability2_ShouldTileSurvive(i, j) || fail)))
 				return;
 
-			int num15 = KillTile_GetTileDustAmount(fail, tile);
+			int num14 = KillTile_GetTileDustAmount(fail, tile, i, j);
 			for (int k = 0; k < num15; k++) {
 				KillTile_MakeTileDust(i, j, tile);
 			}
@@ -39808,7 +_,7 @@
 				if (dropItem > 0)
 					Item.NewItem(x * 16, y * 16, 16, 16, dropItem, dropItemStack, noBroadcast: false, -1);
 
-				if (secondaryItem > 0)
+				if (vanillaDrop && num24 > 0)
 					Item.NewItem(x * 16, y * 16, 16, 16, secondaryItem, secondaryItemStack, noBroadcast: false, -1);
 			}
 		}
@@ -41064,6 +_,7 @@
 									dropItem = 619;
 									break;
 							}
+							TileLoader.DropTreeWood(Main.tile[num29, n].type, ref num23);
 						}
 
 						break;
@@ -41649,7 +_,7 @@
 				dropItem = dropType;
 		}
 
-		public static bool IsHarvestableHerbWithSeed(int type, int style) {
+		public static int KillTile_GetTileDustAmount(bool fail, Tile tileCache, int i, int j) {
 			bool result = false;
 			if (type == 84)
 				result = true;
@@ -41692,7 +_,7 @@
 						}
 
 						if (Main.tile[i, k] != null) {
-							if (Main.tile[i, k].type == 2 || Main.tile[i, k].type == 109 || Main.tile[i, k].type == 147 || Main.tile[i, k].type == 199 || Main.tile[i, k].type == 23) {
+									if (Main.tile[i, m].type == 2 || Main.tile[i, m].type == 109 || Main.tile[i, m].type == 147 || Main.tile[i, m].type == 199 || Main.tile[i, m].type == 23 || TileLoader.CanDropAcorn(Main.tile[i, m].type)) {
 								dropItem = 9;
 								secondaryItem = 27;
 							}
@@ -41762,6 +_,7 @@
 			}
 
 			if (tileCache.type == 73) {
+					//patch file: num17, num18
 				num = 200;
 				num2 = 50;
 				if (Main.player[num4].flowerBoots && tileCache.frameX >= 108) {
@@ -43019,8 +_,11 @@
 						if (Main.tile[num11, k].active() && Main.tile[num11, k].type == 199)
 							num = 121;
 
+						//patch file: num12, k
 						if (Main.tile[num11, k].active() && Main.tile[num11, k].type == 147)
 							num = 122;
+
+						TileLoader.TreeDust(Main.tile[num12, k], ref num);
 					}
 				}
 			}
@@ -43039,8 +_,11 @@
 						if (Main.tile[i, l].active() && Main.tile[i, l].type == 116)
 							num = 79;
 
+						//patch file: l
 						if (Main.tile[i, l].active() && Main.tile[i, l].type == 112)
 							num = 77;
+
+						TileLoader.PalmTreeDust(Main.tile[i, l], ref num);
 					}
 				}
 			}
@@ -43649,7 +_,7 @@
 			if (type == 178 || (uint)(type - 426) <= 1u || (uint)(type - 430) <= 10u)
 				flag = true;
 
-			if (num >= 0) {
+			if (TileLoader.CreateDust(i, j, tileCache.type, ref num) && num >= 0) { // TODO, fix
 				if (tileCache.type == 518) {
 					int num14 = (int)tileCache.liquid / 16;
 					num14 -= 3;
@@ -45458,6 +_,7 @@
 			if (CreativePowerManager.Instance.GetPower<CreativePowers.FreezeTime>().Enabled)
 				result = 0;
 
+			TileLoader.NumDust(i, j, tileCache.type, fail, ref result);
 			return result;
 		}
 
@@ -46027,6 +_,8 @@
 					if (Main.netMode == 2)
 						NetMessage.SendTileSquare(-1, i, num44, 3);
 				}
+				TileLoader.RandomUpdate(num6, num7, Main.tile[num6, num7].type);
+				WallLoader.RandomUpdate(num6, num7, Main.tile[num6, num7].wall);
 			}
 		}
 
@@ -46976,6 +_,7 @@
 							flag = true;
 							break;
 						}
+						TileLoader.DropPalmTreeWood(Main.tile[i, num31].type, ref num23);
 					}
 				}
 
@@ -47353,6 +_,7 @@
 		}
 
 		public static void CrimPlaceHearts() {
+			WorldHooks.PreUpdate();
 			int num = 16;
 			for (int i = 0; i < heartCount; i++) {
 				num = genRand.Next(16, 21);
@@ -49425,6 +_,8 @@
 					}
 				}
 			}
+
+			WorldHooks.PostUpdate();
 		}
 
 		public static bool WillWaterPlacedHereStayPut(int x, int y) {
@@ -50959,6 +_,8 @@
 							return false;
 					}
 					if (Main.tile[x, y - 1].active()) {
+						if (TileID.Sets.BasicChest[Main.tile[i, j - 1].type])
+							return false;
 						switch (Main.tile[x, y - 1].type) {
 							case 21:
 							case 26:
@@ -51409,7 +_,10 @@
 						Liquid.AddWater(i, j);
 
 					if (tile.active()) {
-						if (noBreak && Main.tileFrameImportant[tile.type] && tile.type != 4)
+						if (!TileLoader.TileFrame(i, j, tile.type, ref resetFrame, ref noBreak))
+							return;
+
+						if (noBreak && Main.tileFrameImportant[tile.type] && !TileLoader.IsTorch(tile.type))
 							return;
 
 						int num = tile.type;
@@ -51530,7 +_,7 @@
 								default:
 									if (num != 461) {
 										switch (num) {
-											case 178: {
+								case int _ when TileLoader.IsTorch(num): {
 													Tile tile8 = Main.tile[i, j - 1];
 													Tile tile9 = Main.tile[i, j + 1];
 													Tile tile2 = Main.tile[i - 1, j];
@@ -51933,6 +_,7 @@
 																switch (num) {
 																	case 15:
 																	case 20:
+																	case int _ when TileLoader.IsSapling(num):
 																	case 216:
 																	case 338:
 																	case 390:
@@ -52001,7 +_,7 @@
 																				CheckOnTable1x1(i, j, num);
 																				return;
 																			default:
-																				if (TileID.Sets.BasicChest[num]) {
+																				if (TileID.Sets.BasicChest[num] && num < TileID.Count) {
 																					CheckChest(i, j, num);
 																					return;
 																				}
@@ -52462,13 +_,10 @@
 										}
 
 										switch (num) {
-											case 147:
+											case int _ when TileID.Sets.Snow[num]:
 												TileMergeAttempt(num, Main.tileBrick, TileID.Sets.Ices, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
 												break;
-											case 161:
-											case 163:
-											case 164:
-											case 200:
+											case int _ when TileID.Sets.Ices[num]:
 												TileMergeAttempt(num, Main.tileBrick, TileID.Sets.Snow, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
 												break;
 											case 162:
@@ -52476,7 +_,7 @@
 												break;
 											default:
 												if (Main.tileBrick[num]) {
-													if (num == 60 || num == 70)
+													if (TileID.Sets.GrassSpecial[num])
 														TileMergeAttempt(num, Main.tileBrick, TileID.Sets.Mud, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
 													else
 														TileMergeAttempt(num, Main.tileBrick, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
@@ -52487,14 +_,14 @@
 												break;
 										}
 
-										if ((num == 1 || Main.tileMoss[num] || num == 117 || num == 25 || num == 203) && down == 165) {
+										if ((TileID.Sets.Stone[num] || Main.tileMoss[num]) && down == 165) {
 											if (tile9.frameY == 72)
 												down = num;
 											else if (tile9.frameY == 0)
 												down = num;
 										}
 
-										if ((num == 1 || Main.tileMoss[num] || num == 117 || num == 25 || num == 203) && up == 165) {
+										if ((TileID.Sets.Stone[num] || Main.tileMoss[num]) && up == 165) {
 											if (tile8.frameY == 90)
 												up = num;
 											else if (tile8.frameY == 54)
@@ -52509,7 +_,7 @@
 												up = num;
 										}
 
-										if ((num == 200 || num == 161 || num == 147 || num == 163 || num == 164) && down == 165)
+										if (TileID.Sets.Ices[num] && down == 165)
 											down = num;
 
 										if ((tile.slope() == 1 || tile.slope() == 2) && down > -1 && !TileID.Sets.Platforms[down])
@@ -52661,7 +_,7 @@
 														if (mergeDown)
 															up = num;
 													}
-													else if (up == 147) {
+												else if (up > -1 && TileID.Sets.Snow[up]) {
 														TileFrame(i, j - 1);
 														if (mergeDown)
 															up = num;
@@ -52672,7 +_,7 @@
 														if (mergeUp)
 															down = num;
 													}
-													else if (down == 147) {
+												else if (down > -1 && TileID.Sets.Snow[down]) {
 														TileFrame(i, j + 1);
 														if (mergeUp)
 															down = num;
@@ -52683,7 +_,7 @@
 														if (mergeRight)
 															left = num;
 													}
-													else if (left == 147) {
+												else if (left > -1 && TileID.Sets.Snow[left]) {
 														TileFrame(i - 1, j);
 														if (mergeRight)
 															left = num;
@@ -52803,16 +_,14 @@
 										}
 										else {
 											switch (num) {
-												case 58:
-												case 75:
-												case 76:
+												case int _ when TileID.Sets.HellSpecial[num]:
 													TileMergeAttempt(-2, 57, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
 													break;
 												case 57:
 													TileMergeAttempt(-2, 1, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
 													TileMergeAttemptFrametest(i, j, num, TileID.Sets.HellSpecial, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
 													break;
-												case 59:
+												case int _ when TileID.Sets.Mud[num]:
 													if ((double)j > Main.rockLayer)
 														TileMergeAttempt(-2, 1, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
 													TileMergeAttempt(num, TileID.Sets.GrassSpecial, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
@@ -52844,14 +_,10 @@
 													TileMergeAttempt(-2, 189, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
 													TileMergeAttempt(num, 196, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
 													break;
-												case 147:
+												case int _ when TileID.Sets.Snow[num]:
 													TileMergeAttemptFrametest(i, j, num, TileID.Sets.IcesSlush, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
 													break;
-												case 161:
-												case 163:
-												case 164:
-												case 200:
-												case 224:
+												case int _ when TileID.Sets.IcesSlush[num]:
 													TileMergeAttempt(-2, 147, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
 													break;
 												case 162:
@@ -52954,11 +_,11 @@
 											TileMergeAttempt(num, 59, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
 
 										bool flag = false;
-										if (num == 2 || num == 23 || num == 60 || num == 477 || num == 492 || num == 70 || num == 109 || num == 199 || Main.tileMoss[num] || TileID.Sets.NeedsGrassFraming[num] || TileID.Sets.tileMossBrick[num]) {
+										if (TileID.Sets.Grass[num] || TileID.Sets.GrassSpecial[num] || Main.tileMoss[num] || TileID.Sets.NeedsGrassFraming[num]) {
 											flag = true;
 											TileMergeAttemptWeird(num, -1, Main.tileSolid, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
 											int num32 = TileID.Sets.NeedsGrassFramingDirt[num];
-											if (num == 60 || num == 70) {
+											if (TileID.Sets.GrassSpecial[num]) {
 												num32 = 59;
 											}
 											else if (Main.tileMoss[num]) {
@@ -54389,7 +_,7 @@
 												}
 											}
 											else {
-												if (num != 2 && num != 23 && num != 60 && num != 70 && num != 109 && num != 199 && num != 477 && num != 492) {
+												if (!TileID.Sets.Grass[num] && !TileID.Sets.GrassSpecial[num]) {
 													if (up == -1 && down == -2 && left == num && right == num) {
 														switch (num27) {
 															case 0:
@@ -54938,7 +_,7 @@
 												TileMergeAttemptWeird(num, -1, Main.tileSolid, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
 											}
 
-											if (num == 2 || num == 23 || num == 60 || num == 70 || num == 109 || num == 199 || num == 477 || num == 492 || Main.tileMoss[num] || TileID.Sets.tileMossBrick[num])
+											if (TileID.Sets.Grass[num] || TileID.Sets.GrassSpecial[num] || Main.tileMoss[num])
 												TileMergeAttempt(num, -2, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
 
 											if (up == num && down == num && left == num && right == num) {
@@ -55391,7 +_,11 @@
 
 										if (rectangle.X != frameX && rectangle.Y != frameY && frameX >= 0 && frameY >= 0) {
 											tileReframeCount++;
+#if DEBUG
+											if (tileReframeCount < 20) {
+#else
 											if (tileReframeCount < 25) {
+#endif
 												bool num50 = mergeUp;
 												bool flag14 = mergeDown;
 												bool flag15 = mergeLeft;
