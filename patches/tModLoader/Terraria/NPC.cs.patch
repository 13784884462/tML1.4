--- src/Terraria/Terraria/NPC.cs
+++ src/tModLoader/Terraria/NPC.cs
@@ -21,12 +_,27 @@
 using Terraria.Localization;
 using Terraria.Utilities;
 using Terraria.WorldBuilding;
+using Terraria.ModLoader;
 
 namespace Terraria
 {
 	public class NPC : Entity
 	{
+		public ModNPC modNPC {get; internal set;}
+
+		internal GlobalNPC[] globalNPCs = new GlobalNPC[0];
+
+		/// <summary>Gets the global NPC. Use this overload when you dynamically add GlobalNPC manually.</summary>
+		public GlobalNPC GetGlobalNPC(Mod mod, string name) => NPCLoader.GetGlobalNPC(this, mod, name);
+
+		/// <summary>Gets the global NPC. Use this overload when you know only 1 instance will ever be added by this particular mod.</summary>
+		[Obsolete("Use GetGlobalNPC<T>() instead", true)]
+		public T GetGlobalNPC<T>(Mod mod) where T : GlobalNPC => (T)GetGlobalNPC(mod, typeof(T).Name);
+
+		/// <summary>Gets the global NPC. Use this overload when you know only 1 instance will ever be added among all mods. 99% of mods should use this.</summary>
+		public T GetGlobalNPC<T>() where T : GlobalNPC => (T)ModContent.GetInstance<T>().Instance(this);
+
 		private const int NPC_TARGETS_START = 300;
 		public bool IsABestiaryIconDummy;
 		private float waterMovementSpeed = 0.5f;
 		private float lavaMovementSpeed = 0.5f;
@@ -102,14 +_,14 @@
 		private static int townRangeY = sHeight;
 		public float npcSlots = 1f;
 		private static bool noSpawnCycle = false;
-		private static int activeTime = 750;
+		public static int activeTime = 750;
 		private static int defaultSpawnRate = 600;
 		private static int defaultMaxSpawns = 5;
 		public bool dontCountMe;
 		public const int maxBuffs = 5;
 		public int[] buffType = new int[5];
 		public int[] buffTime = new int[5];
-		public bool[] buffImmune = new bool[323];
+		public bool[] buffImmune = new bool[BuffLoader.BuffCount];
 		public bool midas;
 		public bool ichor;
 		public bool onFire;
@@ -647,6 +_,6 @@
 		public static void UpdateFoundActiveNPCs() {
 			for (int i = 0; i < 200; i++) {
 				NPC nPC = Main.npc[i];
-				if (nPC.active && nPC.type >= 0 && nPC.type < 663)
+				if (nPC.active && nPC.type >= 0 && nPC.type < NPCLoader.NPCCount)
 					npcsFoundForCheckActive[nPC.type] = true;
 			}
@@ -1757,7 +_,7 @@
 				case 656:
 					return Language.RandomFromCategory("BunnyNames_White", WorldGen.genRand).Value;
 				default:
-					return "";
+					return NPCLoader.TownNPCName(npcType);
 			}
 		}
 
@@ -1953,7 +_,7 @@
 				case 656:
 					return 39;
 				default:
-					return -1;
+					return NPCHeadLoader.GetNPCHeadSlot(type);
 			}
 		}
 
@@ -2018,7 +_,7 @@
 				case 39:
 					return 656;
 				default:
-					return -1;
+					return NPCHeadLoader.GetNPCFromHeadSlot(type);
 			}
 		}
 
@@ -2072,6 +_,7 @@
 					break;
 			}
 
+			NPCLoader.BossHeadRotation(this, ref result);
 			return result;
 		}
 
@@ -2081,6 +_,7 @@
 			if (num == 491 && spriteDirection == 1)
 				result = SpriteEffects.FlipHorizontally;
 
+			NPCLoader.BossHeadSpriteEffects(this, ref result);
 			return result;
 		}
 
@@ -2754,6 +_,16 @@
 			}
 		}
 
+		public void CloneDefaults(int Type) {
+			int originalType = type;
+			int originalNetID = netID;
+			ModNPC originalModEntity = modNPC;
+			SetDefaultsKeepPlayerInteraction(Type);
+			type = originalType;
+			netID = originalNetID;
+			modNPC = originalModEntity;
+		}
+
 		public void SetDefaultsKeepPlayerInteraction(int Type) {
 			bool[] array = new bool[playerInteraction.Length];
 			for (int i = 0; i < playerInteraction.Length; i++) {
@@ -2790,7 +_,9 @@
 				return;
 			}
 
+			modNPC = null;
+			globalNPCs = new GlobalNPC[0];
 			waterMovementSpeed = (lavaMovementSpeed = 0.5f);
 			honeyMovementSpeed = 0.25f;
 			netOffset *= 0f;
 			altTexture = 0;
@@ -2835,7 +_,10 @@
 				buffType[k] = 0;
 			}
 
+			if (buffImmune.Length != BuffLoader.BuffCount)
+				Array.Resize(ref buffImmune, BuffLoader.BuffCount);
+
-			for (int l = 0; l < 323; l++) {
+			for (int l = 0; l < buffImmune.Length; l++) {
 				buffImmune[l] = false;
 			}
 
@@ -11609,8 +_,9 @@
 				noGravity = true;
 			}
 
+			NPCLoader.SetDefaults(this);
 			if (flag) {
-				for (int num4 = 0; num4 < 323; num4++) {
+				for (int num4 = 0; num4 < buffImmune.Length; num4++) {
 					buffImmune[num4] = true;
 				}
 			}
@@ -12153,6 +_,7 @@
 					break;
 			}
 
+			NPCLoader.ScaleExpertStats(this, numPlayers, balance);
 			defDefense = defense;
 			defDamage = damage;
 			life = lifeMax;
@@ -12356,7 +_,11 @@
 		}
 
 		public void AI() {
+			NPCLoader.NPCAI(this);
+		}
+
+		public void VanillaAI() {
 			if (aiStyle == 0) {
 				if (Main.netMode != 1) {
 					for (int i = 0; i < 255; i++) {
 						if (Main.player[i].active && Main.player[i].talkNPC == whoAmI) {
@@ -37719,9 +_,10 @@
 
 		private void AI_007_TownEntities() {
 			int num = 300;
 			if (type == 638 || type == 656)
 				num = 0;
 
+			//patch file: flag
 			bool flag = Main.raining;
 			if (!Main.dayTime)
 				flag = true;
@@ -37810,6 +_,8 @@
 					num2 += 0.15f;
 					defense += 8;
 				}
+
+				NPCLoader.BuffTownNPC(ref num2, ref defense);
 			}
 
 			if (type == 142 && Main.netMode != 1 && !Main.xMas) {
@@ -37869,7 +_,7 @@
 					break;
 			}
 
-			if (type >= 0 && type < 663 && NPCID.Sets.TownCritter[type] && target == 255) {
+			if (type >= 0 && NPCID.Sets.TownCritter[type] && target == 255) {
 				TargetClosest();
 				if (position.X < Main.player[target].position.X) {
 					base.direction = 1;
@@ -38020,11 +_,18 @@
 			int num10 = -1;
 			int num11 = -1;
 			if (!flag6 && Main.netMode != 1 && !flag3) {
 				for (int l = 0; l < 200; l++) {
+					if (!Main.npc[l].active) continue;
+					bool? modCanHit = NPCLoader.CanHitNPC(Main.npc[l], this);
+					if (modCanHit.HasValue && !modCanHit.Value)
+						continue;
+
+					bool canHitVal = modCanHit.HasValue && modCanHit.Value;
+					// TODO: NPCLoader.CanHitNPC should return a plain bool. The only use of "override true" below is to force the skeleton merchant to be hit by skeletons
-					if (!Main.npc[l].active || Main.npc[l].friendly || Main.npc[l].damage <= 0 || !(Main.npc[l].Distance(base.Center) < num6) || (type == 453 && NPCID.Sets.Skeletons[Main.npc[l].type]) || (!Main.npc[l].noTileCollide && !Collision.CanHit(base.Center, 0, 0, Main.npc[l].Center, 0, 0)))
+					if (!Main.npc[l].active || Main.npc[l].friendly || Main.npc[l].damage <= 0 || !(Main.npc[l].Distance(base.Center) < num6) || (type == 453 && NPCID.Sets.Skeletons[Main.npc[l].type] && canHitVal) || (!Main.npc[l].noTileCollide && !Collision.CanHit(base.Center, 0, 0, Main.npc[l].Center, 0, 0))) {
 						continue;
 
 					flag10 = true;
 					float num12 = Main.npc[l].Center.X - base.Center.X;
 					if (type == 614) {
 						if (num12 < 0f && (num7 == -1f || num12 > num7)) {
@@ -38257,7 +_,7 @@
 
 					if (closeDoor && ((position.X + (float)(width / 2)) / 16f > (float)(doorX + 2) || (position.X + (float)(width / 2)) / 16f < (float)(doorX - 2))) {
 						Tile tileSafely = Framing.GetTileSafely(doorX, doorY);
-						if (tileSafely.type == 11) {
+						if (TileLoader.CloseDoorID(tileSafely) >= 0) {
 							if (WorldGen.CloseDoor(doorX, doorY)) {
 								closeDoor = false;
 								NetMessage.SendData(19, -1, -1, null, 1, doorX, doorY, base.direction);
@@ -38401,8 +_,8 @@
 						Tile tileSafely3 = Framing.GetTileSafely(num18, num19);
 						Tile tileSafely4 = Framing.GetTileSafely(num18, num19 - 1);
 						Tile tileSafely5 = Framing.GetTileSafely(num18, num19 - 2);
 						bool flag15 = height / 16 < 3;
-						if (townNPC && tileSafely5.nactive() && (tileSafely5.type == 10 || tileSafely5.type == 388) && (Main.rand.Next(10) == 0 || flag)) {
+						if (townNPC && tileSafely5.nactive() && (TileLoader.OpenDoorID(tileSafely5) >= 0 || tileSafely5.type == 388) && (Main.rand.Next(10) == 0 || flag)) {
 							if (Main.netMode != 1) {
 								if (WorldGen.OpenDoor(num18, num19 - 2, base.direction)) {
 									closeDoor = true;
@@ -38724,6 +_,7 @@
 					num24 = 589;
 					num26 = 7f;
 					num25 = 22;
+					//patch file: num22, num23, num25, num26, num24, maxValue2
 					num27 = 1;
 					num28 = 10;
 					maxValue = 1;
@@ -38731,6 +_,10 @@
 					num29 = 10f;
 				}
 
+				NPCLoader.TownNPCAttackStrength(this, ref num25, ref knockBack);
+				NPCLoader.TownNPCAttackCooldown(this, ref num28, ref maxValue);
+				NPCLoader.TownNPCAttackProj(this, ref num24, ref num27);
+				NPCLoader.TownNPCAttackProjSpeed(this, ref num26, ref num29, ref num31);
 				if (Main.expertMode)
 					num25 = (int)((float)num25 * Main.GameModeInfo.TownNPCDamageMultiplier);
 
@@ -38775,7 +_,7 @@
 				int num37 = 0;
 				int maxValue2 = 0;
 				float knockBack2 = 0f;
-				int num38 = 0;
+				float num38 = 0;
 				bool flag18 = false;
 				float num39 = 0f;
 				if ((float)NPCID.Sets.AttackTime[type] == ai[1]) {
@@ -38880,12 +_,14 @@
 				}
 				else if (type == 228) {
 					num33 = 267;
+					//patch file: num31, num33, num32, num34
 					num35 = 14f;
 					num34 = 20;
 					num36 = 1;
 					num37 = 10;
 					maxValue2 = 1;
 					knockBack2 = 3f;
+					//patch file: num35, maxValue3, knockBack2, num36, num37
 					num38 = 6;
 					num39 = 0.4f;
 				}
@@ -38982,6 +_,11 @@
 					}
 				}
 
+				NPCLoader.TownNPCAttackStrength(this, ref num34, ref knockBack);
+				NPCLoader.TownNPCAttackCooldown(this, ref num37, ref maxValue2);
+				NPCLoader.TownNPCAttackProj(this, ref num33, ref num36);
+				NPCLoader.TownNPCAttackProjSpeed(this, ref num35, ref num36, ref num39);
+				NPCLoader.TownNPCAttackShoot(this, ref flag18);
 				if (Main.expertMode)
 					num34 = (int)((float)num34 * Main.GameModeInfo.TownNPCDamageMultiplier);
 
@@ -39071,20 +_,24 @@
 
 				if (type == 54) {
 					num43 = 585;
+					//patch file: num45, num44, n
 					num45 = 10f;
 					num44 = 16;
 					n = 30;
+					//patch file: num46, maxValue3, knockBack3, num50
 					num46 = 20;
 					maxValue3 = 15;
 					knockBack3 = 2f;
 					num50 = 1f;
 				}
 				else if (type == 108) {
+					//patch file: num49
 					num43 = 15;
 					num45 = 6f;
 					num44 = 18;
 					n = 15;
 					num46 = 15;
+					//patch file: num46
 					maxValue3 = 5;
 					knockBack3 = 3f;
 					num47 = 20f;
@@ -39107,6 +_,11 @@
 					knockBack3 = 3f;
 				}
 
+				NPCLoader.TownNPCAttackStrength(this, ref num44, ref knockBack2);
+				NPCLoader.TownNPCAttackCooldown(this, ref num46, ref maxValue3);
+				NPCLoader.TownNPCAttackProj(this, ref num43, ref n);
+				NPCLoader.TownNPCAttackProjSpeed(this, ref num45, ref num47, ref num50);
+				NPCLoader.TownNPCAttackMagic(this, ref num49);
 				if (Main.expertMode)
 					num44 = (int)((float)num44 * Main.GameModeInfo.TownNPCDamageMultiplier);
 
@@ -39217,12 +_,16 @@
 				}
 				else if (type == 637 || type == 638 || type == 656) {
 					num60 = 10;
+					//patch file: num59, num61, num62, num58
 					num62 = (num63 = 32);
 					num59 = 15;
 					maxValue4 = 8;
 					num61 = 3f;
 				}
 
+				NPCLoader.TownNPCAttackStrength(this, ref num60, ref num61);
+				NPCLoader.TownNPCAttackCooldown(this, ref num59, ref maxValue6);
+				NPCLoader.TownNPCAttackSwing(this, ref num63, ref num62);
 				if (Main.expertMode)
 					num60 = (int)((float)num60 * Main.GameModeInfo.TownNPCDamageMultiplier);
 
@@ -42794,7 +_,7 @@
 					Main.tile[num177 - direction, num178 + 1] = new Tile();
 
 				Main.tile[num177, num178 + 1].halfBrick();
-				if (Main.tile[num177, num178 - 1].nactive() && (Main.tile[num177, num178 - 1].type == 10 || Main.tile[num177, num178 - 1].type == 388) && flag8) {
+				if (Main.tile[num177, num178 - 1].nactive() && (TileLoader.IsClosedDoor(Main.tile[num177, num178 - 1]) || Main.tile[num177, num178 - 1].type == 388) && flag8) {
 					ai[2] += 1f;
 					ai[3] = 0f;
 					if (ai[2] >= 60f) {
@@ -42833,7 +_,7 @@
 									NetMessage.SendData(17, -1, -1, null, 0, num177, num178 - 1);
 							}
 							else {
-								if (Main.tile[num177, num178 - 1].type == 10) {
+								if (TileLoader.OpenDoorID(Main.tile[num177, num178 - 1]) >= 0) {
 									bool flag24 = WorldGen.OpenDoor(num177, num178 - 1, direction);
 									if (!flag24) {
 										ai[3] = num52;
@@ -43959,7 +_,7 @@
 								Tile tileSafely = Framing.GetTileSafely(i, j);
 								bool flag2 = tileSafely.active() && Main.tileSolid[tileSafely.type] && !Main.tileFrameImportant[tileSafely.type];
 								if (flag && flag2) {
-									int num38 = WorldGen.KillTile_GetTileDustAmount(fail: true, tileSafely);
+									int num38 = WorldGen.KillTile_GetTileDustAmount(true, tileSafely, i, j);
 									for (int k = 0; k < num38; k++) {
 										Dust obj = Main.dust[WorldGen.KillTile_MakeTileDust(i, j, tileSafely)];
 										obj.velocity.Y -= 3f + (float)num37 * 1.5f;
@@ -45583,7 +_,7 @@
 				Tile tileSafely4 = Framing.GetTileSafely(num64, num65 - 1);
 				Tile tileSafely5 = Framing.GetTileSafely(num64, num65 - 2);
 				Tile tileSafely6 = Framing.GetTileSafely(num64, num65 - 3);
-				if (flag8 && tileSafely4.nactive() && (tileSafely4.type == 10 || tileSafely4.type == 388)) {
+				if (flag8 && tileSafely4.nactive() && (TileLoader.IsClosedDoor(tileSafely4) || tileSafely4.type == 388)) {
 					ai[0] += 1f;
 					ai[3] = 0f;
 					if (ai[0] >= 60f) {
@@ -45613,7 +_,7 @@
 									NetMessage.SendData(17, -1, -1, null, 0, num64, num65 - 1);
 							}
 							else {
-								if (tileSafely4.type == 10) {
+								if (TileLoader.IsClosedDoor(tileSafely4)) {
 									bool flag38 = WorldGen.OpenDoor(num64, num65 - 1, direction);
 									if (!flag38) {
 										ai[3] = num19;
@@ -47592,7 +_,7 @@
 		}
 
 		public bool UsesPartyHat() {
-			if (frame.Height > 0 && townNPC && !IsABestiaryIconDummy && BirthdayParty.PartyIsUp && type != 441 && type != 37)
+			if (frame.Height > 0 && townNPC && !IsABestiaryIconDummy && BirthdayParty.PartyIsUp && type != 441 && type != 37 && NPCLoader.UsesPartyHat(this))
 				return type != 633;
 
 			return false;
@@ -47633,5 +_,9 @@
 				num = TextureAssets.Npc[type].Height() / Main.npcFrameCount[type];
 			}
 
+			NPCLoader.FindFrame(this, num);
+		}
+
+		public void VanillaFindFrame(int num) {
 			int num2 = 0;
 			if (aiAction == 0)
@@ -55485,7 +_,10 @@
 					if (Main.tile[x, y].type == 467)
 						number2 = 5;
 
-					NetMessage.SendData(34, -1, -1, null, number2, x, y, 0f, number);
+					if (Main.tile[x, y].type >= TileID.Count)
+						number2 = 101;
+
+					NetMessage.SendData(34, -1, -1, null, number2, x, y, 0f, number, Main.tile[x, y].type, 0);
 					NetMessage.SendTileSquare(-1, x, y, 3);
 				}
 
@@ -55811,3 +_,6 @@
+			if (!NPCLoader.CheckActive(this))
+				return;
+
 			if (townNPC) {
 				AddIntoPlayersTownNPCSlots();
 				return;
@@ -55967,5 +_,8 @@
 				return;
 			}
 
+			if (!NPCLoader.CheckDead(this))
+				return;
+
 			noSpawnCycle = true;
 			if (townNPC && type != 37 && type != 453) {
@@ -56015,4 +_,6 @@
 			if (DeathSound != null)
 				SoundEngine.PlaySound(DeathSound, base.position);
 
+			if (NPCLoader.SpecialNPCLoot(this)) {
+			}
-			if (type == 13 || type == 14 || type == 15) {
+			else if (type == 13 || type == 14 || type == 15) {
@@ -56528,7 +_,7 @@
 		}
 
 		public static void ResetKillCount() {
-			for (int i = 0; i < 663; i++) {
+			for (int i = 0; i < killCount.Length; i++) {
 				killCount[i] = 0;
 			}
 		}
@@ -56621,5 +_,5 @@
 
 			if (type == 1 && ai[1] > 0f) {
 				int num3 = (int)ai[1];
-				if (num3 > 0 && num3 < 5043) {
+				if (num3 > 0) {
 					int stackForSlimeItemDrop = GetStackForSlimeItemDrop(num3);
@@ -59095,8 +_,8 @@
 		}
 
 		public void NPCLoot() {
-			if (Main.netMode == 1 || type >= 663)
+			if (Main.netMode == 1)
 				return;
 
 			Player closestPlayer = Main.player[Player.FindClosest(position, width, height)];
 			if (0 == 0) {
@@ -59112,5 +_,8 @@
 			if ((type == 23 && Main.hardMode) || (SpawnedFromStatue && NPCID.Sets.NoEarlymodeLootWhenSpawnedFromStatue[type] && !Main.hardMode) || (SpawnedFromStatue && NPCID.Sets.StatueSpawnedDropRarity[type] != -1f && (Main.rand.NextFloat() >= NPCID.Sets.StatueSpawnedDropRarity[type] || !AnyInteractions())))
 				return;
 
+			if (!NPCLoader.PreNPCLoot(this))
+				return;
+
 			bool num = downedMechBoss1 && downedMechBoss2 && downedMechBoss3;
 			DoDeathEvents_BeforeLoot(closestPlayer);
@@ -59122,9 +_,10 @@
 				else if (Main.netMode == 2)
 					ChatHelper.BroadcastChatMessage(NetworkText.FromKey(Lang.misc[32].Key), new Color(50, 255, 130));
 			}
 
+			NPCLoader.NPCLoot(this);
 			NPCLoot_DropMoney(closestPlayer);
 			NPCLoot_DropHeals(closestPlayer);
 		}
 
 		private bool IsNPCValidForBestiaryKillCredit() {
@@ -59184,6 +_,7 @@
 			else if (type == 398)
 				num = 3544;
 
+			NPCLoader.BossLoot(this, ref typeName, ref num);
 			Item.NewItem((int)position.X, (int)position.Y, width, height, num, stack);
 			int num2 = Main.rand.Next(5) + 5;
 			for (int i = 0; i < num2; i++) {
@@ -59985,8 +_,10 @@
 					NetMessage.SendData(106, -1, -1, null, (int)position.X, position.Y);
 				}
 				else {
-					new Item().SetDefaults(Main.npc[i].catchItem);
+					// new Item().SetDefaults(Main.npc[i].catchItem);
-					Item.NewItem((int)Main.player[who].Center.X, (int)Main.player[who].Center.Y, 0, 0, Main.npc[i].catchItem, 1, noBroadcast: false, 0, noGrabDelay: true);
+					int itemWhoAmI = Item.NewItem((int)Main.player[who].Center.X, (int)Main.player[who].Center.Y, 0, 0, Main.npc[i].catchItem, 1, true, 0, true, false);
+					NPCLoader.OnCatchNPC(Main.npc[i], Main.player[who], Main.item[itemWhoAmI]);
+					NetMessage.SendData(MessageID.SyncItem, -1, -1, null, itemWhoAmI, 1f); // NewItem above changed to noBroadcast, number2 is 1 for noGrabDelay effect.
 					Main.npc[i].active = false;
 					NetMessage.SendData(23, -1, -1, null, i);
 				}
@@ -60043,6 +_,7 @@
 			if (type == 551)
 				itemType = 3860;
 
+			NPCLoader.BossBag(this, ref itemType);
 			DropItemInstanced(position, base.Size, itemType);
 		}
 
@@ -60173,7 +_,7 @@
 				NetMessage.SendData(71, -1, -1, null, x, y, Type, Style);
 			}
 			else {
-				if (Type < 0 || Type >= 663 || !Main.npcCatchable[Type] || !CanReleaseNPCs(who))
+				if (Type < 0 || !Main.npcCatchable[Type] || !CanReleaseNPCs(who))
 					return;
 
 				switch (Type) {
@@ -60390,6 +_,7 @@
 			int num9;
 			int num10;
 			bool flag15;
+			NPCSpawnInfo spawnInfo = new NPCSpawnInfo();
 			while (true) {
 				if (num7 >= 255)
 					return;
@@ -60409,12 +_,13 @@
 						flag10 = false;
 						flag11 = false;
 						flag12 = false;
 						flag13 = false;
-						flag14 = (downedPlantBoss && Main.hardMode);
+						flag14 = (downedPlantBoss && Main.hardMode); //patch file: flag13
 						isItAHappyWindyDay = Main.IsItAHappyWindyDay;
 						if (Main.player[num7].active && Main.invasionType > 0 && Main.invasionDelay == 0 && Main.invasionSize > 0 && (double)Main.player[num7].position.Y < Main.worldSurface * 16.0 + (double)sHeight) {
 							int num8 = 3000;
 							if ((double)Main.player[num7].position.X > Main.invasionX * 16.0 - (double)num8 && (double)Main.player[num7].position.X < Main.invasionX * 16.0 + (double)num8) {
+							//patch file: flag5
 								flag6 = true;
 							}
 							else if (Main.invasionX >= (double)(Main.maxTilesX / 2 - 5) && Main.invasionX <= (double)(Main.maxTilesX / 2 + 5)) {
@@ -60432,12 +_,14 @@
 						if (Main.player[num7].ZoneTowerSolar || Main.player[num7].ZoneTowerNebula || Main.player[num7].ZoneTowerVortex || Main.player[num7].ZoneTowerStardust)
 							flag6 = true;
 
+						NPCLoader.EditSpawnRate(Main.player[num5], ref spawnRate, ref maxSpawns);
 						num9 = (int)(Main.player[num7].position.X + (float)(Main.player[num7].width / 2)) / 16;
 						num10 = (int)(Main.player[num7].position.Y + (float)(Main.player[num7].height / 2)) / 16;
 						if (Main.wallHouse[Main.tile[num9, num10].wall])
 							flag5 = true;
 
 						if (Main.tile[num9, num10].wall == 87)
+							//patch file: flag3
 							flag4 = true;
 
 						flag2 = false;
@@ -60740,6 +_,8 @@
 								safeRangeY += (int)((double)(sHeight / 16) * 0.5 / (double)num12);
 							}
 
+							NPCLoader.EditSpawnRange(Main.player[num7], ref spawnRangeX, ref spawnRangeY, ref safeRangeX, ref safeRangeY);
+
 							int num13 = (int)(Main.player[num7].position.X / 16f) - spawnRangeX;
 							int num14 = (int)(Main.player[num7].position.X / 16f) + spawnRangeX;
 							int num15 = (int)(Main.player[num7].position.Y / 16f) - spawnRangeY;
@@ -60858,18 +_,23 @@
 								flag2 = false;
 
 							if (Main.tile[num, num2 - 1].liquid > 0 && Main.tile[num, num2 - 2].liquid > 0 && !Main.tile[num, num2 - 1].lava()) {
+								//patch file: flag7
 								if (Main.tile[num, num2 - 1].honey())
 									flag8 = true;
+								//patch file: flag6
 								else
 									flag7 = true;
 							}
 
 							int num29 = (int)Main.player[num7].Center.X / 16;
 							int num30 = (int)(Main.player[num7].Bottom.Y + 8f) / 16;
+							spawnInfo.playerFloorX = num29;
+							spawnInfo.playerFloorY = num30;
 							if (Main.tile[num, num2].type == 367) {
 								flag10 = true;
 							}
 							else if (Main.tile[num, num2].type == 368) {
+								//patch file: flag8
 								flag9 = true;
 							}
 							else if (Main.tile[num29, num30].type == 367) {
@@ -60954,6 +_,7 @@
 						for (int num40 = num - num39; num40 < num + num39; num40++) {
 							for (int num41 = num2 - num39; num41 < num2 + num39; num41++) {
 								if (Main.tile[num40, num41].wall == 62)
+									//patch file: flag10
 									flag11 = true;
 							}
 						}
@@ -60974,6 +_,7 @@
 						for (int num45 = num - num44; num45 < num + num44; num45++) {
 							for (int num46 = num2 - num44; num46 < num2 + num44; num46++) {
 								if (WallID.Sets.Conversion.Sandstone[Main.tile[num45, num46].wall] || WallID.Sets.Conversion.HardenedSand[Main.tile[num45, num46].wall])
+									//patch file: flag12
 									flag13 = true;
 							}
 						}
@@ -60988,14 +_,38 @@
 			}
 
 			flag2 = false;
 			int spawnTileType = Main.tile[num, num2].type;
 			int num49 = Main.tile[num, num2 - 1].wall;
 			if (Main.tile[num, num2 - 2].wall == 244 || Main.tile[num, num2].wall == 244)
 				num49 = 244;
 
 			bool flag17 = (float)new Point(num9 - num, num10 - num2).X * Main.windSpeedTarget > 0f;
 			spawnTileType = SpawnNPC_TryFindingProperGroundTileType(spawnTileType, num, num2);
+			spawnInfo.spawnTileX = num;
+			spawnInfo.spawnTileY = num2;
+			spawnInfo.spawnTileType = num3;
+			spawnInfo.player = Main.player[num7];
+			spawnInfo.sky = flag3;
+			spawnInfo.lihzahrd = flag4;
+			spawnInfo.playerSafe = flag5;
+			spawnInfo.invasion = flag6;
+			spawnInfo.water = flag7;
+			spawnInfo.granite = flag9;
+			spawnInfo.marble = flag10;
+			spawnInfo.spiderCave = flag11;
+			spawnInfo.playerInTown = flag12;
+			spawnInfo.desertCave = flag13;
+			spawnInfo.planteraDefeated = flag14;
+			spawnInfo.safeRangeX = flag15;
 			int newNPC = 200;
 			int cattailX;
 			int cattailY;
+			int? spawnChoice = NPCLoader.ChooseSpawn(spawnInfo);
+			if (!spawnChoice.HasValue)
+				return;
+
+			int spawn = spawnChoice.Value;
+			if (spawn != 0)
+				goto endVanillaSpawn;
+
 			if (Main.player[num7].ZoneTowerNebula) {
@@ -63099,6 +_,10 @@
 				}
 			}
 
+			endVanillaSpawn: //this ugly code is just to minimize the diff file
+			if (spawn != 0)
+				newNPC = NPCLoader.SpawnNPC(spawn, num, num2);
+
 			if (Main.npc[newNPC].type == 1 && Main.player[num7].RollLuck(180) == 0)
 				Main.npc[newNPC].SetDefaults(-4);
 
@@ -63864,12 +_,14 @@
 			if (num2 < 0)
 				num2 = 0;
 
+			if (NPCLoader.StrikeNPC(this, ref num, num2, ref knockBack, hitDirection, ref crit)) {
-			num = Main.CalculateDamageNPCsTake((int)num, num2);
+				num = Main.CalculateDamageNPCsTake((int)num, num2);
-			if (crit)
+				if (crit)
-				num *= 2.0;
+					num *= 2.0;
 
-			if (takenDamageMultiplier > 1f)
+				if (takenDamageMultiplier > 1f)
-				num *= (double)takenDamageMultiplier;
+					num *= takenDamageMultiplier;
+			}
 
 			if ((takenDamageMultiplier > 1f || Damage != 9999) && lifeMax > 1) {
 				if (friendly) {
@@ -64144,6 +_,10 @@
 		}
 
 		public void HitEffect(int hitDirection = 0, double dmg = 10.0) {
+			NPCLoader.HitEffect(this, hitDirection, dmg);
+		}
+
+		public void VanillaHitEffect(int hitDirection = 0, double dmg = 10.0) {
 			if (!active)
 				return;
 
@@ -71161,6 +_,8 @@
 			return false;
 		}
 
+		public bool HasBuff(int type) => FindBuffIndex(type) != -1;
+
 		public int FindBuffIndex(int type) {
 			if (buffImmune[type])
 				return -1;
@@ -71187,8 +_,11 @@
 			int num = -1;
 			for (int i = 0; i < 5; i++) {
 				if (buffType[i] == type) {
+					if (BuffLoader.ReApply(type, this, time, i)) {
+					}
-					if (buffTime[i] < time)
+					else if (buffTime[i] < time) {
 						buffTime[i] = time;
+					}
 
 					return;
 				}
@@ -71457,6 +_,7 @@
 			}
 
 			UpdateNPC_BuffFlagsReset();
+			NPCLoader.ResetEffects(this);
 			UpdateNPC_BuffSetFlags();
 			UpdateNPC_SoulDrainDebuff();
 			UpdateNPC_BuffClearExpiredBuffs();
@@ -72348,6 +_,7 @@
 					num = 5;
 			}
 
+			NPCLoader.UpdateLifeRegen(this, ref num);
 			if (lifeRegen <= -240 && num < 2)
 				num = 2;
 
@@ -72546,6 +_,8 @@
 
 					if (buffType[i] == 316)
 						markedByRainbowWhip = true;
+
+					BuffLoader.Update(buffType[i], this, ref i); // todo, move?
 				}
 			}
 		}
@@ -72748,25 +_,33 @@
 					Rectangle npcRect = nPC.Hitbox;
 					GetMeleeCollisionData(hitbox, i, ref specialHitSetter, ref damageMultiplier, ref npcRect);
+					bool? modCanHit = NPCLoader.CanHitNPC(Main.npc[i], this);
+					if (modCanHit.HasValue && !modCanHit.Value)
+						continue;
+
+					// TODO: NPCLoader.CanHitNPC should return a plain bool. The only use of "override true" below is to force the skeleton merchant to be hit by skeletons
-					if (hitbox.Intersects(npcRect) && (type != 453 || !NPCID.Sets.Skeletons[nPC.type]) && nPC.type != 624)
+					if (hitbox.Intersects(npcRect) && ((modCanHit == true) || type != 453 || !NPCID.Sets.Skeletons[nPC.type])&& nPC.type != 624)
 						BeHurtByOtherNPC(i, nPC);
 				}
 			}
 		}
 
 		private void BeHurtByOtherNPC(int npcIndex, NPC thatNPC) {
 			int num = 30;
 			if (type == 548)
 				num = 20;
 
 			int num2 = Main.DamageVar(thatNPC.damage);
-			int num3 = 6;
+			float num3 = 6;
 			int num4 = (!(thatNPC.Center.X > base.Center.X)) ? 1 : (-1);
+			bool crit = false;
+			NPCLoader.ModifyHitNPC(nPC, this, ref num2, ref num3, ref crit);
-			double num5 = StrikeNPCNoInteraction(num2, num3, num4);
+			double num5 = StrikeNPCNoInteraction(num2, num3, num4, crit, false, false);
 			if (Main.netMode != 0)
 				NetMessage.SendData(28, -1, -1, null, whoAmI, num2, num3, num4);
 
 			netUpdate = true;
 			immune[255] = num;
+			NPCLoader.OnHitNPC(nPC, this, (int)num5, num3, crit);
 			if (dryadWard) {
 				num2 = (int)num5 / 3;
 				num3 = 6;
@@ -73394,5 +_,9 @@
 				newColor = Color.White;
 
+			Color? modColor = NPCLoader.GetAlpha(this, newColor);
+			if (modColor.HasValue)
+				return modColor.Value;
+
 			float num = (float)(255 - alpha) / 255f;
 			int num2 = (int)((float)(int)newColor.R * num);
 			int num3 = (int)((float)(int)newColor.G * num);
@@ -74870,6 +_,7 @@
 				result = ((!HasSpecialEventText("Bunny", out specialEventText)) ? Lang.BunnyChat(this) : specialEventText);
 			}
 
+			NPCLoader.GetChat(this, ref result);
 			return result;
 		}
 
