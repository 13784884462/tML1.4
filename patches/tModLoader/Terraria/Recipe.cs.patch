--- src/Terraria/Terraria/Recipe.cs
+++ src/tModLoader/Terraria/Recipe.cs
@@ -3,11 +_,67 @@
 using Terraria.GameContent.Achievements;
 using Terraria.ID;
 using Terraria.Localization;
+using Terraria.ModLoader;
 
 namespace Terraria
 {
 	public class Recipe
 	{
+		public class Condition
+		{
+			#region Conditions
+
+			//Liquids
+			public static readonly Condition NearWater = new Condition(NetworkText.FromKey("tModLoader.NearWater"), _ => Main.LocalPlayer.adjWater);
+			public static readonly Condition NearLava = new Condition(NetworkText.FromKey("tModLoader.NearLava"), _ => Main.LocalPlayer.adjLava);
+			public static readonly Condition NearHoney = new Condition(NetworkText.FromKey("tModLoader.NearHoney"), _ => Main.LocalPlayer.adjHoney);
+			//Time
+			public static readonly Condition TimeDay = new Condition(NetworkText.FromKey("tModLoader.TimeDay"), _ => Main.dayTime);
+			public static readonly Condition TimeNight = new Condition(NetworkText.FromKey("tModLoader.TimeNight"), _ => !Main.dayTime);
+			//Biomes
+			public static readonly Condition InDungeon = new Condition(NetworkText.FromKey("tModLoader.InDungeon"), _ => Main.LocalPlayer.ZoneDungeon);
+			public static readonly Condition InCorrupt = new Condition(NetworkText.FromKey("tModLoader.InCorrupt"), _ => Main.LocalPlayer.ZoneCorrupt);
+			public static readonly Condition InHallow = new Condition(NetworkText.FromKey("tModLoader.InHallow"), _ => Main.LocalPlayer.ZoneHallow);
+			public static readonly Condition InMeteor = new Condition(NetworkText.FromKey("tModLoader.InMeteor"), _ => Main.LocalPlayer.ZoneMeteor);
+			public static readonly Condition InJungle = new Condition(NetworkText.FromKey("tModLoader.InJungle"), _ => Main.LocalPlayer.ZoneJungle);
+			public static readonly Condition InSnow = new Condition(NetworkText.FromKey("tModLoader.InSnow"), _ => Main.LocalPlayer.ZoneSnow);
+			public static readonly Condition InCrimson = new Condition(NetworkText.FromKey("tModLoader.InCrimson"), _ => Main.LocalPlayer.ZoneCrimson);
+			public static readonly Condition InWaterCandle = new Condition(NetworkText.FromKey("tModLoader.InWaterCandle"), _ => Main.LocalPlayer.ZoneWaterCandle);
+			public static readonly Condition InPeaceCandle = new Condition(NetworkText.FromKey("tModLoader.InPeaceCandle"), _ => Main.LocalPlayer.ZonePeaceCandle);
+			public static readonly Condition InTowerSolar = new Condition(NetworkText.FromKey("tModLoader.InTowerSolar"), _ => Main.LocalPlayer.ZoneTowerSolar);
+			public static readonly Condition InTowerVortex = new Condition(NetworkText.FromKey("tModLoader.InTowerVortex"), _ => Main.LocalPlayer.ZoneTowerVortex);
+			public static readonly Condition InTowerNebula = new Condition(NetworkText.FromKey("tModLoader.InTowerNebula"), _ => Main.LocalPlayer.ZoneTowerNebula);
+			public static readonly Condition InTowerStardust = new Condition(NetworkText.FromKey("tModLoader.InTowerStardust"), _ => Main.LocalPlayer.ZoneTowerStardust);
+			public static readonly Condition InDesert = new Condition(NetworkText.FromKey("tModLoader.InDesert"), _ => Main.LocalPlayer.ZoneDesert);
+			public static readonly Condition InGlowshroom = new Condition(NetworkText.FromKey("tModLoader.InGlowshroom"), _ => Main.LocalPlayer.ZoneGlowshroom);
+			public static readonly Condition InUndergroundDesert = new Condition(NetworkText.FromKey("tModLoader.InUndergroundDesert"), _ => Main.LocalPlayer.ZoneUndergroundDesert);
+			public static readonly Condition InSkyHeight = new Condition(NetworkText.FromKey("tModLoader.InSkyHeight"), _ => Main.LocalPlayer.ZoneSkyHeight);
+			public static readonly Condition InOverworldHeight = new Condition(NetworkText.FromKey("tModLoader.InOverworldHeight"), _ => Main.LocalPlayer.ZoneOverworldHeight);
+			public static readonly Condition InDirtLayerHeight = new Condition(NetworkText.FromKey("tModLoader.InDirtLayerHeight"), _ => Main.LocalPlayer.ZoneDirtLayerHeight);
+			public static readonly Condition InRockLayerHeight = new Condition(NetworkText.FromKey("tModLoader.InRockLayerHeight"), _ => Main.LocalPlayer.ZoneRockLayerHeight);
+			public static readonly Condition InUnderworldHeight = new Condition(NetworkText.FromKey("tModLoader.InUnderworldHeight"), _ => Main.LocalPlayer.ZoneUnderworldHeight);
+			public static readonly Condition InBeach = new Condition(NetworkText.FromKey("tModLoader.InBeach"), _ => Main.LocalPlayer.ZoneBeach);
+			public static readonly Condition InRain = new Condition(NetworkText.FromKey("tModLoader.InRain"), _ => Main.LocalPlayer.ZoneRain);
+			public static readonly Condition InSandstorm = new Condition(NetworkText.FromKey("tModLoader.InSandstorm"), _ => Main.LocalPlayer.ZoneSandstorm);
+			public static readonly Condition InOldOneArmy = new Condition(NetworkText.FromKey("tModLoader.InOldOneArmy"), _ => Main.LocalPlayer.ZoneOldOneArmy);
+			public static readonly Condition InGranite = new Condition(NetworkText.FromKey("tModLoader.InGranite"), _ => Main.LocalPlayer.ZoneGranite);
+			public static readonly Condition InMarble = new Condition(NetworkText.FromKey("tModLoader.InMarble"), _ => Main.LocalPlayer.ZoneMarble);
+			public static readonly Condition InHive = new Condition(NetworkText.FromKey("tModLoader.InHive"), _ => Main.LocalPlayer.ZoneHive);
+			public static readonly Condition InGemCave = new Condition(NetworkText.FromKey("tModLoader.InGemCave"), _ => Main.LocalPlayer.ZoneGemCave);
+			public static readonly Condition InLihzhardTemple = new Condition(NetworkText.FromKey("tModLoader.InLihzardTemple"), _ => Main.LocalPlayer.ZoneLihzhardTemple);
+			public static readonly Condition InGraveyardBiome = new Condition(NetworkText.FromKey("tModLoader.InGraveyardBiome"), _ => Main.LocalPlayer.ZoneGraveyard);
+
+			#endregion
+
+			public readonly NetworkText Description;
+			public readonly Func<ModRecipe, bool> Callback;
+
+			public Condition(NetworkText description, Func<ModRecipe, bool> callback) {
+				Description = description;
+				Callback = callback;
+			}
+		}
+	
 		public static int maxRequirements = 15;
 		public static int maxRecipes = 3000;
 		public static int numRecipes;
@@ -72,7 +_,7 @@
 				if (num == -1)
 					break;
 
-				if (RecipeGroup.recipeGroups[num].ValidItems.Contains(type)) {
+				if (RecipeGroup.recipeGroups[num].ContainsItem(type)) {
 					theText = RecipeGroup.recipeGroups[num].GetText();
 					return true;
 				}
@@ -88,7 +_,7 @@
 				if (num == -1)
 					break;
 
-				if (RecipeGroup.recipeGroups[num].ValidItems.Contains(invType) && RecipeGroup.recipeGroups[num].ValidItems.Contains(reqType))
+				if (RecipeGroup.recipeGroups[num].ContainsItem(invType) && RecipeGroup.recipeGroups[num].ContainsItem(reqType))
 					return true;
 			}
 
@@ -113,6 +_,9 @@
 					break;
 
 				int num = item2.stack;
+				if (this is ModRecipe modRecipe)
+					num = modRecipe.ConsumeItemHooks?.Invoke(modRecipe, item2.type, item2.stack) ?? num;
+
 				if (alchemy && Main.player[Main.myPlayer].alchemyTable) {
 					if (num > 1) {
 						int num2 = 0;
@@ -193,6 +_,9 @@
 		}
 
 		public bool useWood(int invType, int reqType) {
+			RecipeGroup rec = RecipeGroup.recipeGroups[RecipeGroupID.Wood];
+			return anyWood && rec.ContainsItem(invType) && rec.ContainsItem(reqType);
+			/*
 			if (!anyWood)
 				return false;
 
@@ -221,9 +_,13 @@
 							return true;
 					}
 			}
+			*/
 		}
 
 		public bool useIronBar(int invType, int reqType) {
+			RecipeGroup rec = RecipeGroup.recipeGroups[RecipeGroupID.IronBar];
+			return this.anyIronBar && rec.ContainsItem(invType) && rec.ContainsItem(reqType);
+			/*
 			if (!anyIronBar)
 				return false;
 
@@ -234,9 +_,13 @@
 				return false;
 
 			return true;
+			*/
 		}
 
 		public bool useSand(int invType, int reqType) {
+			RecipeGroup rec = RecipeGroup.recipeGroups[RecipeGroupID.Sand];
+			return this.anySand && rec.ContainsItem(invType) && rec.ContainsItem(reqType);
+			/*
 			if (reqType != 169 && reqType != 408 && reqType != 1246 && reqType != 370 && reqType != 3272 && reqType != 3338 && reqType != 3274 && reqType != 3275)
 				return false;
 
@@ -244,9 +_,13 @@
 				return true;
 
 			return false;
+			*/
 		}
 
 		public bool useFragment(int invType, int reqType) {
+			RecipeGroup rec = RecipeGroup.recipeGroups[RecipeGroupID.Fragment];
+			return this.anyFragment && rec.ContainsItem(invType) && rec.ContainsItem(reqType);
+			/*
 			if (reqType != 3458 && reqType != 3456 && reqType != 3457 && reqType != 3459)
 				return false;
 
@@ -254,9 +_,13 @@
 				return true;
 
 			return false;
+			*/
 		}
 
 		public bool usePressurePlate(int invType, int reqType) {
+			RecipeGroup rec = RecipeGroup.recipeGroups[RecipeGroupID.PressurePlate];
+			return anyPressurePlate && rec.ContainsItem(invType) && rec.ContainsItem(reqType);
+			/*
 			if (!anyPressurePlate)
 				return false;
 
@@ -285,6 +_,7 @@
 							return true;
 					}
 			}
+			*/
 		}
 
 		public static void GetThroughDelayedFindRecipes() {
@@ -402,7 +_,7 @@
 							flag = false;
 					}
 
-					if (flag) {
+					if (flag && RecipeHooks.RecipeAvailable(Main.recipe[n])) {
 						Main.availableRecipe[Main.numAvailableRecipes] = n;
 						Main.numAvailableRecipes++;
 					}
@@ -451,6 +_,8 @@
 			RecipeGroupID.Turtles = RecipeGroup.RegisterGroup("Turtles", rec);
 			rec = new RecipeGroup(() => Lang.misc[37].Value + " " + Language.GetTextValue("Misc.Fruit"), 4009, 4282, 4283, 4284, 4285, 4286, 4287, 4288, 4289, 4290, 4291, 4292, 4293, 4294, 4295, 4296, 4297);
 			RecipeGroupID.Fruit = RecipeGroup.RegisterGroup("Fruit", rec);
+			RecipeGroupHelper.AddOldVanillaGroups();
+			RecipeGroupHelper.AddRecipeGroups();
 		}
 
 		public static void SetupRecipes() {
@@ -13052,7 +_,10 @@
 			AddRecipe();
 			CreateReverseWallRecipes();
 			CreateReversePlatformRecipes();
+			RecipeHooks.AddRecipes();
+			RecipeHooks.PostAddRecipes();
 			UpdateWhichItemsAreMaterials();
+			Item.PopulateMaterialCache();
 			UpdateMaterialFieldForAllRecipes();
 		}
 
