--- src/Terraria/Terraria/NetMessage.cs
+++ src/tModLoader/Terraria/NetMessage.cs
@@ -1,4 +_,5 @@
 using Ionic.Zlib;
+using log4net.Core;
 using Microsoft.Xna.Framework;
 using Microsoft.Xna.Framework.Graphics.PackedVector;
 using System;
@@ -11,5 +_,7 @@
 using Terraria.ID;
 using Terraria.IO;
 using Terraria.Localization;
+using Terraria.ModLoader;
+using Terraria.ModLoader.IO;
 using Terraria.Net;
 using Terraria.Social;
@@ -19,7 +_,7 @@
 	public class NetMessage
 	{
 		public static MessageBuffer[] buffer = new MessageBuffer[257];
-		private static PlayerDeathReason _currentPlayerDeathReason;
+		public static PlayerDeathReason _currentPlayerDeathReason;
 
 		public static void SendChatMessageToClient(NetworkText text, Color color, int playerId) {
 			NetPacket packet = NetTextModule.SerializeServerMessage(text, color, byte.MaxValue);
@@ -47,6 +_,9 @@
 			if (Main.netMode == 2 && remoteClient >= 0)
 				num = remoteClient;
 
+			if (ModNet.HijackSendData(num, msgType, remoteClient, ignoreClient, text, number, number2, number3, number4, number5, number6, number7))
+				return;
+
 			lock (buffer[num]) {
 				BinaryWriter writer = buffer[num].writer;
 				if (writer == null) {
@@ -60,12 +_,12 @@
 				writer.Write((byte)msgType);
 				switch (msgType) {
 					case 1:
-						writer.Write("Terraria" + 194);
+						writer.Write(ModLoader.ModLoader.versionedName);
 						break;
 					case 2:
 						text.Serialize(writer);
 						if (Main.dedServ)
-							Console.WriteLine(Language.GetTextValue("CLI.ClientWasBooted", Netplay.Clients[num].Socket.GetRemoteAddress().ToString(), text));
+							Logging.ServerConsoleLine(Language.GetTextValue("CLI.ClientWasBooted", Netplay.Clients[num].Socket.GetRemoteAddress().ToString(), text));
 						break;
 					case 3:
 						writer.Write((byte)remoteClient);
@@ -126,6 +_,7 @@
 							writer.Write((short)num7);
 							writer.Write((byte)number3);
 							writer.Write((short)num8);
+							ItemIO.SendModData(item4, writer);
 							break;
 						}
 					case 7: {
@@ -230,6 +_,9 @@
 							bb9[7] = DD2Event.DownedInvasionT3;
 							writer.Write(bb9);
 							writer.Write((sbyte)Main.invasionType);
+							if (!ModNet.AllowVanillaClients)
+								WorldIO.SendModData(writer);
+
 							if (SocialAPI.Network != null)
 								writer.Write(SocialAPI.Network.GetLobbyId());
 							else
@@ -390,8 +_,12 @@
 										}
 									}
 
-									if (tile.wall > 0)
-										writer.Write(tile.wall);
+									if (tile.wall > 0) {
+										if (ModNet.AllowVanillaClients)
+											writer.Write((byte)tile.wall);
+										else
+											writer.Write(tile.wall);
+									}
 
 									if (tile.liquid > 0 && Main.netMode == 2) {
 										writer.Write(tile.liquid);
@@ -416,6 +_,7 @@
 								value5 = (short)item5.netID;
 
 							writer.Write(value5);
+							ItemIO.SendModData(item5, writer);
 							break;
 						}
 					case 22:
@@ -469,9 +_,10 @@
 								}
 							}
 
-							if (nPC2.type >= 0 && nPC2.type < 580 && Main.npcCatchable[nPC2.type])
+							if (nPC2.type >= 0 && Main.npcCatchable[nPC2.type])
 								writer.Write((byte)nPC2.releaseOwner);
 
+							NPCLoader.SendExtraAI(nPC2, writer);
 							break;
 						}
 					case 24:
@@ -500,15 +_,21 @@
 									bb14[num9] = true;
 							}
 
-							if (projectile.type > 0 && projectile.type < 714 && ProjectileID.Sets.NeedsUUID[projectile.type])
+							if (projectile.type > 0 && ProjectileID.Sets.NeedsUUID[projectile.type])
 								bb14[Projectile.maxAI] = true;
 
+							byte[] extraAI = ProjectileLoader.SendExtraAI(projectile, ref bb14);
 							writer.Write(bb14);
 							for (int num10 = 0; num10 < Projectile.maxAI; num10++) {
 								if (bb14[num10])
 									writer.Write(projectile.ai[num10]);
 							}
 
+							if (bb14[Projectile.maxAI + 1]) {
+								writer.Write((byte)extraAI.Length);
+								writer.Write(extraAI);
+							}
+
 							if (bb14[Projectile.maxAI])
 								writer.Write((short)projectile.projUUID);
 
@@ -516,7 +_,10 @@
 						}
 					case 28:
 						writer.Write((short)number);
+						if (ModNet.AllowVanillaClients)
-						writer.Write((short)number2);
+							writer.Write((short)number2);
+						else
+							writer.Write((int)number2);
 						writer.Write(number3);
 						writer.Write((byte)(number4 + 1f));
 						writer.Write((byte)number5);
@@ -544,6 +_,7 @@
 							writer.Write((short)item3.stack);
 							writer.Write(item3.prefix);
 							writer.Write(value2);
+							ItemIO.SendModData(item3, writer);
 							break;
 						}
 					case 33: {
@@ -587,6 +_,8 @@
 						else {
 							writer.Write((short)0);
 						}
+						if (number >= 100)
+							writer.Write((ushort)number6);
 						break;
 					case 35:
 					case 66:
@@ -600,89 +_,102 @@
 							writer.Write(player2.zone2);
 							writer.Write(player2.zone3);
 							writer.Write(player2.zone4);
+							if (!ModNet.AllowVanillaClients)
+								PlayerHooks.SendCustomBiomes(player2, writer);
+
 							break;
 						}
 					case 38:
 						writer.Write(Netplay.ServerPassword);
 						break;
 					case 39:
 						writer.Write((short)number);
 						break;
 					case 40:
 						writer.Write((byte)number);
 						writer.Write((short)Main.player[number].talkNPC);
 						break;
 					case 41:
 						writer.Write((byte)number);
 						writer.Write(Main.player[number].itemRotation);
 						writer.Write((short)Main.player[number].itemAnimation);
 						break;
 					case 42:
 						writer.Write((byte)number);
 						writer.Write((short)Main.player[number].statMana);
 						writer.Write((short)Main.player[number].statManaMax);
 						break;
 					case 43:
 						writer.Write((byte)number);
 						writer.Write((short)number2);
 						break;
 					case 45:
 						writer.Write((byte)number);
 						writer.Write((byte)Main.player[number].team);
 						break;
 					case 46:
 						writer.Write((short)number);
 						writer.Write((short)number2);
 						break;
 					case 47:
 						writer.Write((short)number);
 						writer.Write((short)Main.sign[number].x);
 						writer.Write((short)Main.sign[number].y);
 						writer.Write(Main.sign[number].text);
 						writer.Write((byte)number2);
 						break;
 					case 48: {
 							Tile tile2 = Main.tile[number, (int)number2];
 							writer.Write((short)number);
 							writer.Write((short)number2);
 							writer.Write(tile2.liquid);
 							writer.Write(tile2.liquidType());
 							break;
 						}
 					case 50: {
 							writer.Write((byte)number);
 							for (int num20 = 0; num20 < 22; num20++) {
 								writer.Write((byte)Main.player[number].buffType[num20]);
 							}
 
 							break;
 						}
 					case 51:
 						writer.Write((byte)number);
 						writer.Write((byte)number2);
 						break;
 					case 52:
 						writer.Write((byte)number2);
 						writer.Write((short)number3);
 						writer.Write((short)number4);
 						break;
 					case 53:
 						writer.Write((short)number);
-						writer.Write((byte)number2);
+						if (ModNet.AllowVanillaClients)
+							writer.Write((byte)number2);
+						else
+							writer.Write((ushort)number2);
 						writer.Write((short)number3);
 						break;
 					case 54: {
 							writer.Write((short)number);
 							for (int num19 = 0; num19 < 5; num19++) {
-								writer.Write((byte)Main.npc[number].buffType[num19]);
+							if (ModNet.AllowVanillaClients)
+								writer.Write((byte)Main.npc[number].buffType[num17]);
+							else
+								writer.Write((ushort)Main.npc[number].buffType[num17]);
+
 								writer.Write((short)Main.npc[number].buffTime[num19]);
 							}
 
 							break;
 						}
 					case 55:
 						writer.Write((byte)number);
-						writer.Write((byte)number2);
+						if (ModNet.AllowVanillaClients)
+							writer.Write((byte)number2);
+						else
+							writer.Write((ushort)number2);
 						writer.Write((int)number3);
 						break;
 					case 56:
@@ -656,8 +_,11 @@
 						}
 					case 50:
 						writer.Write((byte)number);
-						for (int num16 = 0; num16 < 22; num16++) {
+						for (int num16 = 0; num16 < Player.MaxBuffs; num16++) {
+							if (ModNet.AllowVanillaClients)
-							writer.Write((byte)Main.player[number].buffType[num16]);
+								writer.Write((byte)Main.player[number].buffType[num16]);
+							else
+								writer.Write((ushort)Main.player[number].buffType[num16]);
 						}
 						break;
 					case 51:
@@ -671,19 +_,29 @@
 						break;
 					case 53:
 						writer.Write((short)number);
+						if (ModNet.AllowVanillaClients)
-						writer.Write((byte)number2);
+							writer.Write((byte)number2);
+						else
+							writer.Write((ushort)number2);
 						writer.Write((short)number3);
 						break;
 					case 54:
 						writer.Write((short)number);
 						for (int num17 = 0; num17 < 5; num17++) {
+							if (ModNet.AllowVanillaClients)
-							writer.Write((byte)Main.npc[number].buffType[num17]);
+								writer.Write((byte)Main.npc[number].buffType[num17]);
+							else
+								writer.Write((ushort)Main.npc[number].buffType[num17]);
+
 							writer.Write((short)Main.npc[number].buffTime[num17]);
 						}
 						break;
 					case 55:
 						writer.Write((byte)number);
+						if (ModNet.AllowVanillaClients)
-						writer.Write((byte)number2);
+							writer.Write((byte)number2);
+						else
+							writer.Write((ushort)number2);
 						writer.Write((int)number3);
 						break;
 					case 56:
@@ -1058,7 +_,10 @@
 
 				int num20 = (int)writer.BaseStream.Position;
 				writer.BaseStream.Position = position;
+				// TODO: Make this int or some other solution. This used to be cast to short. NetMessage.CheckBytes reads ushort though, so changing this is fine. We want to allow for more data primarily because writing tile
+				// chunks can go more than 32767 (and even 65535) bytes. This is because ModTileEntities can have large amounts of data especially when they sync Items and instanced GlobalItem classes are in play.
+				// Complications include AllowVanillaClients, message length byte length negotiation, and MessageBuffer.readBuffer having a fixed size.
-				writer.Write((short)num20);
+				writer.Write((ushort)num20);
 				writer.BaseStream.Position = num20;
 				if (Main.netMode == 1) {
 					if (!Netplay.Connection.Socket.IsConnected())
@@ -1347,7 +_,7 @@
 			int num5 = 0;
 			int num6 = 0;
 			byte b = 0;
-			byte[] array4 = new byte[13];
+			byte[] array4 = new byte[ModNet.AllowVanillaClients ? 13 : 14];
 			Tile tile = null;
 			for (int i = yStart; i < yStart + height; i++) {
 				for (int j = xStart; j < xStart + width; j++) {
@@ -1393,7 +_,7 @@
 								}
 							}
 
-							if (tile2.type == 88 && tile2.frameX % 54 == 0 && tile2.frameY % 36 == 0) {
+							if (TileLoader.IsDresser(tile2.type) && tile2.frameX % 54 == 0 && tile2.frameY % 36 == 0) {
 								short num8 = (short)Chest.FindChest(j, i);
 								if (num8 != -1) {
 									array[num] = num8;
@@ -1471,7 +_,16 @@
 
 						if (tile2.wall != 0) {
 							b |= 4;
-							array4[num5] = tile2.wall;
+							if (ModNet.AllowVanillaClients) {
+								array4[num5] = (byte)tile2.wall;
+							}
+							else {
+								byte[] wallBytes = BitConverter.GetBytes(tile2.wall);
+								array4[num5] = wallBytes[0];
+								num5++;
+								array4[num5] = wallBytes[1];
+							}
+
 							num5++;
 							if (tile2.wallColor() != 0) {
 								b3 |= 16;
@@ -1570,6 +_,14 @@
 				writer.Write(sign.text);
 			}
 
+			foreach (var item in TileEntity.ByPosition) {
+				Point16 pos = item.Key;
+				if (pos.X >= xStart && pos.X < xStart + width && pos.Y >= yStart && pos.Y < yStart + height) {
+					if (item.Value.type > 2)
+						array3[num3++] = (short)item.Value.ID;
+				}
+			}
+
 			writer.Write(num3);
 			for (int m = 0; m < num3; m++) {
 				TileEntity.Write(writer, TileEntity.ByID[array3[m]], false);
@@ -1668,7 +_,7 @@
 						}
 
 						if ((b3 & 4) == 4) {
-							tile.wall = reader.ReadByte();
+							tile.wall = ModNet.AllowVanillaClients ? reader.ReadByte() : reader.ReadUInt16();
 							if ((b & 16) == 16)
 								tile.wallColor(reader.ReadByte());
 						}
@@ -1747,10 +_,11 @@
 					buffer[i].totalData += streamLength;
 					buffer[i].checkBytes = true;
 				}
-				catch {
+				catch (Exception e) {
 					if (Main.netMode == 1) {
 						Main.menuMode = 15;
 						Main.statusText = Language.GetTextValue("Error.BadHeaderBufferOverflow");
+						Logging.Terraria.Error(Main.statusText, e);
 						Netplay.disconnect = true;
 					}
 					else {
@@ -1807,7 +_,7 @@
 #if SERVER
 					if (num < NetMessage.buffer.Length - 100)
 					{
-						Console.WriteLine("Error on message " + NetMessage.buffer[num + 2]);
+						Logging.ServerConsoleLine("Error on message " + NetMessage.buffer[num + 2], Level.Warn);
 					}
 #endif
 					i = 0;
@@ -1976,7 +_,7 @@
 			}
 
 			if (!flag) {
-				Console.WriteLine(Language.GetTextValue("Net.ServerAutoShutdown"));
+				Logging.ServerConsoleLine(Language.GetTextValue("Net.ServerAutoShutdown"));
 				WorldFile.saveWorld();
 				Netplay.disconnect = true;
 			}
@@ -2059,6 +_,7 @@
 					SendData(5, toWho, fromWho, null, plr, 58 + Main.player[plr].armor.Length + Main.player[plr].dye.Length + Main.player[plr].miscEquips.Length + 1 + m, Main.player[plr].miscDyes[m].prefix, 0f, 0, 0, 0);
 				}
 
+				PlayerHooks.SyncPlayer(Main.player[plr], toWho, fromWho, false);
 				if (!Netplay.Clients[plr].IsAnnouncementCompleted) {
 					Netplay.Clients[plr].IsAnnouncementCompleted = true;
 					BroadcastChatMessage(NetworkText.FromKey(Lang.mp[19].Key, new object[] {
@@ -2066,7 +_,7 @@
 					}), new Color(255, 240, 20), plr);
 
 					if (Main.dedServ) {
-						Console.WriteLine(Lang.mp[19].Format(Main.player[plr].name));
+						Logging.ServerConsoleLine(Lang.mp[19].Format(Main.player[plr].name));
 						return;
 					}
 				}
@@ -2081,7 +_,7 @@
 					}), new Color(255, 240, 20), plr);
 
 					if (Main.dedServ)
-						Console.WriteLine(Lang.mp[20].Format(Netplay.Clients[plr].Name));
+						Logging.ServerConsoleLine(Lang.mp[20].Format(Netplay.Clients[plr].Name));
 
 					Netplay.Clients[plr].Name = "Anonymous";
 				}
