--- src/Terraria/Terraria/Main.cs
+++ src/tModLoader/Terraria/Main.cs
@@ -26,7 +_,9 @@
 using System.Runtime.InteropServices;
 using System.Text;
 using System.Threading;
+#if WINDOWS
 using System.Windows.Forms;
+#endif
 using Terraria.Achievements;
 using Terraria.Audio;
 using Terraria.Chat;
@@ -51,6 +_,12 @@
 using Terraria.IO;
 using Terraria.Localization;
 using Terraria.Map;
+using Terraria.ModLoader;
+using Terraria.ModLoader.Audio;
+using Terraria.ModLoader.Core;
+using Terraria.ModLoader.Engine;
+using Terraria.ModLoader.IO;
+using Terraria.ModLoader.UI;
 using Terraria.Net;
 using Terraria.ObjectData;
 using Terraria.Social;
@@ -67,13 +_,14 @@
 {
 #if CLIENT
 	public class Main : Game
+
 #else
 	public class Main : Terraria.Server.Game
 #endif
 	{
 		public delegate void OnPlayerSelected(PlayerFileData player);
 
-		public const int curRelease = 193;
+		public const int curRelease = 194;
 		public const ulong WorldGeneratorVersion = 828928688129uL;
 		private const string versionStringBecauseTheyreTheSame = "v1.3.5.2";
 		public const int offLimitBorderTiles = 40;
@@ -162,13 +_,13 @@
 		public static Main instance;
 		public static string versionNumber = "v1.3.5.2";
 		public static string versionNumber2 = "v1.3.5.2";
-		public static string SavePath = Program.LaunchParameters.ContainsKey("-savedirectory") ? Program.LaunchParameters["-savedirectory"] : Platform.Current.GetStoragePath("Terraria");
+		public static string SavePath = Program.SavePath;
 		public static bool AnnouncementBoxDisabled = false;
 		public static int AnnouncementBoxRange = -1;
 		public static string AutogenSeedName;
 		public static Vector2 destroyerHB = new Vector2(0f, 0f);
 		public static FavoritesFile LocalFavoriteData = new FavoritesFile(SavePath + "/favorites.json", false);
-		public static FavoritesFile CloudFavoritesData = new FavoritesFile("/favorites.json", true);
+		public static FavoritesFile CloudFavoritesData = new FavoritesFile("/ModLoader/favorites.json", true);
 		public static FileMetadata WorldFileMetadata;
 		public static FileMetadata MapFileMetadata;
 		private AchievementManager _achievements;
@@ -122,6 +_,7 @@
 		public static ulong LobbyId = 0uL;
 		private static object _audioLock = new object();
 		private static Microsoft.Xna.Framework.Color[] _mapColorCacheArray = new Microsoft.Xna.Framework.Color[30000];
+		public static bool playerLoaded { get { return ActivePlayersCount > 0; } }
 		public static float expertLife = 2f;
 		public static float expertDamage = 2f;
 		public static float expertDebuffTime = 2f;
@@ -207,11 +_,13 @@
 		public static bool UseHeatDistortion = true;
 		public static int npcStreamSpeed = 60;
 		public static int musicError = 0;
+		public static int soundError = 0;
+		public static int ambientError = 0;
 		public static bool dedServFPS = false;
 		public static int dedServCount1 = 0;
 		public static int dedServCount2 = 0;
 		public static bool superFast = false;
-		public static int MaxShopIDs = 22;
+		public static int MaxShopIDs = 22 + 1;
 		public static bool[] hairLoaded = new bool[134];
 		public static bool[] wingsLoaded = new bool[40];
 		public static bool[] goreLoaded = new bool[1087];
@@ -285,7 +_,7 @@
 		public static float sunCircle;
 		public static int BlackFadeIn = 0;
 		public static bool noWindowBorder = false;
-		private RasterizerState Rasterizer = RasterizerState.CullCounterClockwise;
+		public RasterizerState Rasterizer = RasterizerState.CullCounterClockwise;
 		private static string _cachedTitle;
 		public static int ugBack = 0;
 		public static int oldUgBack = 0;
@@ -319,6 +_,9 @@
 		public static int lastMouseY;
 		public static bool mouseLeft;
 		public static bool mouseRight;
+		public static bool mouseMiddle;
+		public static bool mouseXButton1;
+		public static bool mouseXButton2;
 		public static bool isMouseLeftConsumedByUI = false;
 		public static float essScale = 1f;
 		public static int essDir = -1;
@@ -422,13 +_,13 @@
 		public static int wofB;
 		public static int wofF = 0;
 		public static int offScreenRange = 200;
-		private RenderTarget2D backWaterTarget;
+		public RenderTarget2D backWaterTarget;
 		public static RenderTarget2D waterTarget;
-		private RenderTarget2D tileTarget;
+		public RenderTarget2D tileTarget;
-		private RenderTarget2D blackTarget;
+		public RenderTarget2D blackTarget;
-		private RenderTarget2D tile2Target;
+		public RenderTarget2D tile2Target;
-		private RenderTarget2D wallTarget;
+		public RenderTarget2D wallTarget;
-		private RenderTarget2D backgroundTarget;
+		public RenderTarget2D backgroundTarget;
 		public static RenderTarget2D screenTarget;
 		public static RenderTarget2D screenTargetSwap;
 		public static int maxMapUpdates = 250000;
@@ -483,8 +_,8 @@
 		private static bool flameRingLoaded;
 		private Texture2D flameRingTexture;
 		private Texture2D mapDeathTexture;
-		private RenderTarget2D[,] mapTarget = new RenderTarget2D[mapTargetX, mapTargetY];
+		public RenderTarget2D[,] mapTarget = new RenderTarget2D[mapTargetX, mapTargetY];
-		private RenderTarget2D mapSectionTexture;
+		public RenderTarget2D mapSectionTexture;
 		public static bool[,] initMap = new bool[mapTargetX, mapTargetY];
 		public static bool[,] mapWasContentLost = new bool[mapTargetX, mapTargetY];
 		public Texture2D[] infoIconTexture = new Texture2D[14];
@@ -545,12 +_,12 @@
 		private int lastTileX;
 		private int firstTileY;
 		private int lastTileY;
-		private double bgParallax;
+		internal double bgParallax;
-		private int bgStart;
+		internal int bgStart;
-		private int bgLoops;
+		internal int bgLoops;
 		private int bgStartY;
 		private int bgLoopsY;
-		private int bgTop;
+		internal int bgTop;
 		public static int renderCount = 99;
 		public static GraphicsDeviceManager graphics;
 		public static SpriteBatch spriteBatch;
@@ -560,6 +_,7 @@
 		public static bool maxQ = true;
 		public static float gfxQuality = 1f;
 		public static float gfxRate = 0.01f;
+		public static Microsoft.Xna.Framework.Color DiscoColor => new Microsoft.Xna.Framework.Color(DiscoR, DiscoG, DiscoB);
 		public int DiscoStyle;
 		public static int DiscoR = 255;
 		public static int DiscoB = 0;
@@ -623,7 +_,7 @@
 		public static int maxDustToDraw = 6000;
 		public static int ActivePlayersCount = 0;
 		public static int maxNetPlayers = 255;
-		private static UICharacterSelect _characterSelectMenu = new UICharacterSelect();
+		internal static UICharacterSelect _characterSelectMenu = new UICharacterSelect();
 		private static UIWorldSelect _worldSelectMenu = new UIWorldSelect();
 		public static UIManageControls ManageControlsMenu = new UIManageControls();
 		public static UIAchievementsMenu AchievementsMenu = new UIAchievementsMenu();
@@ -655,7 +_,14 @@
 		public static int LogoA = 255;
 		public static int LogoB = 0;
 		public static bool LogoT = false;
-		public static string statusText = "";
+		private static string _statusText = "";
+		public static string statusText {
+			get => _statusText;
+			set {
+				Logging.LogStatusChange(_statusText, value);
+				_statusText = value;
+			}
+		}
 		public static string worldName = "";
 		public static int worldID;
 		public static int background = 0;
@@ -1059,7 +_,7 @@
 		public static AudioEngine engine;
 		public static SoundBank soundBank;
 		public static WaveBank waveBank;
-		public static Cue[] music = new Cue[42];
+		public static Music[] music = new Music[42];
 		public static float[] musicFade = new float[42];
 		public static float musicVolume = 0.75f;
 		public static float ambientVolume = 0.75f;
@@ -1212,9 +_,14 @@
 			0.75f
 		};
 		public static byte mouseTextColor = 0;
+		public static Microsoft.Xna.Framework.Color mouseTextColorReal
+			=> new Microsoft.Xna.Framework.Color(mouseTextColor / 255f, mouseTextColor / 255f, mouseTextColor / 255f, mouseTextColor / 255f);
 		public static int mouseTextColorChange = 1;
 		public static bool mouseLeftRelease = false;
 		public static bool mouseRightRelease = false;
+		public static bool mouseMiddleRelease = false;
+		public static bool mouseXButton1Release = false;
+		public static bool mouseXButton2Release = false;
 		public static bool playerInventory = false;
 		public static int stackSplit;
 		public static int stackCounter = 0;
@@ -1228,6 +_,7 @@
 		public static bool recFastScroll = false;
 		public static bool recBigList = false;
 		public static int recStart = 0;
+		public static Point16 trashSlotOffset = Point16.Zero;
 		public static Recipe[] recipe = new Recipe[Recipe.maxRecipes];
 		public static int[] availableRecipe = new int[Recipe.maxRecipes];
 		public static float[] availableRecipeY = new float[Recipe.maxRecipes];
@@ -1299,6 +_,7 @@
 			2488
 		};
 		public static bool Support4K = true;
+		public static bool Support8K = true; // provide option to disable 8k (but leave 4k)
 		private static int _renderTargetMaxSize = 2048;
 		private static GraphicsProfile _selectedGraphicsProfile = GraphicsProfile.Reach;
 		private static GraphicsProfile _currentGraphicsProfile = GraphicsProfile.Reach;
@@ -1307,6 +_,7 @@
 		public static float temporaryGUIScaleSlider = -1f;
 		public static bool temporaryGUIScaleSliderUpdate = false;
 		public static bool InGuideCraftMenu = false;
+		public static bool HidePlayerCraftingMenu = false;
 		public static bool InReforgeMenu = false;
 		public static Item HoverItem = new Item();
 		private static int backSpaceCount = 0;
@@ -1323,9 +_,9 @@
 		public static List<WorldFileData> WorldList = new List<WorldFileData>();
 		public static WorldFileData ActiveWorldFileData = new WorldFileData();
 		public static string WorldPath = Path.Combine(SavePath, "Worlds");
-		public static string CloudWorldPath = "worlds";
+		public static string CloudWorldPath = "ModLoader/worlds";
 		public static string PlayerPath = Path.Combine(SavePath, "Players");
-		public static string CloudPlayerPath = "players";
+		public static string CloudPlayerPath = "ModLoader/players";
 		public static Preferences Configuration = new Preferences(SavePath + Path.DirectorySeparatorChar + "config.json", false, false);
 		public static Preferences InputProfiles = new Preferences(SavePath + Path.DirectorySeparatorChar + "input profiles.json", false, false);
 		public static KeyboardState inputText;
@@ -1936,7 +_,7 @@
 		private static float exitScale = 0.8f;
 		private static bool mouseReforge = false;
 		private static float reforgeScale = 0.8f;
-		public static Player clientPlayer = new Player();
+		public static Player clientPlayer = new Player(false); // setup inventory is unnecessary
 		public static string getIP = defaultIP;
 		public static string getPort = Convert.ToString(Netplay.ListenPort);
 		public static bool menuMultiplayer = false;
@@ -2016,6 +_,7 @@
 		public List<int> DrawCacheProjsOverWiresUI = new List<int>(1000);
 		public static string oldStatusText = "";
 		public static bool autoShutdown = false;
+		public static bool showServerConsole = false;
 		public static bool serverGenLock = false;
 		public static int sundialCooldown = 0;
 		public static bool fastForwardTime = false;
@@ -2048,15 +_,15 @@
 		private int selectedMenu2 = -1;
 		public static int selectedPlayer = 0;
 		public static int selectedWorld = 0;
-		public static int menuMode = 0;
+		public static int menuMode = Interface.loadModsID;
 		public static int menuSkip = 0;
 		private static bool _needsLanguageSelect = true;
-		private static Item cpItem = new Item();
+		public static Item cpItem = new Item();
 		public int textBlinkerCount;
 		public int textBlinkerState;
 		public static string newWorldName = "";
-		private static int[] specX = new int[1000];
+		public static int[] specX = new int[1000];
-		private static int[] specY = new int[1000];
+		public static int[] specY = new int[1000];
 		private bool _imeToggle;
 		public static bool HoveringOverAnNPC = false;
 		public static string hoverItemName = "";
@@ -2066,7 +_,7 @@
 		private static int UI_ScreenAnchorX = screenWidth - 800;
 		private static int UIDisplay_ManaPerStar = 20;
 		private static float UIDisplay_LifePerHeart = 20f;
-		private static int rare = 0;
+		public static int rare = 0;
 		public static int hairStart = 0;
 		private static int oldHairStyle;
 		private static Microsoft.Xna.Framework.Color oldHairColor;
@@ -2078,7 +_,7 @@
 		public static Player dresserDummy;
 		private bool _needToSetupDrawInterfaceLayers = true;
 		private List<GameInterfaceLayer> _gameInterfaceLayers;
-		private static GameTime _drawInterfaceGameTime;
+		public static GameTime _drawInterfaceGameTime;
 		private static bool _MouseOversCanClear = false;
 		private static Vector2 _itemIconCacheScreenPosition;
 		private static int _itemIconCacheSelectedItemID;
@@ -2114,12 +_,12 @@
 		};
 		private static float tranSpeed = 0.05f;
 		private static float atmo = 0f;
-		private static float bgScale = 1f;
+		internal static float bgScale = 1f;
-		private static int bgW = (int)(1024f * bgScale);
+		internal static int bgW = (int)(1024f * bgScale);
-		private static Microsoft.Xna.Framework.Color backColor = Microsoft.Xna.Framework.Color.White;
+		internal static Microsoft.Xna.Framework.Color backColor = Microsoft.Xna.Framework.Color.White;
-		private static Microsoft.Xna.Framework.Color trueBackColor = backColor;
+		internal static Microsoft.Xna.Framework.Color trueBackColor = backColor;
-		private float screenOff;
+		internal float screenOff;
-		private float scAdj;
+		internal float scAdj;
 		private float cTop;
 		private bool _isDrawingOrUpdating;
 		private static SlotVector<ActiveSound> _trackedSounds = new SlotVector<ActiveSound>(4096);
@@ -2230,6 +_,8 @@
 			}
 		}
 
+		public static ulong TileFrameSeed => _tileFrameSeed;
+
 		public static Effect screenShader {
 			get {
 				return ScreenShaderRef.Value;
@@ -2368,6 +_,8 @@
 				itemAnimationsRegistered.Add(index);
 
 			itemAnimations[index] = animation;
+			if (ItemLoader.IsModItem(index))
+				ItemLoader.animations.Add(index);
 		}
 
 		public static void InitializeItemAnimations() {
@@ -2442,12 +_,13 @@
 			RegisterItemAnimation(549, new DrawAnimationVertical(5, 4));
 		}
 
-		public static void SetGraphicsProfile(GraphicsProfile profile) {
+		private static bool SetGraphicsProfile(GraphicsProfile profile) {
 			if (_currentGraphicsProfile == profile)
-				return;
+				return false;
 
 			_selectedGraphicsProfile = profile;
 			SetGraphicsProfileInternal();
+			return graphics.GraphicsDevice.GraphicsProfile == profile;
 		}
 
 		private static void SetGraphicsProfileInternal() {
@@ -2460,10 +_,14 @@
 					_renderTargetMaxSize = 2048;
 					break;
 				case GraphicsProfile.HiDef:
+					// update resolution related variables alongside TrySupporting8K
+					Configuration.Get("Support8K", ref Support8K);
+					int hiRes = Support8K ? 8192 : 4096;
-					maxScreenW = 4096;
+					maxScreenW = hiRes;
-					maxScreenH = 4096;
+					maxScreenH = hiRes;
-					_renderTargetMaxSize = 4096;
+					_renderTargetMaxSize = hiRes;
+					if (Support8K)
-					TrySupporting8K();
+						TrySupporting8K();
 					break;
 			}
 
@@ -2419,8 +_,8 @@
 					SetGraphicsProfileInternal();
 				}
 			}
-
-			instance.EnsureRenderTargetContent();
+			// Seems unnecessary as graphics profile is only changed very early on, before the first frame is rendered
+			// Main.instance.EnsureRenderTargetContent();
 		}
 
 		private static void TrySupporting8K() {
@@ -2449,6 +_,7 @@
 				flag2 = false;
 				anglerQuest = rand.Next(anglerQuestItemNetIDs.Length);
 				int num = anglerQuestItemNetIDs[anglerQuest];
+				//patch file: num, flag2
 				if (num == 2454 && (!hardMode || WorldGen.crimson))
 					flag2 = true;
 
@@ -2490,6 +_,8 @@
 
 				if ((num == 2476 || num == 2453 || num == 2473) && !flag)
 					flag2 = true;
+
+				ItemLoader.IsAnglerQuestAvailable(num, ref flag2);
 			}
 
 			NetMessage.SendAnglerQuest(-1);
@@ -2574,7 +_,8 @@
 		public static void SaveRecent() {
 			Directory.CreateDirectory(SavePath);
 			try {
+				if (File.Exists(SavePath + Path.DirectorySeparatorChar + "servers.dat"))
-				File.SetAttributes(SavePath + Path.DirectorySeparatorChar + "servers.dat", FileAttributes.Normal);
+					File.SetAttributes(SavePath + Path.DirectorySeparatorChar + "servers.dat", FileAttributes.Normal);
 			}
 			catch {
 			}
@@ -2643,7 +_,7 @@
 			try {
 				using (FileStream fileStream = new FileStream(SavePath + Path.DirectorySeparatorChar + "servers.dat", FileMode.Create)) {
 					using (BinaryWriter binaryWriter = new BinaryWriter(fileStream)) {
-						binaryWriter.Write(193);
+						binaryWriter.Write(194);
 						for (int i = 0; i < 10; i++) {
 							binaryWriter.Write(recentWorld[i]);
 							binaryWriter.Write(recentIP[i]);
@@ -2682,7 +_,7 @@
 			Configuration.Put("LightingThreads", Lighting.LightingThreads);
 			Configuration.Put("Parallax", caveParallax);
 			Configuration.Put("ShowItemText", showItemText);
-			Configuration.Put("LastLaunchedVersion", 193);
+			Configuration.Put("LastLaunchedVersion", 194);
 			Configuration.Put("ClientUUID", clientUUID);
 			Configuration.Put("UseSmartCursorForCommonBlocks", Player.SmartCursorSettings.SmartBlocksEnabled);
 			Configuration.Put("UseSmartAxeAfterSmartPickaxe", Player.SmartCursorSettings.SmartAxeAfterPickaxe);
@@ -2702,6 +_,7 @@
 			Configuration.Put("UseHeatDistortion", UseHeatDistortion);
 			Configuration.Put("WaveQuality", WaveQuality);
 			Configuration.Put("Support4K", Support4K);
+			Configuration.Put("Support8K", Support8K);
 			Configuration.Put("MouseColor", new Dictionary<string, byte> {
 					{ "R", mouseColor.R },
 					{ "G", mouseColor.G },
@@ -2716,6 +_,7 @@
 			Configuration.Put("QuickLaunch", SkipAssemblyLoad);
 			Configuration.Put("Zoom", GameZoomTarget);
 			Configuration.Put("UIScale", _uiScaleWanted);
+			ModLoader.ModLoader.SaveConfiguration();
 			bool flag = Configuration.Save(true);
 			return flag && PlayerInput.Save();
 		}
@@ -2685,6 +_,10 @@
 			}
 
 			Configuration.Load();
+#if SERVER
+			ModLoader.ModLoader.LoadConfiguration();
+			return;
+#endif
 			Configuration.Get("SmartCursorToggle", ref cSmartCursorToggle);
 			Configuration.Get("MapEnabled", ref mapEnabled);
 			Configuration.Get("InvasionBarMode", ref invasionProgressMode);
@@ -3005,6 +_,7 @@
 				};
 			}
 
+			ModLoader.ModLoader.LoadConfiguration();
 			PlayerInput.Load();
 			if (num2 < 165) {
 				try {
@@ -3017,7 +_,7 @@
 			mouseColorSlider.SetHSL(mouseColor);
 			mouseBorderColorSlider.SetHSL(MouseBorderColor);
 			mouseBorderColorSlider.Alpha = (float)MouseBorderColor.A / 255f;
-			if (num2 != 193)
+			if (num2 != 194 || ModLoader.ModLoader.LastLaunchedTModLoaderVersion != ModLoader.ModLoader.version)
 				SaveSettings();
 		}
 
@@ -3090,9 +_,11 @@
 				FileUtilities.Delete(PlayerList[i].Path, PlayerList[i].IsCloudSave);
 				FileUtilities.Delete(PlayerList[i].Path + ".bak", PlayerList[i].IsCloudSave);
 			}
+			//patch file
 			catch {
 			}
 
+			PlayerIO.ErasePlayer(PlayerList[i].Path, PlayerList[i].IsCloudSave);
 			try {
 				string path = PlayerList[i].Path.Substring(0, PlayerList[i].Path.Length - 4);
 				if (Directory.Exists(path))
@@ -3119,6 +_,7 @@
 					SocialAPI.Cloud.Delete(WorldList[i].Path);
 				}
 
+				WorldIO.EraseWorld(WorldList[i].Path, WorldList[i].IsCloudSave);
 				LoadWorlds();
 			}
 			catch {
@@ -3409,6 +_,12 @@
 								worldName = text3;
 							}
 
+							if (text.Length >= 8 && text.Substring(0, 8).ToLower() == "modpath=")
+								ModOrganizer.modPath = text.Substring(8);
+
+							if (text.Length >= 8 && text.Substring(0, 8).ToLower() == "modpack=")
+								ModOrganizer.commandLineModPack = text.Substring(8);
+
 							if (text.Length >= 5 && text.Substring(0, 5).ToLower() == "seed=") {
 								string autogenSeedName = text.Substring(5);
 								AutogenSeedName = autogenSeedName;
@@ -3524,7 +_,7 @@
 
 		public void DedServ() {
 			rand = new UnifiedRandom();
-			if (autoShutdown) {
+			if (autoShutdown && !showServerConsole) {
 				string text = "terraria" + rand.Next(2147483647);
 				Console.Title = text;
 #if WINDOWS
@@ -3536,17 +_,18 @@
 #endif
 			}
 			else {
-				Console.Title = "Terraria Server " + versionNumber2;
+				Console.Title = "Terraria Server " + versionNumber2 + " - " + ModLoader.ModLoader.versionedName;
 			}
 
 			dedServ = true;
 			showSplash = false;
 			Initialize();
+			ModLoader.ModLoader.Reload();
 			while (worldPathName == null || worldPathName == "") {
 				bool flag = true;
 				while (flag) {
 					LoadWorlds();
-					Console.WriteLine(Language.GetTextValue("CLI.Server", versionNumber2));
+					Console.WriteLine(Language.GetTextValue("CLI.Server", versionNumber2) + " - " + ModLoader.ModLoader.versionedName);
 					Console.WriteLine("");
 					for (int i = 0; i < WorldList.Count; i++) {
 						Console.WriteLine(string.Concat(new object[] {
@@ -3564,6 +_,8 @@
 					text3 = text3 + new string('\t', num - text3.Length / 8) + Language.GetTextValue("CLI.DeleteWorld_Description");
 					Console.WriteLine(text2);
 					Console.WriteLine(text3);
+					Console.WriteLine("m\t\tMods Menu");
+					Console.WriteLine("b\t\tMod Browser");
 					Console.WriteLine("");
 					Console.Write(Language.GetTextValue("CLI.ChooseWorld"));
 					string text4 = Console.ReadLine();
@@ -3787,6 +_,14 @@
 
 						goto IL_76F;
 					}
+					else if (text4 == "m" || text4 == "M") {
+						Interface.ServerModMenu();
+						continue;
+					}
+					else if (text4 == "b" || text4 == "b") {
+						Interface.ServerModBrowserMenu();
+						continue;
+					}
 					else {
 						try {
 							int num6 = Convert.ToInt32(text4);
@@ -3744,6 +_,7 @@
 			catch {
 			}
 
+			myPlayer = 255;
 			WorldGen.serverLoadWorld();
 			Console.WriteLine(Language.GetTextValue("CLI.Server", versionNumber));
 			Console.WriteLine("");
@@ -3910,35 +_,33 @@
 				}
 			}
 
+			//run one tick to JIT all the game content now rather than when a player connects
+			Logging.ServerConsoleLine("Running one update...");
+			Logging.tML.Info($"Server starting with AllowVanillaClients set to {ModNet.AllowVanillaClients}");
+			Update(new GameTime());
 			try {
 				Console.Clear();
+				Logging.ResetPastExceptions(); // "Running one update..." above.
 			}
 			catch {
 			}
 
 			Console.WriteLine(Language.GetTextValue("CLI.Server", versionNumber));
 			Console.WriteLine("");
-			Console.WriteLine(Language.GetTextValue("CLI.ListeningOnPort", Netplay.ListenPort));
+			Logging.ServerConsoleLine(Language.GetTextValue("CLI.ListeningOnPort", Netplay.ListenPort));
 			Console.WriteLine(Language.GetTextValue("CLI.HelpHint"));
 			Console.WriteLine("");
 			Console.Title = "Terraria Server: " + worldName;
 			Stopwatch stopwatch = new Stopwatch();
-			if (!autoShutdown)
+			if (!autoShutdown || showServerConsole)
 				startDedInput();
 
 			stopwatch.Start();
-			double num9 = 16.666666666666668;
-			double num10 = 0.0;
-			int num11 = 0;
-			Stopwatch stopwatch2 = new Stopwatch();
-			stopwatch2.Start();
+			double delta = 1000 / 60D;
+			double target = delta;
 			while (!Netplay.disconnect) {
-				double totalMilliseconds = stopwatch.Elapsed.TotalMilliseconds;
-				if (totalMilliseconds + num10 >= num9) {
-					num11++;
-					num10 += totalMilliseconds - num9;
-					stopwatch.Reset();
-					stopwatch.Start();
+				ServerHangWatchdog.Checkin();
+				{
 					if (oldStatusText != statusText) {
 						oldStatusText = statusText;
 						Console.WriteLine(statusText);
@@ -3946,24 +_,20 @@
 
 					if (Netplay.anyClients)
 						Update(new GameTime());
+					else
+						Netplay.OnUpdate();
 
 					if (OnTick != null)
 						OnTick();
 
-					double num12 = stopwatch.Elapsed.TotalMilliseconds + num10;
-					if (num12 < num9) {
-						int num13 = (int)(num9 - num12) - 1;
-						if (num13 > 1) {
-							Thread.Sleep(num13 - 1);
-							if (!Netplay.anyClients) {
-								num10 = 0.0;
-								Thread.Sleep(10);
-							}
-						}
-					}
-				}
+					double now = stopwatch.ElapsedMilliseconds;
+					double remaining = target - now;
+					target += delta; //new target
+					if (target < now) //can't catch up, reset target
+						target = now + delta;
 
-				Thread.Sleep(0);
+					Thread.Sleep(Math.Max((int)remaining, 0));
+				}
 			}
 		}
 
@@ -3862,12 +_,21 @@
 								num = text3.Length;
 						}
 
+						var modHelpList = CommandManager.GetHelp(CommandType.Console);
+						foreach (var entry in modHelpList)
+							if (entry.Item1.Length > num)
+								num = entry.Item1.Length;
+
 						int num2 = (num + 1) / 8;
 						for (int j = 0; j < list.Count; j++) {
 							string text4 = Language.Exists("CLI." + list[j] + "_Example") ? Language.GetTextValue("CLI." + list[j] + "_Example") : Language.GetTextValue("CLI." + list[j] + "_Command");
 							Console.WriteLine(text4 + new string('\t', num2 - text4.Length / 8) + Language.GetTextValue("CLI." + list[j] + "_Description"));
 						}
+
+						foreach (var entry in modHelpList)
+							Console.WriteLine(entry.Item1 + new string('\t', num2 - entry.Item1.Length / 8) + entry.Item2);
 					}
+					else if (CommandManager.HandleCommand(text, new ConsoleCommandCaller())) { }
 					else if (text == Language.GetTextValue("CLI.Settle_Command")) {
 						if (!Liquid.panicMode)
 							Liquid.StartPanic();
@@ -4113,12 +_,13 @@
 						Console.WriteLine(Language.GetTextValue("CLI.Port", Netplay.ListenPort));
 					}
 					else if (text == Language.GetTextValue("CLI.Version_Command")) {
-						Console.WriteLine(Language.GetTextValue("CLI.Server", versionNumber));
+						Console.WriteLine(Language.GetTextValue("CLI.Server", versionNumber) + " - " + ModLoader.ModLoader.versionedName);
 					}
 					else {
 						if (text == Language.GetTextValue("CLI.Clear_Command")) {
 							try {
 								Console.Clear();
+								Logging.ResetPastExceptions(); // "CLI.Clear_Command" above.
 								continue;
 							}
 							catch {
@@ -4273,7 +_,7 @@
 #if CLIENT
 			graphics = new GraphicsDeviceManager((Game)this);
 
-			base.Content.RootDirectory = "Content";
+			base.Content = new TMLContentManager(Content.ServiceProvider, "Content");
 #endif
 		}
 
@@ -4118,7 +_,7 @@
 
 		public static void InitLifeBytes() {
 			NPC nPC = new NPC();
-			for (int i = -65; i < 580; i++) {
+			for (int i = -65; i < NPCLoader.NPCCount; i++) {
 				if (i != 0) {
 					nPC.SetDefaults(i);
 					if (nPC.lifeMax > 32767 || nPC.boss)
@@ -4167,6 +_,13 @@
 		}
 
 		protected override void Initialize() {
+			DateTime date = DateTime.Now;
+			if (date.Month == 5 && date.Day == 17 || date.Month == 7 && date.Day == 8 || date.Month == 10 && date.Day == 24
+				|| date.Month == 6 && date.Day == 1 || date.Month == 4 || date.Day == 1 || new Random().Next(100) == 0) {
+				OurFavoriteColor.R = OurFavoriteColor.B;
+				OurFavoriteColor.B = 255;
+			}
+
 #if SERVER
 			netMode = 2;
 #endif
@@ -6452,7 +_,7 @@
 			}
 
 			for (int num12 = 0; num12 < 256; num12++) {
-				player[num12] = new Player();
+				player[num12] = new Player(false); // setup inventory is unnecessary
 			}
 
 			for (int num13 = 0; num13 < 1001; num13++) {
@@ -6606,6 +_,9 @@
 #if CLIENT
 			ClientInitialize();
 #endif
+#if SERVER
+			this.OpenSettings();
+#endif
 		}
 
 		private void ClientInitialize() {
@@ -6674,9 +_,11 @@
 			}
 
 			if (autoJoin) {
+				ModLoader.ModLoader.OnSuccessfulLoad += () => {
-				LoadPlayers();
+					LoadPlayers();
-				menuMode = 1;
+					menuMode = 1;
-				menuMultiplayer = true;
+					menuMultiplayer = true;
+				};
 			}
 
 			fpsTimer.Start();
@@ -6903,7 +_,8 @@
 
 		public T OurLoad<T>(string path) {
 			T result;
-			lock (globalTextureLocker) {
+			GLCallLocker.Enter(globalTextureLocker);
+			try {
 				if (TexturePackSupport.Enabled && typeof(T) == t2d) {
 					Texture2D texture2D;
 					bool flag2 = TexturePackSupport.FetchTexture(path + ".png", out texture2D);
@@ -6915,28 +_,33 @@
 
 				result = base.Content.Load<T>(path);
 			}
+			finally {
+				Monitor.Exit(globalTextureLocker);
+			}
 
 			return result;
 		}
 
 		protected override void LoadContent() {
+			HiDefGraphicsIssues.OnLoadContent();
 			Configuration.Load();
+			ModLoader.ModLoader.MigrateSettings();
 			Configuration.Get("UseExperimentalFeatures", ref UseExperimentalFeatures);
 			if (UseExperimentalFeatures)
 				TexturePackSupport.Enabled = true;
 
 			Configuration.Get("Support4K", ref Support4K);
 			bool flag = Support4K && base.GraphicsDevice.Adapter.IsProfileSupported(GraphicsProfile.HiDef);
-			if (GraphicsAdapter.DefaultAdapter.CurrentDisplayMode.Width <= 1920 && GraphicsAdapter.DefaultAdapter.CurrentDisplayMode.Height <= 1200)
-				flag = false;
-
-			if (Support4K && flag)
-				Main.SetGraphicsProfile(GraphicsProfile.HiDef);
-
-			TexturePackSupport.FindTexturePack();
+			// (resolution check removed) tModLoader will attempt to use HiDef even if the computer resolution doesn't need it to support newer shaders.
+			if (Support4K && flag) {
+				if (Main.SetGraphicsProfile(GraphicsProfile.HiDef))
+					return; // changing the graphics profile triggers a device recreation and XNA will call `LoadContent` again
+			}
+
+			TexturePackSupport.FindTexturePacks();
 			TextureManager.Initialize();
 			mapSectionTexture = new RenderTarget2D(base.GraphicsDevice, 200, 150);
-			ShaderContentManager = new ContentManager(base.Content.ServiceProvider, base.Content.RootDirectory);
+			ShaderContentManager = new TMLContentManager(base.Content.ServiceProvider, base.Content.RootDirectory);
 			PixelShaderRef.Value = ShaderContentManager.Load<Effect>("PixelShader");
 			TileShaderRef.Value = ShaderContentManager.Load<Effect>("TileShader");
 			ScreenShaderRef.Value = ShaderContentManager.Load<Effect>("ScreenShader");
@@ -6725,6 +_,9 @@
 			LoadFonts();
 			Mount.Initialize();
 			Minecart.Initialize();
+			// move instance creation from class constructor to main thread to avoid deadlocks from content loading on JIT thread with FNA
+			CaptureManager.Instance = new CaptureManager();
+			LiquidRenderer.Instance = new LiquidRenderer();
 		}
 
 		private void LoadFonts() {
@@ -7649,6 +_,8 @@
 					}));
 				}
 			}
+
+			UICommon.LoadTextures();
 		}
 
 		private static void LoadMusic() {
@@ -7320,6 +_,9 @@
 		}
 
 		protected void UpdateAudio() {
+			if (waveBank == null) //supress extra exceptions from audio engine failing to load
+				return;
+
 #if !WINDOWS
 			if (Main.engine != null)
 				Main.engine.Update();
@@ -7996,6 +_,8 @@
 					bool flag13 = false;
 					Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle((int)screenPosition.X, (int)screenPosition.Y, screenWidth, screenHeight);
 					int num = 5000;
+					int modMusic = -1;
+					MusicPriority modPriority = MusicPriority.None;
 					for (int l = 0; l < 200; l++) {
 						if (npc[l].active) {
 							int num2 = 0;
@@ -8174,19 +_,24 @@
 							}
 
 						IL_4D9:
-							if (NPCID.Sets.BelongsToInvasionOldOnesArmy[npc[l].type])
+							if (npc[l].type < NPCID.Sets.BelongsToInvasionOldOnesArmy.Length && NPCID.Sets.BelongsToInvasionOldOnesArmy[npc[l].type])
 								num2 = 12;
 
 							if (num2 == 0 && npc[l].boss)
 								num2 = 1;
 
-							if (num2 == 0)
+							if (num2 == 0 && (npc[l].modNPC == null || npc[l].modNPC.music < 0))
 								goto IL_5F6;
 
 							Microsoft.Xna.Framework.Rectangle value = new Microsoft.Xna.Framework.Rectangle((int)(npc[l].position.X + npc[l].width / 2) - num, (int)(npc[l].position.Y + npc[l].height / 2) - num, num * 2, num * 2);
 							if (!rectangle.Intersects(value))
 								goto IL_5F6;
 
+							if (npc[l].modNPC != null && npc[l].modNPC.music >= 0 && (modMusic < 0 || npc[l].modNPC.musicPriority > modPriority)) {
+								modMusic = npc[l].modNPC.music;
+								modPriority = npc[l].modNPC.musicPriority;
+							}
+
 							if (num2 == 1) {
 								flag2 = true;
 								break;
@@ -8258,9 +_,11 @@
 							goto IL_4D9;
 						}
 
-					IL_5F6:;
+					IL_5F6:
+						;
 					}
 
+					ModHooks.UpdateMusic(ref modMusic, ref modPriority);
 					int num3 = (int)((screenPosition.X + screenWidth / 2) / 16f);
 					if (musicVolume == 0f) {
 						newMusic = 0;
@@ -8275,9 +_,15 @@
 						float num4 = maxTilesX / 4200;
 						num4 *= num4;
 						float num5 = (float)((double)((screenPosition.Y + screenHeight / 2) / 16f - (65f + 10f * num4)) / (worldSurface / 5.0));
+						if (modPriority >= MusicPriority.BossHigh) {
+							newMusic = modMusic;
+						}
-						if (flag8) {
+						else if (flag8) {
 							newMusic = 38;
 						}
+						else if (modPriority >= MusicPriority.BossMedium) {
+							newMusic = modMusic;
+						}
 						else if (flag10) {
 							newMusic = 37;
 						}
@@ -8286,6 +_,9 @@
 						}
 						else if (flag7) {
 							newMusic = 24;
+						}
+						else if (modPriority >= MusicPriority.BossLow) {
+							newMusic = modMusic;
 						}
 						else if (flag3) {
 							newMusic = 12;
@@ -8302,6 +_,9 @@
 						else if (flag6) {
 							newMusic = 25;
 						}
+						else if (modPriority >= MusicPriority.Event) {
+							newMusic = modMusic;
+						}
 						else if (flag9) {
 							newMusic = 35;
 						}
@@ -8311,6 +_,9 @@
 						else if (flag13) {
 							newMusic = 41;
 						}
+						else if (modPriority >= MusicPriority.Environment) {
+							newMusic = modMusic;
+						}
 						else if (player[myPlayer].ZoneSandstorm) {
 							newMusic = 40;
 						}
@@ -8323,6 +_,9 @@
 						else if (num5 < 1f) {
 							newMusic = 15;
 						}
+						else if (modPriority >= MusicPriority.BiomeHigh) {
+							newMusic = modMusic;
+						}
 						else if (tile[(int)(player[myPlayer].Center.X / 16f), (int)(player[myPlayer].Center.Y / 16f)].wall == 87) {
 							newMusic = 26;
 						}
@@ -8341,6 +_,9 @@
 							else
 								newMusic = 16;
 						}
+						else if (modPriority >= MusicPriority.BiomeMedium) {
+							newMusic = modMusic;
+						}
 						else if (player[myPlayer].ZoneDungeon) {
 							newMusic = 23;
 						}
@@ -8356,6 +_,9 @@
 							else
 								newMusic = 14;
 						}
+						else if (modPriority >= MusicPriority.BiomeLow) {
+							newMusic = modMusic;
+						}
 						else if ((double)player[myPlayer].position.Y > worldSurface * 16.0 + screenHeight / 2) {
 							if (player[myPlayer].ZoneHoly) {
 								newMusic = 11;
@@ -8563,6 +_,9 @@
 
 						if (musicBox == 39)
 							newMusic = 41;
+
+						if (musicBox >= maxMusic)
+							newMusic = musicBox;
 					}
 
 					curMusic = newMusic;
@@ -8578,11 +_,14 @@
 							curMusic = 0;
 						}
 
-						if (NPC.MoonLordCountdown == 1 && curMusic >= 1 && curMusic < 42)
+						if (NPC.MoonLordCountdown == 1 && curMusic >= 1 && curMusic < music.Length)
 							musicFade[curMusic] = 0f;
 					}
 
-					for (int m = 1; m < 42; m++) {
+					for (int m = 1; m < music.Length; m++) {
+						if (music[m] == null)
+							continue; // Race condition, Music is resized during load.
+
 						if (m == 28) {
 							if (cloudAlpha > 0f && (double)player[myPlayer].position.Y < worldSurface * 16.0 + screenHeight / 2 && !player[myPlayer].ZoneSnow) {
 								if (ambientVolume == 0f) {
@@ -8590,7 +_,7 @@
 										music[m].Stop(AudioStopOptions.Immediate);
 								}
 								else if (!music[m].IsPlaying) {
-									music[m] = soundBank.GetCue("Music_" + m);
+									music[m].Reset();
 									music[m].Play();
 									music[m].SetVariable("Volume", musicFade[m] * ambientVolume);
 								}
@@ -8625,7 +_,7 @@
 						}
 						else if (m == curMusic) {
 							if (!music[m].IsPlaying) {
-								music[m] = soundBank.GetCue("Music_" + m);
+								music[m].Reset();
 								music[m].Play();
 								music[m].SetVariable("Volume", musicFade[m] * musicVolume * num8);
 							}
@@ -8636,8 +_,11 @@
 
 								music[m].SetVariable("Volume", musicFade[m] * musicVolume * num8);
 							}
+
+							music[m].CheckBuffer();
 						}
 						else if (music[m].IsPlaying) {
+							music[m].CheckBuffer();
 							if (musicFade[curMusic] > 0.25f)
 								musicFade[m] -= 0.005f;
 							else if (curMusic == 0)
@@ -9803,6 +_,7 @@
 		}
 
 		protected override void Update(GameTime gameTime) {
+			FallbackSyncContext.Update();
 			if (!IsEnginePreloaded) {
 				IsEnginePreloaded = true;
 				if (Main.OnEnginePreload != null)
@@ -10465,20 +_,27 @@
 
 			if (!_isDrawingOrUpdating) {
 				_isDrawingOrUpdating = true;
+				try {
-				DoUpdate(gameTime);
+					DoUpdate(gameTime);
-				CinematicManager.Instance.Update(gameTime);
+					CinematicManager.Instance.Update(gameTime);
-				if (netMode == 2) {
+					if (netMode == 2) {
-					for (int i = 0; i < 256; i++) {
+						for (int i = 0; i < 256; i++) {
-						if (Netplay.Clients[i].Socket != null)
+							if (Netplay.Clients[i].Socket != null)
-							Netplay.Clients[i].Socket.SendQueuedPackets();
+								Netplay.Clients[i].Socket.SendQueuedPackets();
+						}
+					}
+					else if (netMode == 1) {
+						Netplay.Connection.Socket.SendQueuedPackets();
 					}
 				}
-				else if (netMode == 1) {
-					Netplay.Connection.Socket.SendQueuedPackets();
+				catch (Exception e) {
+					Logging.Terraria.Error(e);
 				}
 
 				_isDrawingOrUpdating = false;
 			}
+
+			base.Update(gameTime); //Vanilla bug, moved from DoUpdate. Early returns fail to call base.Update, and prevent streaming audio from playing
 		}
 
 		public void UpdateViewZoomKeys() {
@@ -9858,6 +_,8 @@
 			if (InGameUI != null)
 				InGameUI.Update(gameTime);
 
+			ModHooks.UpdateUI(gameTime);
+			PlayerInput.ScrollWheelDeltaForUI = 0;
 			PlayerInput.SetZoom_Unscaled();
 			MouseOversTryToClear();
 			PlayerInput.ResetInputsOnActiveStateChange();
@@ -9871,6 +_,7 @@
 				_hasPendingNetmodeChange = false;
 			}
 
+			Netplay.OnUpdate(); // TODO, why do we add this?
 			if (CaptureManager.Instance.IsCapturing)
 				return;
 
@@ -10710,7 +_,9 @@
 				}
 
 				hasFocus = base.IsActive;
+#if WINDOWS
-				hasFocus = Form.ActiveForm == Control.FromHandle(base.Window.Handle) as Form;
+				Main.hasFocus = (Form.ActiveForm == Control.FromHandle(base.Window.Handle) as Form);
+#endif
 				if (!gameMenu || netMode == 2) {
 					WorldFile.tempRaining = raining;
 					WorldFile.tempRainTime = rainTime;
@@ -10067,6 +_,9 @@
 
 					mouseLeftRelease = false;
 					mouseRightRelease = false;
+					mouseMiddleRelease = false;
+					mouseXButton1Release = false;
+					mouseXButton2Release = false;
 					if (gameMenu)
 						UpdateMenu();
 
@@ -10869,6 +_,9 @@
 				if (player[myPlayer].zone4 != clientPlayer.zone4)
 					flag = true;
 
+				if (!PlayerHooks.CustomBiomesMatch(player[myPlayer], clientPlayer))
+					flag = true;
+
 				if (flag)
 					NetMessage.SendData(36, -1, -1, null, myPlayer, 0f, 0f, 0f, 0, 0, 0);
 
@@ -10237,7 +_,7 @@
 				}
 
 				bool flag2 = false;
-				for (int num4 = 0; num4 < 22; num4++) {
+				for (int num4 = 0; num4 < Player.MaxBuffs; num4++) {
 					if (player[myPlayer].buffType[num4] != clientPlayer.buffType[num4])
 						flag2 = true;
 				}
@@ -10920,6 +_,8 @@
 
 				if (flag4)
 					NetMessage.SendData(115, -1, -1, null, myPlayer, 0f, 0f, 0f, 0, 0, 0);
+
+				PlayerHooks.SendClientChanges(player[myPlayer], clientPlayer);
 			}
 
 			if (netMode == 1)
@@ -10351,11 +_,13 @@
 				if (playerInventory)
 					player[myPlayer].AdjTiles();
 
+				PlayerHooks.UpdateAutopause(player[myPlayer]);
 				gamePaused = true;
 				return;
 			}
 
 			gamePaused = false;
+			ModHooks.PreUpdateEntities();
 			if (!dedServ && (double)screenPosition.Y < worldSurface * 16.0 + 16.0 && netMode != 2) {
 				Star.UpdateStars();
 				Cloud.UpdateClouds();
@@ -11024,6 +_,9 @@
 			PortalHelper.UpdatePortalPoints();
 			tileSolid[379] = false;
 			ActivePlayersCount = 0;
+			if (netMode == 1 && Netplay.syncingWorld)
+				goto IL_1B52;
+
 			int num12 = 0;
 			while (num12 < 255) {
 				if (ignoreErrors) {
@@ -11050,6 +_,7 @@
 			}
 
 			_gameUpdateCount += 1u;
+			ModHooks.MidUpdatePlayerNPC();
 			if (netMode != 1) {
 				try {
 					NPC.SpawnNPC();
@@ -11108,6 +_,7 @@
 				goto IL_19A7;
 			}
 
+			ModHooks.MidUpdateNPCGore();
 			int num15 = 0;
 			while (num15 < 500) {
 				if (ignoreErrors) {
@@ -11134,6 +_,7 @@
 				goto IL_19EE;
 			}
 
+			ModHooks.MidUpdateGoreProjectile();
 			LockOnHelper.SetUP();
 			int num16 = 0;
 			while (num16 < 1000) {
@@ -11164,6 +_,7 @@
 
 			ProjectileUpdateLoopIndex = -1;
 			LockOnHelper.SetDOWN();
+			ModHooks.MidUpdateProjectileItem();
 			int num17 = 0;
 			while (num17 < 400) {
 				if (ignoreErrors) {
@@ -11190,6 +_,7 @@
 				goto IL_1A9B;
 			}
 
+			ModHooks.MidUpdateItemDust();
 			if (ignoreErrors) {
 				try {
 					Dust.UpdateDust();
@@ -11207,6 +_,8 @@
 
 			Dust.UpdateDust();
 		IL_1AF0:
+			ModHooks.MidUpdateDustTime();
+
 			if (netMode != 2) {
 				CombatText.UpdateCombatText();
 				ItemText.UpdateItemText();
@@ -11225,8 +_,9 @@
 
 			UpdateTime();
 		IL_1B1E:
-			tileSolid[379] = true;
+			ModHooks.MidUpdateTimeWorld();
 
+			tileSolid[379] = true;
 			if (netMode != 1) {
 				if (ignoreErrors) {
 					try {
@@ -11244,6 +_,8 @@
 			}
 
 		IL_1B52:
+			ModHooks.MidUpdateInvasionNet();
+
 			if (ignoreErrors) {
 				try {
 					if (netMode == 2)
@@ -11267,6 +_,8 @@
 				UpdateClient();
 
 			IL_1B9A:
+			ModHooks.PostUpdateEverything();
+
 			if (ignoreErrors) {
 				try {
 					for (int num19 = 0; num19 < numChatLines; num19++) {
@@ -10579,8 +_,6 @@
 				if (cameraLerp > 1f)
 					cameraLerp = 1f;
 			}
-
-			base.Update(gameTime);
 		}
 
 		private static void DoUpdate_AnimateCursorColors() {
@@ -11351,7 +_,7 @@
 		}
 
 		private static void DoUpdate_Enter_ToggleChat() {
-			if (keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Enter) && netMode == 1 && !keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.LeftAlt) && !keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.RightAlt) && hasFocus) {
+			if (keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Enter) && !keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.LeftAlt) && !keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.RightAlt) && hasFocus) {
 				if (chatRelease && !drawingPlayerChat && !editSign && !editChest && !gameMenu && !keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Escape)) {
 					PlaySound(10, -1, -1, 1, 1f, 0f);
 					drawingPlayerChat = true;
@@ -11406,7 +_,8 @@
 				PlaySound(12, -1, -1, 1, 1f, 0f);
 
 			if (inputTextEnter && chatRelease) {
-				if (chatText != "") {
+				var handled = chatText.Length > 0 && chatText[0] == '/' && CommandManager.HandleCommand(chatText, new ChatCommandCaller());
+				if (chatText != "" && !handled) {
 					ChatMessage chatMessage = new ChatMessage(chatText);
 					ChatManager.Commands.ProcessOutgoingMessage(chatMessage);
 					NetMessage.SendChatMessageFromClient(chatMessage);
@@ -10700,6 +_,7 @@
 
 		private void DoUpdate_HandleInput() {
 			PlayerInput.UpdateInput();
+			ModHooks.PostUpdateInput();
 			UpdateViewZoomKeys();
 			PlayerInput.SetZoom_Unscaled();
 			UILinkPointNavigator.Update();
@@ -11252,6 +_,7 @@
 					tileFrame[464] = 0;
 			}
 
+			TileLoader.AnimateTiles();
 			CritterCages();
 		}
 
@@ -11409,6 +_,8 @@
 			wallFrame[144] = 0;
 			if (wallFrameCounter[144] > num2 * (16 + num3 * 2))
 				wallFrameCounter[144] = 0;
+
+			WallLoader.AnimateWalls();
 		}
 
 		private void DoUpdate_AnimateWaterfalls() {
@@ -12597,15 +_,15 @@
 			}
 
 			new Microsoft.Xna.Framework.Color(mouseTextColor, mouseTextColor, mouseTextColor, mouseTextColor);
+			Vector2 vector = fontMouseText.MeasureString(cursorText);
 			if (HoverItem.type > 0) {
 				MouseText_DrawItemTooltip(rare, diff, num, num2);
 				return;
 			}
 
 			if (buffString != "" && buffString != null)
-				MouseText_DrawBuffString(ref num, ref num2);
+				MouseText_DrawBuffString(ref num, ref num2, (int)vector.Y);
 
-			Vector2 vector = fontMouseText.MeasureString(cursorText);
 			if (hackedScreenHeight != -1 && hackedScreenWidth != -1) {
 				if (num + vector.X + 4f > hackedScreenWidth)
 					num = (int)(hackedScreenWidth - vector.X - 4f);
@@ -12695,105 +_,165 @@
 			if (HoverItem.ranged && player[myPlayer].shroomiteStealth)
 				HoverItem.knockBack *= 1f + (1f - player[myPlayer].stealth) * 0.5f;
 
-			int num3 = 20;
+			int num3 = 20 + HoverItem.ToolTip?.Lines ?? 0;
 			int num4 = 1;
 			string[] array = new string[num3];
 			bool[] array2 = new bool[num3];
 			bool[] array3 = new bool[num3];
+			string[] tooltipNames = new string[num3];
 			for (int i = 0; i < num3; i++) {
 				array2[i] = false;
 				array3[i] = false;
 			}
 
 			array[0] = HoverItem.HoverName;
+			tooltipNames[0] = "ItemName";
 			if (HoverItem.favorited) {
 				array[num4++] = Lang.tip[56].Value;
+				tooltipNames[num4 - 1] = "Favorite";
 				array[num4++] = Lang.tip[57].Value;
+				tooltipNames[num4 - 1] = "FavoriteDesc";
 			}
 
 			if (HoverItem.social) {
 				array[num4] = Lang.tip[0].Value;
+				tooltipNames[num4] = "Social";
 				num4++;
 				array[num4] = Lang.tip[1].Value;
+				tooltipNames[num4] = "SocialDesc";
 				num4++;
 			}
 			else {
 				if (HoverItem.damage > 0 && (!HoverItem.notAmmo || HoverItem.useStyle > 0) && (HoverItem.type < 71 || HoverItem.type > 74 || player[myPlayer].HasItem(905))) {
-					float num5 = 5E-06f;
-					int damage = HoverItem.damage;
-					if (HoverItem.melee) {
-						array[num4] = string.Concat((int)(player[myPlayer].meleeDamage * damage + num5));
-						string[] array4;
-						IntPtr intPtr;
-						(array4 = array)[(int)(intPtr = (IntPtr)num4)] = array4[(int)intPtr] + Lang.tip[2].Value;
-					}
-					else if (HoverItem.ranged) {
-						float num6 = damage * player[myPlayer].rangedDamage;
-						if (HoverItem.useAmmo == AmmoID.Arrow || HoverItem.useAmmo == AmmoID.Stake)
-							num6 *= player[myPlayer].arrowDamage;
-
-						if (HoverItem.useAmmo == AmmoID.Arrow && player[myPlayer].archery)
-							num6 *= 1.2f;
-
-						if (HoverItem.useAmmo == AmmoID.Bullet || HoverItem.useAmmo == AmmoID.CandyCorn)
-							num6 *= player[myPlayer].bulletDamage;
-
-						if (HoverItem.useAmmo == AmmoID.Rocket || HoverItem.useAmmo == AmmoID.StyngerBolt || HoverItem.useAmmo == AmmoID.JackOLantern || HoverItem.useAmmo == AmmoID.NailFriendly)
-							num6 *= player[myPlayer].rocketDamage;
-
-						array[num4] = string.Concat((int)(num6 + num5));
-						string[] array5;
-						IntPtr intPtr2;
-						(array5 = array)[(int)(intPtr2 = (IntPtr)num4)] = array5[(int)intPtr2] + Lang.tip[3].Value;
-					}
-					else if (HoverItem.magic) {
-						array[num4] = string.Concat((int)(player[myPlayer].magicDamage * damage + num5));
-						string[] array6;
-						IntPtr intPtr3;
-						(array6 = array)[(int)(intPtr3 = (IntPtr)num4)] = array6[(int)intPtr3] + Lang.tip[4].Value;
-					}
-					else if (HoverItem.thrown) {
-						array[num4] = string.Concat((int)(player[myPlayer].thrownDamage * damage + num5));
-						string[] array7;
-						IntPtr intPtr4;
-						(array7 = array)[(int)(intPtr4 = (IntPtr)num4)] = array7[(int)intPtr4] + Lang.tip[58].Value;
-					}
-					else if (HoverItem.summon) {
-						if (HoverItem.type == 3829 || HoverItem.type == 3830 || HoverItem.type == 3831)
-							array[num4] = string.Concat((int)((player[myPlayer].minionDamage * damage + num5) * 3f));
-						else
-							array[num4] = string.Concat((int)(player[myPlayer].minionDamage * damage + num5));
-
-						string[] array8;
-						IntPtr intPtr5;
-						(array8 = array)[(int)(intPtr5 = (IntPtr)num4)] = array8[(int)intPtr5] + Lang.tip[53].Value;
-					}
-					else {
-						array[num4] = string.Concat(damage);
-						string[] array4;
-						IntPtr intPtr;
-						(array4 = array)[(int)(intPtr = (IntPtr)num4)] = array4[(int)intPtr] + Lang.tip[55].Value;
-					}
-
+					LocalizedText tip;
+					if (HoverItem.melee)
+						tip = Lang.tip[2];
+					else if (HoverItem.ranged)
+						tip = Lang.tip[3];
+					else if (HoverItem.magic)
+						tip = Lang.tip[4];
+					else if (HoverItem.thrown)
+						tip = Lang.tip[58];
+					else if (HoverItem.summon)
+						tip = Lang.tip[53];
+					else
+						tip = Lang.tip[55];
+
+					Player player = Main.player[myPlayer];
+					int damage = player.GetWeaponDamage(HoverItem);
+					if (HoverItem.type == 3829 || HoverItem.type == 3830 || HoverItem.type == 3831)
+						damage *= 3;
+
+					array[num4] = string.Concat(damage, tip.Value);
+					/*					float num5 = 5E-06f;
+										int damage = Main.HoverItem.damage;
+										if (Main.HoverItem.melee)
+										{
+											array[num4] = string.Concat((int)(Main.player[Main.myPlayer].meleeDamage * (float)damage + num5));
+											string[] array4;
+											IntPtr intPtr;
+											(array4 = array)[(int)(intPtr = (IntPtr)num4)] = array4[(int)intPtr] + Lang.tip[2].Value;
+										}
+										else if (Main.HoverItem.ranged)
+										{
+											float num6 = (float)damage * Main.player[Main.myPlayer].rangedDamage;
+											if (Main.HoverItem.useAmmo == AmmoID.Arrow || Main.HoverItem.useAmmo == AmmoID.Stake)
+											{
+												num6 *= Main.player[Main.myPlayer].arrowDamage;
+											}
+											if (Main.HoverItem.useAmmo == AmmoID.Arrow && Main.player[Main.myPlayer].archery)
+											{
+												num6 *= 1.2f;
+											}
+											if (Main.HoverItem.useAmmo == AmmoID.Bullet || Main.HoverItem.useAmmo == AmmoID.CandyCorn)
+											{
+												num6 *= Main.player[Main.myPlayer].bulletDamage;
+											}
+											if (Main.HoverItem.useAmmo == AmmoID.Rocket || Main.HoverItem.useAmmo == AmmoID.StyngerBolt || Main.HoverItem.useAmmo == AmmoID.JackOLantern || Main.HoverItem.useAmmo == AmmoID.NailFriendly)
+											{
+												num6 *= Main.player[Main.myPlayer].rocketDamage;
+											}
+											array[num4] = string.Concat((int)(num6 + num5));
+											string[] array5;
+											IntPtr intPtr2;
+											(array5 = array)[(int)(intPtr2 = (IntPtr)num4)] = array5[(int)intPtr2] + Lang.tip[3].Value;
+										}
+										else if (Main.HoverItem.magic)
+										{
+											array[num4] = string.Concat((int)(Main.player[Main.myPlayer].magicDamage * (float)damage + num5));
+											string[] array6;
+											IntPtr intPtr3;
+											(array6 = array)[(int)(intPtr3 = (IntPtr)num4)] = array6[(int)intPtr3] + Lang.tip[4].Value;
+										}
+										else if (Main.HoverItem.thrown)
+										{
+											array[num4] = string.Concat((int)(Main.player[Main.myPlayer].thrownDamage * (float)damage + num5));
+											string[] array7;
+											IntPtr intPtr4;
+											(array7 = array)[(int)(intPtr4 = (IntPtr)num4)] = array7[(int)intPtr4] + Lang.tip[58].Value;
+										}
+										else if (Main.HoverItem.summon)
+										{
+											if (Main.HoverItem.type == 3829 || Main.HoverItem.type == 3830 || Main.HoverItem.type == 3831)
+											{
+												array[num4] = string.Concat((int)((Main.player[Main.myPlayer].minionDamage * (float)damage + num5) * 3f));
+											}
+											else
+											{
+												array[num4] = string.Concat((int)(Main.player[Main.myPlayer].minionDamage * (float)damage + num5));
+											}
+											string[] array8;
+											IntPtr intPtr5;
+											(array8 = array)[(int)(intPtr5 = (IntPtr)num4)] = array8[(int)intPtr5] + Lang.tip[53].Value;
+										}
+										else
+										{
+											array[num4] = string.Concat(damage);
+											string[] array4;
+											IntPtr intPtr;
+											(array4 = array)[(int)(intPtr = (IntPtr)num4)] = array4[(int)intPtr] + Lang.tip[55].Value;
+										}*/
+					tooltipNames[num4] = "Damage";
 					num4++;
 					if (HoverItem.melee) {
-						int num7 = player[myPlayer].meleeCrit - player[myPlayer].inventory[player[myPlayer].selectedItem].crit + HoverItem.crit;
+						int num7 = Main.player[myPlayer].meleeCrit - Main.player[myPlayer].inventory[Main.player[myPlayer].selectedItem].crit + HoverItem.crit;
+						ItemLoader.GetWeaponCrit(HoverItem, player, ref num7);
+						PlayerHooks.GetWeaponCrit(player, HoverItem, ref num7);
 						array[num4] = num7 + Lang.tip[5].Value;
+						tooltipNames[num4] = "CritChance";
 						num4++;
 					}
 					else if (HoverItem.ranged) {
-						int num8 = player[myPlayer].rangedCrit - player[myPlayer].inventory[player[myPlayer].selectedItem].crit + HoverItem.crit;
+						int num8 = Main.player[myPlayer].rangedCrit - Main.player[myPlayer].inventory[Main.player[myPlayer].selectedItem].crit + HoverItem.crit;
+						ItemLoader.GetWeaponCrit(HoverItem, player, ref num8);
+						PlayerHooks.GetWeaponCrit(player, HoverItem, ref num8);
 						array[num4] = num8 + Lang.tip[5].Value;
+						tooltipNames[num4] = "CritChance";
 						num4++;
 					}
 					else if (HoverItem.magic) {
-						int num9 = player[myPlayer].magicCrit - player[myPlayer].inventory[player[myPlayer].selectedItem].crit + HoverItem.crit;
+						int num9 = Main.player[myPlayer].magicCrit - Main.player[myPlayer].inventory[Main.player[myPlayer].selectedItem].crit + HoverItem.crit;
+						ItemLoader.GetWeaponCrit(HoverItem, player, ref num9);
+						PlayerHooks.GetWeaponCrit(player, HoverItem, ref num9);
 						array[num4] = num9 + Lang.tip[5].Value;
+						tooltipNames[num4] = "CritChance";
 						num4++;
 					}
 					else if (HoverItem.thrown) {
-						int num10 = player[myPlayer].thrownCrit - player[myPlayer].inventory[player[myPlayer].selectedItem].crit + HoverItem.crit;
+						int num10 = Main.player[myPlayer].thrownCrit - Main.player[myPlayer].inventory[Main.player[myPlayer].selectedItem].crit + HoverItem.crit;
+						ItemLoader.GetWeaponCrit(HoverItem, player, ref num10);
+						PlayerHooks.GetWeaponCrit(player, HoverItem, ref num10);
 						array[num4] = num10 + Lang.tip[5].Value;
+						tooltipNames[num4] = "CritChance";
+						num4++;
+					}
+					else if (!HoverItem.summon) // crit tooltip for fully custom classes
+					{
+						int crit = HoverItem.crit;
+						ItemLoader.GetWeaponCrit(HoverItem, player, ref crit);
+						PlayerHooks.GetWeaponCrit(player, HoverItem, ref crit);
+						array[num4] = crit + Lang.tip[5].Value;
+						tooltipNames[num4] = "CritChance";
 						num4++;
 					}
 
@@ -12815,19 +_,22 @@
 						else
 							array[num4] = Lang.tip[13].Value;
 
+						tooltipNames[num4] = "Speed";
 						num4++;
 					}
 
 					float num11 = HoverItem.knockBack;
 					if (HoverItem.summon)
-						num11 += player[myPlayer].minionKB;
+						num11 += Main.player[myPlayer].minionKB;
 
-					if (player[myPlayer].magicQuiver && HoverItem.useAmmo == AmmoID.Arrow || HoverItem.useAmmo == AmmoID.Stake)
+					if (Main.player[myPlayer].magicQuiver && HoverItem.useAmmo == AmmoID.Arrow || HoverItem.useAmmo == AmmoID.Stake)
 						num11 = (int)(num11 * 1.1f);
 
-					if (player[myPlayer].inventory[player[myPlayer].selectedItem].type == 3106 && HoverItem.type == 3106)
+					if (Main.player[myPlayer].inventory[Main.player[myPlayer].selectedItem].type == 3106 && HoverItem.type == 3106)
-						num11 += num11 * (1f - player[myPlayer].stealth);
+						num11 += num11 * (1f - Main.player[myPlayer].stealth);
 
+					ItemLoader.GetWeaponKnockback(HoverItem, player, ref num11);
+					PlayerHooks.GetWeaponKnockback(player, HoverItem, ref num11);
 					if (num11 == 0f)
 						array[num4] = Lang.tip[14].Value;
 					else if (num11 <= 1.5)
@@ -12847,58 +_,70 @@
 					else
 						array[num4] = Lang.tip[22].Value;
 
+					tooltipNames[num4] = "Knockback";
 					num4++;
 				}
 
 				if (HoverItem.fishingPole > 0) {
 					array[num4] = Language.GetTextValue("GameUI.PrecentFishingPower", HoverItem.fishingPole);
+					tooltipNames[num4] = "FishingPower";
 					num4++;
 					array[num4] = Language.GetTextValue("GameUI.BaitRequired");
+					tooltipNames[num4] = "NeedsBait";
 					num4++;
 				}
 
 				if (HoverItem.bait > 0) {
 					array[num4] = Language.GetTextValue("GameUI.BaitPower", HoverItem.bait);
+					tooltipNames[num4] = "BaitPower";
 					num4++;
 				}
 
 				if (HoverItem.headSlot > 0 || HoverItem.bodySlot > 0 || HoverItem.legSlot > 0 || HoverItem.accessory || projHook[HoverItem.shoot] || HoverItem.mountType != -1 || HoverItem.buffType > 0 && (lightPet[HoverItem.buffType] || vanityPet[HoverItem.buffType])) {
 					array[num4] = Lang.tip[23].Value;
+					tooltipNames[num4] = "Equipable";
 					num4++;
 				}
 
 				if (HoverItem.tileWand > 0) {
 					array[num4] = Lang.tip[52].Value + Lang.GetItemNameValue(HoverItem.tileWand);
+					tooltipNames[num4] = "WandConsumes";
 					num4++;
 				}
 
 				if (HoverItem.questItem) {
 					array[num4] = Lang.inter[65].Value;
+					tooltipNames[num4] = "Quest";
 					num4++;
 				}
 
 				if (HoverItem.vanity) {
 					array[num4] = Lang.tip[24].Value;
+					tooltipNames[num4] = "Vanity";
 					num4++;
 				}
 
 				if (HoverItem.defense > 0) {
 					array[num4] = HoverItem.defense + Lang.tip[25].Value;
+					tooltipNames[num4] = "Defense";
 					num4++;
 				}
 
 				if (HoverItem.pick > 0) {
 					array[num4] = HoverItem.pick + Lang.tip[26].Value;
+					tooltipNames[num4] = "PickPower";
 					num4++;
 				}
 
 				if (HoverItem.axe > 0) {
 					array[num4] = HoverItem.axe * 5 + Lang.tip[27].Value;
+					tooltipNames[num4] = "AxePower";
 					num4++;
 				}
 
 				if (HoverItem.hammer > 0) {
 					array[num4] = HoverItem.hammer + Lang.tip[28].Value;
+					tooltipNames[num4] = "HammerPower";
 					num4++;
 				}
 
@@ -12909,41 +_,49 @@
 					else
 						array[num4] = tileBoost + Lang.tip[54].Value;
 
+					tooltipNames[num4] = "TileBoost";
 					num4++;
 				}
 
 				if (HoverItem.healLife > 0) {
-					array[num4] = Language.GetTextValue("CommonItemTooltip.RestoresLife", HoverItem.healLife);
+					array[num4] = Language.GetTextValue("CommonItemTooltip.RestoresLife", player[myPlayer].GetHealLife(HoverItem));
+					tooltipNames[num4] = "HealLife";
 					num4++;
 				}
 
 				if (HoverItem.healMana > 0) {
-					array[num4] = Language.GetTextValue("CommonItemTooltip.RestoresMana", HoverItem.healMana);
+					array[num4] = Language.GetTextValue("CommonItemTooltip.RestoresMana", player[myPlayer].GetHealMana(HoverItem));
+					tooltipNames[num4] = "HealMana";
 					num4++;
 				}
 
 				if (HoverItem.mana > 0 && (HoverItem.type != 127 || !player[myPlayer].spaceGun)) {
-					array[num4] = Language.GetTextValue("CommonItemTooltip.UsesMana", (int)(HoverItem.mana * player[myPlayer].manaCost));
+					array[num4] = Language.GetTextValue("CommonItemTooltip.UsesMana", player[myPlayer].GetManaCost(HoverItem));
+					tooltipNames[num4] = "UseMana";
 					num4++;
 				}
 
 				if (HoverItem.createWall > 0 || HoverItem.createTile > -1) {
 					if (HoverItem.type != 213 && HoverItem.tileWand < 1) {
 						array[num4] = Lang.tip[33].Value;
+						tooltipNames[num4] = "Placeable";
 						num4++;
 					}
 				}
 				else if (HoverItem.ammo > 0 && !HoverItem.notAmmo) {
 					array[num4] = Lang.tip[34].Value;
+					tooltipNames[num4] = "Ammo";
 					num4++;
 				}
 				else if (HoverItem.consumable) {
 					array[num4] = Lang.tip[35].Value;
+					tooltipNames[num4] = "Consumable";
 					num4++;
 				}
 
 				if (HoverItem.material) {
 					array[num4] = Lang.tip[36].Value;
+					tooltipNames[num4] = "Material";
 					num4++;
 				}
 
@@ -12951,10 +_,12 @@
 					for (int j = 0; j < HoverItem.ToolTip.Lines; j++) {
 						if (j == 0 && HoverItem.type >= 1533 && HoverItem.type <= 1537 && !NPC.downedPlantBoss) {
 							array[num4] = Lang.tip[59].Value;
+							tooltipNames[num4] = "Tooltip" + j;
 							num4++;
 						}
 						else {
 							array[num4] = HoverItem.ToolTip.GetLine(j);
+							tooltipNames[num4] = "Tooltip" + j;
 							num4++;
 						}
 					}
@@ -12962,11 +_,13 @@
 
 				if ((HoverItem.type == 3818 || HoverItem.type == 3819 || HoverItem.type == 3820 || HoverItem.type == 3824 || HoverItem.type == 3825 || HoverItem.type == 3826 || HoverItem.type == 3829 || HoverItem.type == 3830 || HoverItem.type == 3831 || HoverItem.type == 3832 || HoverItem.type == 3833 || HoverItem.type == 3834) && !player[myPlayer].downedDD2EventAnyDifficulty) {
 					array[num4] = Lang.misc[104].Value;
+					tooltipNames[num4] = "EtherianManaWarning";
 					num4++;
 				}
 
 				if (HoverItem.buffType == 26 && expertMode) {
 					array[num4] = Lang.misc[40].Value;
+					tooltipNames[num4] = "WellFedExpert";
 					num4++;
 				}
 
@@ -12978,12 +_,14 @@
 						textValue = Language.GetTextValue("CommonItemTooltip.SecondDuration", Math.Round(HoverItem.buffTime / 60.0));
 
 					array[num4] = textValue;
+					tooltipNames[num4] = "BuffTime";
 					num4++;
 				}
 
 				if (HoverItem.type == 3262 || HoverItem.type == 3282 || HoverItem.type == 3283 || HoverItem.type == 3284 || HoverItem.type == 3285 || HoverItem.type == 3286 || HoverItem.type == 3316 || HoverItem.type == 3315 || HoverItem.type == 3317 || HoverItem.type == 3291 || HoverItem.type == 3389) {
 					array[num4] = " ";
 					num = num4;
+					tooltipNames[num4] = "OneDropLogo";
 					num4++;
 				}
 
@@ -13006,6 +_,7 @@
 							array3[num4] = true;
 
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixDamage";
 						num4++;
 					}
 
@@ -13023,6 +_,7 @@
 							array3[num4] = true;
 
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixSpeed";
 						num4++;
 					}
 
@@ -13037,6 +_,7 @@
 							array3[num4] = true;
 
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixCritChance";
 						num4++;
 					}
 
@@ -13053,6 +_,7 @@
 							array3[num4] = true;
 
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixUseMana";
 						num4++;
 					}
 
@@ -13069,6 +_,7 @@
 							array3[num4] = true;
 
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixSize";
 						num4++;
 					}
 
@@ -13085,6 +_,7 @@
 							array3[num4] = true;
 
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixShootSpeed";
 						num4++;
 					}
 
@@ -13101,141 +_,165 @@
 							array3[num4] = true;
 
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixKnockback";
 						num4++;
 					}
 
 					if (HoverItem.prefix == 62) {
 						array[num4] = "+1" + Lang.tip[25].Value;
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccDefense";
 						num4++;
 					}
 
 					if (HoverItem.prefix == 63) {
 						array[num4] = "+2" + Lang.tip[25].Value;
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccDefense";
 						num4++;
 					}
 
 					if (HoverItem.prefix == 64) {
 						array[num4] = "+3" + Lang.tip[25].Value;
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccDefense";
 						num4++;
 					}
 
 					if (HoverItem.prefix == 65) {
 						array[num4] = "+4" + Lang.tip[25].Value;
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccDefense";
 						num4++;
 					}
 
 					if (HoverItem.prefix == 66) {
 						array[num4] = "+20 " + Lang.tip[31].Value;
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccMaxMana";
 						num4++;
 					}
 
 					if (HoverItem.prefix == 67) {
 						array[num4] = "+2" + Lang.tip[5].Value;
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccCritChance";
 						num4++;
 					}
 
 					if (HoverItem.prefix == 68) {
 						array[num4] = "+4" + Lang.tip[5].Value;
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccCritChance";
 						num4++;
 					}
 
 					if (HoverItem.prefix == 69) {
 						array[num4] = "+1" + Lang.tip[39].Value;
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccDamage";
 						num4++;
 					}
 
 					if (HoverItem.prefix == 70) {
 						array[num4] = "+2" + Lang.tip[39].Value;
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccDamage";
 						num4++;
 					}
 
 					if (HoverItem.prefix == 71) {
 						array[num4] = "+3" + Lang.tip[39].Value;
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccDamage";
 						num4++;
 					}
 
 					if (HoverItem.prefix == 72) {
 						array[num4] = "+4" + Lang.tip[39].Value;
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccDamage";
 						num4++;
 					}
 
 					if (HoverItem.prefix == 73) {
 						array[num4] = "+1" + Lang.tip[46].Value;
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccMoveSpeed";
 						num4++;
 					}
 
 					if (HoverItem.prefix == 74) {
 						array[num4] = "+2" + Lang.tip[46].Value;
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccMoveSpeed";
 						num4++;
 					}
 
 					if (HoverItem.prefix == 75) {
 						array[num4] = "+3" + Lang.tip[46].Value;
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccMoveSpeed";
 						num4++;
 					}
 
 					if (HoverItem.prefix == 76) {
 						array[num4] = "+4" + Lang.tip[46].Value;
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccMoveSpeed";
 						num4++;
 					}
 
 					if (HoverItem.prefix == 77) {
 						array[num4] = "+1" + Lang.tip[47].Value;
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccMeleeSpeed";
 						num4++;
 					}
 
 					if (HoverItem.prefix == 78) {
 						array[num4] = "+2" + Lang.tip[47].Value;
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccMeleeSpeed";
 						num4++;
 					}
 
 					if (HoverItem.prefix == 79) {
 						array[num4] = "+3" + Lang.tip[47].Value;
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccMeleeSpeed";
 						num4++;
 					}
 
 					if (HoverItem.prefix == 80) {
 						array[num4] = "+4" + Lang.tip[47].Value;
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccMeleeSpeed";
 						num4++;
 					}
 				}
 
 				if (HoverItem.wornArmor && player[myPlayer].setBonus != "") {
 					array[num4] = Lang.tip[48].Value + " " + player[myPlayer].setBonus;
+					tooltipNames[num4] = "SetBonus";
 					num4++;
 				}
 			}
 
 			if (HoverItem.expert) {
 				array[num4] = Language.GetTextValue("GameUI.Expert");
+				tooltipNames[num4] = "Expert";
 				num4++;
 			}
 
 			float num19 = mouseTextColor / 255f;
+			//patch file: num20
 			float num20 = num19;
 			int a = mouseTextColor;
 			if (npcShop > 0) {
 				int storeValue = HoverItem.GetStoreValue();
 				if (HoverItem.shopSpecialCurrency != -1) {
+					tooltipNames[num4] = "SpecialPrice";
 					CustomCurrencyManager.GetPriceText(HoverItem.shopSpecialCurrency, array, ref num4, storeValue);
 					color = new Microsoft.Xna.Framework.Color((byte)(255f * num20), (byte)(255f * num20), (byte)(255f * num20), a);
 				}
@@ -13324,6 +_,7 @@
 					else
 						array[num4] = Lang.tip[50].Value + " " + text;
 
+					tooltipNames[num4] = "Price";
 					num4++;
 					if (num21 > 0)
 						color = new Microsoft.Xna.Framework.Color((byte)(220f * num20), (byte)(220f * num20), (byte)(198f * num20), a);
@@ -13336,19 +_,26 @@
 				}
 				else if (HoverItem.type != 3817) {
 					array[num4] = Lang.tip[51].Value;
+					tooltipNames[num4] = "Price";
 					num4++;
 					color = new Microsoft.Xna.Framework.Color((byte)(120f * num20), (byte)(120f * num20), (byte)(120f * num20), a);
 				}
 			}
 
 			Vector2 zero = Vector2.Zero;
-			int num26 = 0;
+			Microsoft.Xna.Framework.Color?[] overrideColor;
+			List<TooltipLine> lines = ItemLoader.ModifyTooltips(HoverItem, ref num4, tooltipNames, ref array, ref array2, ref array3, ref num, out overrideColor);
+			List<DrawableTooltipLine> drawableLines = lines.Select((x, i) => new DrawableTooltipLine(x, i, 0, 0, Microsoft.Xna.Framework.Color.White)).ToList();
+			int yOffset = 0; // num26
 			for (int k = 0; k < num4; k++) {
+				/* Below fixes the calculated width for lines containing Chat tags
-				Vector2 vector = fontMouseText.MeasureString(array[k]);
+				Vector2 vector = Main.fontMouseText.MeasureString(array[k]);
+				*/
+				Vector2 vector = ChatManager.GetStringSize(fontMouseText, array[k], Vector2.One);
 				if (vector.X > zero.X)
 					zero.X = vector.X;
 
-				zero.Y += vector.Y + num26;
+				zero.Y += vector.Y + yOffset;
 			}
 
 			X += toolTipDistance;
@@ -13359,30 +_,39 @@
 			if (Y + zero.Y + 4f > screenHeight)
 				Y = (int)(screenHeight - zero.Y - 4f);
 
+			// remove num27, it's vertical offset per line
-			int num27 = 0;
+			// int num27 = 0;
 			num19 = mouseTextColor / 255f;
+			bool globalCanDraw = ItemLoader.PreDrawTooltip(HoverItem, lines.AsReadOnly(), ref X, ref Y);
 			for (int l = 0; l < num4; l++) {
-				if (l == num) {
+				Microsoft.Xna.Framework.Color drawColor;
+				bool isOneDropLogo = l == num;
+				drawableLines[l].OriginalX = X; // it also sets X
+				drawableLines[l].OriginalY = Y; // it also sets Y
+				if (isOneDropLogo) {
 					float num28 = 1f;
 					int num29 = (int)(mouseTextColor * num28);
 					Microsoft.Xna.Framework.Color black = Microsoft.Xna.Framework.Color.Black;
-					for (int m = 0; m < 5; m++) {
-						int num30 = X;
-						int num31 = Y + num27;
-						if (m == 4)
-							black = new Microsoft.Xna.Framework.Color(num29, num29, num29, num29);
-
-						if (m == 0)
-							num30--;
-						else if (m == 1)
-							num30++;
-						else if (m == 2)
-							num31--;
-						else if (m == 3)
-							num31++;
-
-						spriteBatch.Draw(oneDropLogo, new Vector2(num30, num31), null, black, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
+					drawableLines[l].color = new Microsoft.Xna.Framework.Color(num29, num29, num29, num29);
+					if (ItemLoader.PreDrawTooltipLine(HoverItem, drawableLines[l], ref yOffset) && globalCanDraw) {
+						for (int m = 0; m < 5; m++) {
+							int num30 = drawableLines[l].X;
+							int num31 = drawableLines[l].Y;
+							if (m == 0)
+								num30--;
+							else if (m == 1)
+								num30++;
+							else if (m == 2)
+								num31--;
+							else if (m == 3)
+								num31++;
+
+							drawColor = drawableLines[l].overrideColor ?? drawableLines[l].color;
+							spriteBatch.Draw(oneDropLogo, new Vector2(num30, num31), null, m != 4 ? black : drawColor, drawableLines[l].rotation, drawableLines[l].origin, (drawableLines[l].baseScale.X + drawableLines[l].baseScale.Y) / 2, SpriteEffects.None, 0f);
+						}
 					}
+
+					ItemLoader.PostDrawTooltipLine(HoverItem, drawableLines[l]);
 				}
 				else {
 					Microsoft.Xna.Framework.Color baseColor = Microsoft.Xna.Framework.Color.Black;
@@ -13442,18 +_,30 @@
 						else
 							baseColor = new Microsoft.Xna.Framework.Color((byte)(120f * num20), (byte)(190f * num20), (byte)(120f * num20), a);
 					}
-					else if (l == num4 - 1) {
+					else if (drawableLines[l].mod.Equals("Terraria") && drawableLines[l].Name.Equals("Price")) {
 						baseColor = color;
 					}
 
-					ChatManager.DrawColorCodedStringWithShadow(spriteBatch, fontMouseText, array[l], new Vector2((float)X, (float)(Y + num27)), baseColor, 0f, Vector2.Zero, Vector2.One, -1f, 2f);
+					drawableLines[l].color = baseColor;
+					drawColor = baseColor;
+					if (overrideColor[l].HasValue) {
+						drawColor = overrideColor[l].Value * num20;
+						drawableLines[l].overrideColor = drawColor;
+					}
+
+					if (ItemLoader.PreDrawTooltipLine(HoverItem, drawableLines[l], ref yOffset) && globalCanDraw)
+						ChatManager.DrawColorCodedStringWithShadow(spriteBatch, drawableLines[l].font, drawableLines[l].text, new Vector2((float)drawableLines[l].X, (float)drawableLines[l].Y), drawColor, drawableLines[l].rotation, drawableLines[l].origin, drawableLines[l].baseScale, drawableLines[l].maxWidth, drawableLines[l].spread);
+
+					ItemLoader.PostDrawTooltipLine(HoverItem, drawableLines[l]);
 				}
 
-				num27 += (int)(fontMouseText.MeasureString(array[l]).Y + num26);
+				Y += (int)(fontMouseText.MeasureString(array[l]).Y + yOffset);
 			}
+
+			ItemLoader.PostDrawTooltip(HoverItem, drawableLines.AsReadOnly());
 		}
 
-		private void MouseText_DrawBuffString(ref int X, ref int Y) {
+		private void MouseText_DrawBuffString(ref int X, ref int Y, int buffNameHeight) {
 			Microsoft.Xna.Framework.Point p = new Microsoft.Xna.Framework.Point(X, Y);
 			int num = 220;
 			int num2 = -1;
@@ -12605,7 +_,7 @@
 
 			if (bannerMouseOver) {
 				int num5 = 0;
-				for (int i = 0; i < 267; i++) {
+				for (int i = 0; i < NPCLoader.NPCCount; i++) {
 					if (Item.BannerToNPC(i) != 0 && player[myPlayer].NPCBannerBuff[i]) {
 						num5++;
 						string nPCNameValue = Lang.GetNPCNameValue(Item.BannerToNPC(i));
@@ -13490,6 +_,7 @@
 				}
 			}
 
+			BuffLoader.CustomBuffTipSize(buffString, list);
 			Vector2 zero = Vector2.Zero;
 			foreach (Vector2 current in list) {
 				if (zero.X < current.X)
@@ -13510,7 +_,7 @@
 
 			for (int k = 0; k < 5; k++) {
 				int num10 = X;
-				int num11 = Y + (int)fontMouseText.MeasureString(buffString).Y;
+				int num11 = Y + buffNameHeight;
 				Microsoft.Xna.Framework.Color black = Microsoft.Xna.Framework.Color.Black;
 				if (k == 0)
 					num10 -= 2;
@@ -13528,7 +_,7 @@
 
 			if (bannerMouseOver) {
 				int num12 = 0;
-				for (int l = 0; l < 267; l++) {
+				for (int l = 0; l < NPCLoader.NPCCount; l++) {
 					if (Item.BannerToNPC(l) != 0 && player[myPlayer].NPCBannerBuff[l]) {
 						num12++;
 						bool flag = false;
@@ -13565,11 +_,13 @@
 							spriteBatch.DrawString(fontMouseText, text, new Vector2(num13, num14), black2, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 						}
 
-						if (flag)
+						if (flag) // Todo, BuffLoader.DrawCustomBuffTip here? This is new to fix too many banner buffs I think.
 							return;
 					}
 				}
 			}
+
+			BuffLoader.DrawCustomBuffTip(buffString, spriteBatch, X, Y + (int)fontMouseText.MeasureString(buffString).Y);
 		}
 
 		protected void DrawFPS() {
@@ -12931,6 +_,7 @@
 			for (int i = num6; i < num7 + 4; i++) {
 				for (int j = num4 - 2; j < num5 + 2; j++) {
 					Tile tile = Main.tile[j, i];
+					//patch file: j, i
 					if (tile == null) {
 						tile = new Tile();
 						Main.tile[j, i] = tile;
@@ -13802,6 +_,7 @@
 							effects = SpriteEffects.FlipHorizontally;
 						}
 
+						TileLoader.SetSpriteEffects(j, i, type, ref effects);
 						Microsoft.Xna.Framework.Color color = Lighting.GetColor(j, i);
 						int num11 = 0;
 						int num12 = 16;
@@ -13925,6 +_,7 @@
 							num12 = 18;
 
 						if (type == 227) {
+							//patch file: num8, num12
 							num8 = 32;
 							num12 = 38;
 							if (num9 == 238)
@@ -13984,6 +_,7 @@
 						if (type == 139 || type == 142 || type == 143)
 							num11 = 2;
 
+						TileLoader.SetDrawPositions(j, i, ref num8, ref num11, ref num12);
 						int num14 = 0;
 						if (tile.halfBrick())
 							num14 = 8;
@@ -14228,6 +_,12 @@
 								num15 += 90;
 						}
 
+						TileLoader.SetAnimationFrame(type, j, i, ref num16, ref num15);
+						if (!TileLoader.PreDraw(j, i, type, spriteBatch)) {
+							TileLoader.PostDraw(j, i, type, spriteBatch);
+							continue;
+						}
+
 						if (type == 373 || type == 374 || type == 375 || type == 461) {
 							int num33 = 60;
 							if (type == 374)
@@ -14253,8 +_,11 @@
 								if (flag2) {
 									Vector2 position = new Vector2(j * 16, i * 16);
 									int num34 = 706;
-									if (waterStyle > 1)
+									if (waterStyle > 1) {
 										num34 = 706 + waterStyle - 1;
+										if (waterStyle >= WaterStyleLoader.vanillaWaterCount)
+											num34 = WaterStyleLoader.GetWaterStyle(waterStyle).GetDropletGore();
+									}
 
 									if (type == 374)
 										num34 = 716;
@@ -14730,6 +_,7 @@
 										flag4 = flag4 || type == 162;
 								}
 
+								flag4 = flag4 || TileLoader.Dangersense(j, i, type, player[myPlayer]);
 								if (flag4) {
 									if (color.R < 255)
 										color.R = 255;
@@ -15323,6 +_,7 @@
 												if (type == 211)
 													white = new Microsoft.Xna.Framework.Color(50, 255, 100, 255);
 
+												// TODO, ModTile hook for Shine color.
 												int num90 = Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 16, 43, 0f, 0f, 254, white, 0.5f);
 												dust[num90].velocity *= 0f;
 											}
@@ -15545,6 +_,7 @@
 								spriteBatch.Draw(shroomCapTexture, new Vector2((float)(j * 16 - (int)screenPosition.X - 22), (float)(i * 16 - (int)screenPosition.Y - 26)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(num104 * 62, 0, 60, 42)), Lighting.GetColor(j, i), 0f, default(Vector2), 1f, effects, 0f);
 							}
 
+							TileLoader.DrawEffects(j, i, type, spriteBatch, ref color, ref num3);
 							if (color.R >= 1 || color.G >= 1 || color.B >= 1) {
 								Tile tile2 = Main.tile[j + 1, i];
 								Tile tile3 = Main.tile[j - 1, i];
@@ -16161,6 +_,7 @@
 									bool flag13 = false;
 									bool flag14 = false;
 									bool flag15 = false;
+									Texture2D modCactusTexture = null;
 									if (!canDrawColorTile(j, i)) {
 										int num166 = j;
 										if (num9 == 36)
@@ -16196,11 +_,16 @@
 										if (Main.tile[num166, num167].type == 116)
 											flag14 = true;
 
+										//patch file: num166, num167
 										if (Main.tile[num166, num167].type == 234)
 											flag15 = true;
+
+										modCactusTexture = TileLoader.GetCactusTexture(Main.tile[num166, num167].type);
 									}
 
+									if (modCactusTexture != null)
+										spriteBatch.Draw(modCactusTexture, new Vector2(j * 16 - (int)screenPosition.X - (num8 - 16f) / 2f, i * 16 - (int)screenPosition.Y + num11) + zero, new Microsoft.Xna.Framework.Rectangle(num9, num10, num8, num12), color, 0f, default(Vector2), 1f, effects, 0f);
-									if (flag13)
+									else if (flag13)
 										spriteBatch.Draw(evilCactusTexture, new Vector2((float)(j * 16 - (int)screenPosition.X) - (num8 - 16f) / 2f, (float)(i * 16 - (int)screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(num9, num10, num8, num12)), color, 0f, default(Vector2), 1f, effects, 0f);
 									else if (flag15)
 										spriteBatch.Draw(crimsonCactusTexture, new Vector2((float)(j * 16 - (int)screenPosition.X) - (num8 - 16f) / 2f, (float)(i * 16 - (int)screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(num9, num10, num8, num12)), color, 0f, default(Vector2), 1f, effects, 0f);
@@ -16459,8 +_,13 @@
 											}
 
 											int treeVariant = GetTreeVariant(num178, num179);
+											Texture2D modTreeTexture = TileLoader.GetTreeTexture(Main.tile[num178, num179]);
+											if (modTreeTexture != null) {
+												spriteBatch.Draw(modTreeTexture, new Vector2(j * 16 - (int)screenPosition.X - (num8 - 16f) / 2f, i * 16 - (int)screenPosition.Y + num11) + zero, new Microsoft.Xna.Framework.Rectangle(num9, num10, num8, num12), color, 0f, default(Vector2), 1f, effects, 0f);
+											}
-											if (treeVariant == -1) {
+											else if (treeVariant == -1) {
 												if (canDrawColorTile(j, i))
+													//patch file
 													spriteBatch.Draw(tileAltTexture[type, tile.color()], new Vector2((float)(j * 16 - (int)screenPosition.X) - (num8 - 16f) / 2f, (float)(i * 16 - (int)screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(num9, num10, num8, num12)), color, 0f, default(Vector2), 1f, effects, 0f);
 												else
 													spriteBatch.Draw(tileTexture[type], new Vector2((float)(j * 16 - (int)screenPosition.X) - (num8 - 16f) / 2f, (float)(i * 16 - (int)screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(num9, num10, num8, num12)), color, 0f, default(Vector2), 1f, effects, 0f);
@@ -16490,11 +_,15 @@
 												num180 = 2;
 
 											if (Main.tile[num181, num182].active() && Main.tile[num181, num182].type == 112)
+												//patch file: num181, num182
 												num180 = 3;
 
 											int y2 = 22 * num180;
 											int num183 = num10;
+											Texture2D modTreeTexture = TileLoader.GetPalmTreeTexture(Main.tile[num181, num182]);
+											if (modTreeTexture != null)
+												spriteBatch.Draw(modTreeTexture, new Vector2(j * 16 - (int)screenPosition.X - (num8 - 16f) / 2f + num183, i * 16 - (int)screenPosition.Y + num11) + zero, new Microsoft.Xna.Framework.Rectangle(num9, 0, num8, num12), color, 0f, default(Vector2), 1f, effects, 0f);
-											if (canDrawColorTile(j, i))
+											else if (canDrawColorTile(j, i))
 												spriteBatch.Draw(tileAltTexture[type, tile.color()], new Vector2((float)(j * 16 - (int)screenPosition.X) - (num8 - 16f) / 2f + num183, (float)(i * 16 - (int)screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(num9, y2, num8, num12)), color, 0f, default(Vector2), 1f, effects, 0f);
 											else
 												spriteBatch.Draw(tileTexture[type], new Vector2((float)(j * 16 - (int)screenPosition.X) - (num8 - 16f) / 2f + num183, (float)(i * 16 - (int)screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(num9, y2, num8, num12)), color, 0f, default(Vector2), 1f, effects, 0f);
@@ -16941,9 +_,9 @@
 								int num299 = 0;
 								int num300 = 0;
 								spriteBatch.Draw(texture2D2, new Vector2((float)(j * 16 - (int)screenPosition.X) - (num8 - 16f) / 2f + num299, (float)(i * 16 - (int)screenPosition.Y + num11 + num300)) + zero, new Microsoft.Xna.Framework.Rectangle?(empty2), transparent, 0f, default(Vector2), 1f, effects, 0f);
-								goto IL_CEBF;
 							}
 
+							TileLoader.PostDraw(j, i, type, spriteBatch);
 							goto IL_CEBF;
 						IL_1ABF:
 							num49 = num9 / 36;
@@ -16965,7 +_,8 @@
 						}
 					}
 
-				IL_CEBF:;
+				IL_CEBF:
+					;
 				}
 			}
 
@@ -17127,6 +_,7 @@
 
 				try {
 					if (type4 == 5 && frameY >= 198 && frameX >= 22) {
+						//frame
 						int num320 = 0;
 						if (frameX == 22) {
 							if (frameY == 220)
@@ -17135,12 +_,23 @@
 								num320 = 2;
 
 							int num321 = 0;
+							//frame width
 							int num322 = 80;
+							//frame height
 							int num323 = 80;
+							//x offset left
 							int num324 = 32;
+							//y offset
 							int num325 = 0;
 							int num326 = num303;
+							Texture2D modTopTextures = null;
 							while (num326 < num303 + 100) {
+								modTopTextures = TileLoader.GetTreeTopTextures(tile[num302, num326].type,
+									num302, num326, ref num320, ref num322, ref num323, ref num324, ref num325);
+
+								if (modTopTextures != null)
+									break;
+
 								if (tile[num302, num326].type == 2) {
 									num321 = GetTreeStyle(num302);
 									break;
@@ -17233,10 +_,12 @@
 								Lighting.AddLight(num302, num303, 0.1f, 0.2f + num327 / 2f, 0.7f + num327);
 							}
 
-							if (tile6.color() > 0)
+							if (modTopTextures == null && tile6.color() > 0)
 								checkTreeAlt[num321, tile6.color()] = true;
 
+							if (modTopTextures != null)
+								spriteBatch.Draw(modTopTextures, new Vector2(num302 * 16 - (int)screenPosition.X - num324, num303 * 16 - (int)screenPosition.Y - num323 + 16 + num325) + zero, new Microsoft.Xna.Framework.Rectangle(num320 * (num322 + 2), 0, num322, num323), Lighting.GetColor(num302, num303), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
-							if (tile6.color() > 0 && treeAltTextureDrawn[num321, tile6.color()])
+							else if (tile6.color() > 0 && treeAltTextureDrawn[num321, tile6.color()])
 								spriteBatch.Draw(treeTopAltTexture[num321, tile6.color()], new Vector2((float)(num302 * 16 - (int)screenPosition.X - num324), (float)(num303 * 16 - (int)screenPosition.Y - num323 + 16 + num325)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(num320 * (num322 + 2), 0, num322, num323)), Lighting.GetColor(num302, num303), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 							else
 								spriteBatch.Draw(treeTopTexture[num321], new Vector2((float)(num302 * 16 - (int)screenPosition.X - num324), (float)(num303 * 16 - (int)screenPosition.Y - num323 + 16 + num325)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(num320 * (num322 + 2), 0, num322, num323)), Lighting.GetColor(num302, num303), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
@@ -17249,7 +_,14 @@
 
 							int num328 = 0;
 							int num329 = num303;
+							Texture2D modBranchTextures = null;
 							while (num329 < num303 + 100) {
+								modBranchTextures = TileLoader.GetTreeBranchTextures(tile[num302 + 1, num329].type,
+									num302, num329, 1, ref num320);
+
+								if (modBranchTextures != null)
+									break;
+
 								if (tile[num302 + 1, num329].type == 2) {
 									num328 = GetTreeStyle(num302 + 1);
 									break;
@@ -17315,10 +_,12 @@
 								Lighting.AddLight(num302, num303, 0.1f, 0.2f + num330 / 2f, 0.7f + num330);
 							}
 
-							if (tile6.color() > 0)
+							if (modBranchTextures == null && tile6.color() > 0)
 								checkTreeAlt[num328, tile6.color()] = true;
 
+							if (modBranchTextures != null)
+								spriteBatch.Draw(modBranchTextures, new Vector2(num302 * 16 - (int)screenPosition.X - 24, num303 * 16 - (int)screenPosition.Y - 12) + zero, new Microsoft.Xna.Framework.Rectangle(0, num320 * 42, 40, 40), Lighting.GetColor(num302, num303), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
-							if (tile6.color() > 0 && treeAltTextureDrawn[num328, tile6.color()])
+							else if (tile6.color() > 0 && treeAltTextureDrawn[num328, tile6.color()])
 								spriteBatch.Draw(treeBranchAltTexture[num328, tile6.color()], new Vector2((float)(num302 * 16 - (int)screenPosition.X - 24), (float)(num303 * 16 - (int)screenPosition.Y - 12)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, num320 * 42, 40, 40)), Lighting.GetColor(num302, num303), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 							else
 								spriteBatch.Draw(treeBranchTexture[num328], new Vector2((float)(num302 * 16 - (int)screenPosition.X - 24), (float)(num303 * 16 - (int)screenPosition.Y - 12)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, num320 * 42, 40, 40)), Lighting.GetColor(num302, num303), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
@@ -17331,7 +_,14 @@
 
 							int num331 = 0;
 							int num332 = num303;
+							Texture2D modBranchTextures = null;
 							while (num332 < num303 + 100) {
+								modBranchTextures = TileLoader.GetTreeBranchTextures(tile[num302 - 1, num332].type,
+									num302, num332, -1, ref num320);
+
+								if (modBranchTextures != null)
+									break;
+
 								if (tile[num302 - 1, num332].type == 2) {
 									num331 = GetTreeStyle(num302 - 1);
 									break;
@@ -17397,10 +_,12 @@
 								Lighting.AddLight(num302, num303, 0.1f, 0.2f + num333 / 2f, 0.7f + num333);
 							}
 
-							if (tile6.color() > 0)
+							if (modBranchTextures == null && tile6.color() > 0)
 								checkTreeAlt[num331, tile6.color()] = true;
 
+							if (modBranchTextures != null)
+								spriteBatch.Draw(modBranchTextures, new Vector2(num302 * 16 - (int)screenPosition.X, num303 * 16 - (int)screenPosition.Y - 12) + zero, new Microsoft.Xna.Framework.Rectangle(42, num320 * 42, 40, 40), Lighting.GetColor(num302, num303), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
-							if (tile6.color() > 0 && treeAltTextureDrawn[num331, tile6.color()])
+							else if (tile6.color() > 0 && treeAltTextureDrawn[num331, tile6.color()])
 								spriteBatch.Draw(treeBranchAltTexture[num331, tile6.color()], new Vector2((float)(num302 * 16 - (int)screenPosition.X), (float)(num303 * 16 - (int)screenPosition.Y - 12)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(42, num320 * 42, 40, 40)), Lighting.GetColor(num302, num303), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 							else
 								spriteBatch.Draw(treeBranchTexture[num331], new Vector2((float)(num302 * 16 - (int)screenPosition.X), (float)(num303 * 16 - (int)screenPosition.Y - 12)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(42, num320 * 42, 40, 40)), Lighting.GetColor(num302, num303), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
@@ -17420,7 +_,12 @@
 						int num338 = 80;
 						int num339 = 32;
 						int num340 = 0;
+						Texture2D modTopTextures = null;
 						for (int num341 = num303; num341 < num303 + 100; num341++) {
+							modTopTextures = TileLoader.GetPalmTreeTopTextures(tile[num302, num341].type);
+							if (modTopTextures != null)
+								break;
+
 							if (tile[num302, num341].type == 53) {
 								num336 = 0;
 								break;
@@ -17444,10 +_,12 @@
 
 						int frameY3 = tile[num302, num303].frameY;
 						int y3 = num336 * 82;
-						if (tile6.color() > 0)
+						if (modTopTextures == null && tile6.color() > 0)
 							checkTreeAlt[num335, tile6.color()] = true;
 
+						if (modTopTextures != null)
+							spriteBatch.Draw(modTopTextures, new Vector2(num302 * 16 - (int)screenPosition.X - num339 + frameY3, num303 * 16 - (int)screenPosition.Y - num338 + 16 + num340) + zero, new Microsoft.Xna.Framework.Rectangle(num334 * (num337 + 2), y3, num337, num338), Lighting.GetColor(num302, num303), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
-						if (tile6.color() > 0 && treeAltTextureDrawn[num335, tile6.color()])
+						else if (tile6.color() > 0 && treeAltTextureDrawn[num335, tile6.color()])
 							spriteBatch.Draw(treeTopAltTexture[num335, tile6.color()], new Vector2((float)(num302 * 16 - (int)screenPosition.X - num339 + frameY3), (float)(num303 * 16 - (int)screenPosition.Y - num338 + 16 + num340)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(num334 * (num337 + 2), y3, num337, num338)), Lighting.GetColor(num302, num303), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 						else
 							spriteBatch.Draw(treeTopTexture[num335], new Vector2((float)(num302 * 16 - (int)screenPosition.X - num339 + frameY3), (float)(num303 * 16 - (int)screenPosition.Y - num338 + 16 + num340)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(num334 * (num337 + 2), y3, num337, num338)), Lighting.GetColor(num302, num303), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
@@ -16595,6 +_,8 @@
 				}
 				catch {
 				}
+
+				TileLoader.SpecialDraw(type4, num302, num303, spriteBatch);
 			}
 
 			if (TileObject.objectPreview.Active && player[myPlayer].showItemIcon && placementPreview && !CaptureManager.Instance.Active) {
@@ -17536,7 +_,7 @@
 			for (int i = 0; i < 500; i++) {
 				if (gore[i].active && gore[i].type > 0) {
 					bool flag = false;
-					if ((gore[i].type >= 706 && gore[i].type <= 717 || gore[i].type == 943) && (gore[i].frame < 7 || gore[i].frame > 9))
+					if (ModGore.DrawBackGore(gore[i]))
 						flag = true;
 
 					if (flag) {
@@ -17544,11 +_,11 @@
 						if (gore[i].numFrames > 1) {
 							int num = goreTexture[gore[i].type].Height / gore[i].numFrames;
 							Microsoft.Xna.Framework.Color alpha = gore[i].GetAlpha(Lighting.GetColor((int)((double)gore[i].position.X + (double)goreTexture[gore[i].type].Width * 0.5) / 16, (int)(((double)gore[i].position.Y + (double)num * 0.5) / 16.0)));
-							spriteBatch.Draw(goreTexture[gore[i].type], new Vector2(gore[i].position.X - screenPosition.X + (float)(goreTexture[gore[i].type].Width / 2), gore[i].position.Y - screenPosition.Y + num / 2 - 2f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, num * gore[i].frame, goreTexture[gore[i].type].Width, num)), alpha, gore[i].rotation, new Vector2((float)(goreTexture[gore[i].type].Width / 2), num / 2), gore[i].scale, SpriteEffects.None, 0f);
+							spriteBatch.Draw(goreTexture[gore[i].type], new Vector2(gore[i].position.X + gore[i].drawOffset.X - screenPosition.X + (float)(goreTexture[gore[i].type].Width / 2), gore[i].position.Y + gore[i].drawOffset.Y - screenPosition.Y + num / 2 - 2f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, num * gore[i].frame, goreTexture[gore[i].type].Width, num)), alpha, gore[i].rotation, new Vector2((float)(goreTexture[gore[i].type].Width / 2), num / 2), gore[i].scale, SpriteEffects.None, 0f);
 						}
 						else {
 							Microsoft.Xna.Framework.Color alpha2 = gore[i].GetAlpha(Lighting.GetColor((int)((double)gore[i].position.X + (double)goreTexture[gore[i].type].Width * 0.5) / 16, (int)(((double)gore[i].position.Y + (double)goreTexture[gore[i].type].Height * 0.5) / 16.0)));
-							spriteBatch.Draw(goreTexture[gore[i].type], new Vector2(gore[i].position.X - screenPosition.X + (float)(goreTexture[gore[i].type].Width / 2), gore[i].position.Y - screenPosition.Y + (float)(goreTexture[gore[i].type].Height / 2)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, goreTexture[gore[i].type].Width, goreTexture[gore[i].type].Height)), alpha2, gore[i].rotation, new Vector2((float)(goreTexture[gore[i].type].Width / 2), (float)(goreTexture[gore[i].type].Height / 2)), gore[i].scale, SpriteEffects.None, 0f);
+							spriteBatch.Draw(goreTexture[gore[i].type], new Vector2(gore[i].position.X + gore[i].drawOffset.X - screenPosition.X + (float)(goreTexture[gore[i].type].Width / 2), gore[i].position.Y + gore[i].drawOffset.Y - screenPosition.Y + (float)(goreTexture[gore[i].type].Height / 2)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, goreTexture[gore[i].type].Width, goreTexture[gore[i].type].Height)), alpha2, gore[i].rotation, new Vector2((float)(goreTexture[gore[i].type].Width / 2), (float)(goreTexture[gore[i].type].Height / 2)), gore[i].scale, SpriteEffects.None, 0f);
 						}
 					}
 				}
@@ -17559,7 +_,7 @@
 			drawBackGore = false;
 			for (int i = 0; i < 500; i++) {
 				if (gore[i].active && gore[i].type > 0) {
-					if ((gore[i].type >= 706 && gore[i].type <= 717 || gore[i].type == 943) && (gore[i].frame < 7 || gore[i].frame > 9)) {
+					if (ModGore.DrawBackGore(gore[i])) {
 						drawBackGore = true;
 					}
 					else {
@@ -17567,11 +_,11 @@
 						if (gore[i].numFrames > 1) {
 							int num = goreTexture[gore[i].type].Height / gore[i].numFrames;
 							Microsoft.Xna.Framework.Color alpha = gore[i].GetAlpha(Lighting.GetColor((int)((double)gore[i].position.X + (double)goreTexture[gore[i].type].Width * 0.5) / 16, (int)(((double)gore[i].position.Y + (double)num * 0.5) / 16.0)));
-							spriteBatch.Draw(goreTexture[gore[i].type], new Vector2(gore[i].position.X - screenPosition.X + (float)(goreTexture[gore[i].type].Width / 2), gore[i].position.Y - screenPosition.Y + num / 2 - 2f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, num * gore[i].frame, goreTexture[gore[i].type].Width, num)), alpha, gore[i].rotation, new Vector2((float)(goreTexture[gore[i].type].Width / 2), num / 2), gore[i].scale, SpriteEffects.None, 0f);
+							spriteBatch.Draw(goreTexture[gore[i].type], new Vector2(gore[i].position.X + gore[i].drawOffset.X - screenPosition.X + (float)(goreTexture[gore[i].type].Width / 2), gore[i].position.Y + gore[i].drawOffset.Y - screenPosition.Y + num / 2 - 2f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, num * gore[i].frame, goreTexture[gore[i].type].Width, num)), alpha, gore[i].rotation, new Vector2((float)(goreTexture[gore[i].type].Width / 2), num / 2), gore[i].scale, SpriteEffects.None, 0f);
 						}
 						else {
 							Microsoft.Xna.Framework.Color alpha2 = gore[i].GetAlpha(Lighting.GetColor((int)((double)gore[i].position.X + (double)goreTexture[gore[i].type].Width * 0.5) / 16, (int)(((double)gore[i].position.Y + (double)goreTexture[gore[i].type].Height * 0.5) / 16.0)));
-							spriteBatch.Draw(goreTexture[gore[i].type], new Vector2(gore[i].position.X - screenPosition.X + (float)(goreTexture[gore[i].type].Width / 2), gore[i].position.Y - screenPosition.Y + (float)(goreTexture[gore[i].type].Height / 2)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, goreTexture[gore[i].type].Width, goreTexture[gore[i].type].Height)), alpha2, gore[i].rotation, new Vector2((float)(goreTexture[gore[i].type].Width / 2), (float)(goreTexture[gore[i].type].Height / 2)), gore[i].scale, SpriteEffects.None, 0f);
+							spriteBatch.Draw(goreTexture[gore[i].type], new Vector2(gore[i].position.X + gore[i].drawOffset.X - screenPosition.X + (float)(goreTexture[gore[i].type].Width / 2), gore[i].position.Y + gore[i].drawOffset.Y - screenPosition.Y + (float)(goreTexture[gore[i].type].Height / 2)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, goreTexture[gore[i].type].Width, goreTexture[gore[i].type].Height)), alpha2, gore[i].rotation, new Vector2((float)(goreTexture[gore[i].type].Width / 2), (float)(goreTexture[gore[i].type].Height / 2)), gore[i].scale, SpriteEffects.None, 0f);
 						}
 					}
 				}
@@ -16725,7 +_,7 @@
 			TimeLogger.DetailedDrawTime(24);
 		}
 
-		protected void DrawHealthBar(float X, float Y, int Health, int MaxHealth, float alpha, float scale = 1f) {
+		public void DrawHealthBar(float X, float Y, int Health, int MaxHealth, float alpha, float scale = 1f) {
 			if (Health <= 0)
 				return;
 
@@ -16859,6 +_,8 @@
 				num = 10f;
 			else if (npc[i].type == 152)
 				num = 6f;
+			else if (npc[i].modNPC != null)
+				num = npc[i].modNPC.drawOffsetY;
 			else if (npc[i].type == 153 || npc[i].type == 154)
 				num = 4f;
 			else if (npc[i].type == 165 || npc[i].type == 237 || npc[i].type == 238 || npc[i].type == 240 || npc[i].type == 531)
@@ -18167,7 +_,7 @@
 			Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle((int)screenPosition.X - 800, (int)screenPosition.Y - 800, screenWidth + 1600, screenHeight + 1600);
 			for (int i = 199; i >= 0; i--) {
 				try {
-					if (npc[i].active && npc[i].type > 0 && npc[i].type < 580 && !npc[i].hide) {
+					if (npc[i].active && npc[i].type > 0 && !npc[i].hide) {
 						npc[i].visualOffset *= 0.95f;
 						npc[i].position += npc[i].visualOffset;
 						if (npc[i].behindTiles == behindTiles) {
@@ -18280,7 +_,7 @@
 			}
 		}
 
-		protected void DrawNPCCheckAlt(NPC n) {
+		public void DrawNPCCheckAlt(NPC n) {
 			if (NPCID.Sets.ExtraTextureCount[n.type] == 0)
 				return;
 
@@ -18290,7 +_,7 @@
 			npcTexture[n.type] = npcAltTextures[n.type][n.altTexture];
 		}
 
-		protected void DrawNPC(int iNPCIndex, bool behindTiles) {
+		public void DrawNPC(int iNPCIndex, bool behindTiles) {
 			NPC nPC = npc[iNPCIndex];
 			int type = nPC.type;
 			LoadNPC(type);
@@ -17997,6 +_,7 @@
 			}
 
 			if (nPC.ichor)
+				//patch file: color9
 				color9 = new Microsoft.Xna.Framework.Color(255, 255, 0, 255);
 
 			if (nPC.onFrostBurn) {
@@ -18903,6 +_,7 @@
 				Lighting.AddLight((int)(nPC.position.X / 16f), (int)(nPC.position.Y / 16f + 1f), 1f, 0.3f, 0.1f);
 			}
 
+			NPCLoader.DrawEffects(nPC, ref color9);
 			if (player[myPlayer].detectCreature && nPC.lifeMax > 1) {
 				byte b;
 				byte b2;
@@ -18928,6 +_,11 @@
 					color9.B = b3;
 			}
 
+			if (!NPCLoader.PreDraw(npc[iNPCIndex], spriteBatch, color9)) {
+				NPCLoader.PostDraw(npc[iNPCIndex], spriteBatch, color9);
+				return;
+			}
+
 			if (type == 50) {
 				Vector2 zero = Vector2.Zero;
 				float num56 = 0f;
@@ -21254,6 +_,8 @@
 					}
 				}
 			}
+
+			NPCLoader.PostDraw(npc[iNPCIndex], spriteBatch, color9);
 		}
 
 		protected void DrawNPCExtras(NPC n, bool beforeDraw, float addHeight, float addY, Microsoft.Xna.Framework.Color npcColor, Vector2 halfSize, SpriteEffects npcSpriteEffect) {
@@ -20596,6 +_,7 @@
 					}
 				}
 
+				NPCLoader.DrawTownAttackGun(n, ref num6, ref num7, ref num8);
 				Texture2D texture2D2 = itemTexture[num7];
 				int num9 = (int)DrawPlayerItemPos(1f, num7).X - num8;
 				Vector2 origin2 = new Vector2(-num9, texture2D2.Height / 2);
@@ -20657,6 +_,7 @@
 						zero.Y = 12f;
 				}
 
+				NPCLoader.DrawTownAttackSwing(n, ref texture2D6, ref num10, ref scaleFactor, ref zero);
 				Tuple<Vector2, float> swingStats = n.GetSwingStats(NPCID.Sets.AttackTime[n.type] * 2, (int)n.ai[1], n.spriteDirection, num10, num10);
 				Vector2 vector4 = swingStats.Item1 + (swingStats.Item1 - n.Center) * scaleFactor + zero;
 				Vector2 origin4 = texture2D6.Size() * new Vector2((n.spriteDirection != 1) ? 1 : 0, 1f);
@@ -21699,7 +_,10 @@
 				}
 			}
 
+			if (!ProjectileLoader.PreDrawExtras(projectile, spriteBatch)) {
+				//fluff
+			}
-			if (projectile.bobber && player[projectile.owner].inventory[player[projectile.owner].selectedItem].holdStyle > 0) {
+			else if (projectile.bobber && player[projectile.owner].inventory[player[projectile.owner].selectedItem].holdStyle > 0) {
 				num = mountedCenter.X;
 				num2 = mountedCenter.Y;
 				num2 += player[projectile.owner].gfxOffY;
@@ -22026,6 +_,11 @@
 			if (projectile.type == 14)
 				color25 = Microsoft.Xna.Framework.Color.White;
 
+			if (!ProjectileLoader.PreDraw(projectile, spriteBatch, color25)) {
+				ProjectileLoader.PostDraw(projectile, spriteBatch, color25);
+				return;
+			}
+
 			int num130 = 0;
 			int num131 = 0;
 			if (projectile.type == 175)
@@ -22041,6 +_,7 @@
 				num130 = 8;
 
 			if (projectile.type == 519) {
+				//patch file: num130, num131
 				num130 = 6;
 				num131 -= 6;
 			}
@@ -22202,6 +_,7 @@
 				num131 = 4;
 			}
 
+			//patch file: num132
 			float num132 = (float)(projectileTexture[projectile.type].Width - projectile.width) * 0.5f + (float)projectile.width * 0.5f;
 			if (projectile.type == 50 || projectile.type == 53 || projectile.type == 515)
 				num131 = -8;
@@ -22286,6 +_,7 @@
 			if (projectile.type == 398)
 				num130 = 8;
 
+			ProjectileLoader.DrawOffset(projectile, ref num131, ref num130, ref num132);
 			SpriteEffects spriteEffects = SpriteEffects.None;
 			if (projectile.spriteDirection == -1)
 				spriteEffects = SpriteEffects.FlipHorizontally;
@@ -24319,7 +_,7 @@
 					}
 
 					if (projectile.bobber) {
-						if (projectile.ai[1] > 0f && projectile.ai[1] < 3930f && projectile.ai[0] == 1f) {
+						if (projectile.ai[1] > 0f && projectile.ai[0] == 1f) {
 							int num310 = (int)projectile.ai[1];
 							Vector2 center5 = projectile.Center;
 							float rotation27 = projectile.rotation;
@@ -24355,6 +_,10 @@
 
 						if (projectile.type == 473)
 							spriteBatch.Draw(projectileTexture[projectile.type], new Vector2(projectile.position.X - screenPosition.X + num132 + (float)num131, projectile.position.Y - screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle(0, 0, projectileTexture[projectile.type].Width, projectileTexture[projectile.type].Height), new Microsoft.Xna.Framework.Color(255, 255, 0, 0), projectile.rotation, new Vector2(num132, projectile.height / 2 + num130), projectile.scale, spriteEffects, 0f);
+
+						ModProjectile modProjectile = projectile.modProjectile;
+						if (modProjectile != null && ModContent.TryGetTexture(modProjectile.GlowTexture, out var glowTexture))
+							spriteBatch.Draw(glowTexture, new Vector2(projectile.position.X - screenPosition.X + num132 + num131, projectile.position.Y - screenPosition.Y + projectile.height / 2 + projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, projectileTexture[projectile.type].Width, projectileTexture[projectile.type].Height)), new Microsoft.Xna.Framework.Color(250, 250, 250, projectile.alpha), projectile.rotation, new Vector2(num132, projectile.height / 2 + num130), projectile.scale, spriteEffects, 0f);
 					}
 
 					if (projectile.type == 106)
@@ -25393,6 +_,8 @@
 					}
 				}
 			}
+
+			ProjectileLoader.PostDraw(projectile, spriteBatch, color25);
 		}
 
 		private static Microsoft.Xna.Framework.Color buffColor(Microsoft.Xna.Framework.Color newColor, float R, float G, float B, float A) {
@@ -25492,6 +_,8 @@
 						if (flag)
 							DrawCacheProjsBehindProjectiles.Add(i);
 					}
+
+					ProjectileLoader.DrawBehind(projectile[i], i, DrawCacheProjsBehindNPCsAndTiles, DrawCacheProjsBehindNPCs, DrawCacheProjsBehindProjectiles, DrawCacheProjsOverWiresUI);
 				}
 			}
 		}
@@ -26003,6 +_,7 @@
 			}
 
 			result.X = num;
+			ItemLoader.HoldoutOffset(gravdir, itemtype, ref result);
 			return result;
 		}
 
@@ -26016,15 +_,22 @@
 		}
 
 		protected void DrawPlayerHead(Player drawPlayer, float X, float Y, float Alpha = 1f, float Scale = 1f) {
+			//prepare for lots of ugly code
+			PlayerHeadDrawInfo drawInfo = new PlayerHeadDrawInfo();
+			drawInfo.spriteBatch = spriteBatch;
+			drawInfo.drawPlayer = drawPlayer;
+			drawInfo.alpha = Alpha;
+			drawInfo.scale = Scale;
 			int shaderId = 0;
 			int skinVariant = drawPlayer.skinVariant;
 			short num = drawPlayer.hairDye;
 			if (drawPlayer.head == 0 && num == 0)
 				num = 1;
 
+			drawInfo.hairShader = num;
 			for (int i = 0; i < 16 + drawPlayer.extraAccessorySlots * 2; i++) {
 				int num2 = i % 10;
-				if (drawPlayer.dye[num2] != null && drawPlayer.armor[i].type > 0 && drawPlayer.armor[i].stack > 0 && drawPlayer.armor[i].faceSlot > 0 && drawPlayer.armor[i].faceSlot < 9)
+				if (drawPlayer.dye[num2] != null && drawPlayer.armor[i].type > 0 && drawPlayer.armor[i].stack > 0 && drawPlayer.armor[i].faceSlot > 0)
 					byte arg_81_0 = drawPlayer.dye[num2].dye;
 			}
 
@@ -26034,17 +_,25 @@
 			if (drawPlayer.dye[0] != null)
 				shaderId = drawPlayer.dye[0].dye;
 
+			drawInfo.armorShader = shaderId;
 			LoadHair(drawPlayer.hair);
 			Microsoft.Xna.Framework.Color color = this.quickAlpha(Microsoft.Xna.Framework.Color.White, Alpha);
+			drawInfo.eyeWhiteColor = color;
 			Microsoft.Xna.Framework.Color color2 = this.quickAlpha(drawPlayer.eyeColor, Alpha);
+			drawInfo.eyeColor = color2;
 			Microsoft.Xna.Framework.Color color3 = this.quickAlpha(drawPlayer.GetHairColor(false), Alpha);
+			drawInfo.hairColor = color3;
 			Microsoft.Xna.Framework.Color color4 = this.quickAlpha(drawPlayer.skinColor, Alpha);
+			drawInfo.skinColor = color4;
 			Microsoft.Xna.Framework.Color color5 = this.quickAlpha(Microsoft.Xna.Framework.Color.White, Alpha);
+			drawInfo.armorColor = color5;
 			SpriteEffects spriteEffects = SpriteEffects.None;
 			if (drawPlayer.direction < 0)
 				spriteEffects = SpriteEffects.FlipHorizontally;
 
+			drawInfo.spriteEffects = spriteEffects;
 			Vector2 vector = new Vector2((float)drawPlayer.legFrame.Width * 0.5f, (float)drawPlayer.legFrame.Height * 0.4f);
+			drawInfo.drawOrigin = vector;
 			Vector2 position = drawPlayer.position;
 			Microsoft.Xna.Framework.Rectangle bodyFrame = drawPlayer.bodyFrame;
 			drawPlayer.bodyFrame.Y = 0;
@@ -26069,12 +_,43 @@
 			if (drawPlayer.head == 161 || drawPlayer.head == 14 || drawPlayer.head == 15 || drawPlayer.head == 16 || drawPlayer.head == 18 || drawPlayer.head == 21 || drawPlayer.head == 24 || drawPlayer.head == 25 || drawPlayer.head == 26 || drawPlayer.head == 40 || drawPlayer.head == 44 || drawPlayer.head == 51 || drawPlayer.head == 56 || drawPlayer.head == 59 || drawPlayer.head == 60 || drawPlayer.head == 67 || drawPlayer.head == 68 || drawPlayer.head == 69 || drawPlayer.head == 114 || drawPlayer.head == 121 || drawPlayer.head == 126 || drawPlayer.head == 130 || drawPlayer.head == 136 || drawPlayer.head == 140 || drawPlayer.head == 145 || drawPlayer.head == 158 || drawPlayer.head == 159 || drawPlayer.head == 184 || drawPlayer.head == 190 || drawPlayer.head == 92.0 || drawPlayer.head == 195)
 				flag2 = true;
 
-			if (drawPlayer.head != 38 && drawPlayer.head != 135) {
+			ItemLoader.DrawHair(drawPlayer, ref flag, ref flag2);
+			drawInfo.drawHair = flag;
+			drawInfo.drawAltHair = flag2;
+			List<PlayerHeadLayer> drawLayers = PlayerHooks.GetDrawHeadLayers(drawPlayer);
+			int layerIndex = -1;
+		layerLoopContinue:
+			layerIndex++;
+
+			if (layerIndex >= drawLayers.Count)
+				goto postDraw;
+
+			if (!drawLayers[layerIndex].ShouldDraw(drawLayers))
+				goto layerLoopContinue;
+
+			if (drawLayers[layerIndex] == PlayerHeadLayer.Head)
+				goto headLayer;
+			else if (drawLayers[layerIndex] == PlayerHeadLayer.Hair)
+				goto hairLayer;
+			else if (drawLayers[layerIndex] == PlayerHeadLayer.AltHair)
+				goto altHairLayer;
+			else if (drawLayers[layerIndex] == PlayerHeadLayer.Armor)
+				goto armorLayer;
+			else if (drawLayers[layerIndex] == PlayerHeadLayer.FaceAcc)
+				goto faceLayer;
+			else
+				drawLayers[layerIndex].Draw(ref drawInfo);
+
+			goto layerLoopContinue;
+		headLayer:
+			if (drawPlayer.head != 38 && drawPlayer.head != 135 && ItemLoader.DrawHead(drawPlayer)) {
 				spriteBatch.Draw(playerTextures[skinVariant, 0], new Vector2(drawPlayer.position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + drawPlayer.width / 2, drawPlayer.position.Y - screenPosition.Y + drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f) + drawPlayer.headPosition + vector, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color4, drawPlayer.headRotation, vector, Scale, spriteEffects, 0f);
 				spriteBatch.Draw(playerTextures[skinVariant, 1], new Vector2(drawPlayer.position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + drawPlayer.width / 2, drawPlayer.position.Y - screenPosition.Y + drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f) + drawPlayer.headPosition + vector, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color, drawPlayer.headRotation, vector, Scale, spriteEffects, 0f);
 				spriteBatch.Draw(playerTextures[skinVariant, 2], new Vector2(drawPlayer.position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + drawPlayer.width / 2, drawPlayer.position.Y - screenPosition.Y + drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f) + drawPlayer.headPosition + vector, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color2, drawPlayer.headRotation, vector, Scale, spriteEffects, 0f);
 			}
 
+			goto layerLoopContinue;
+		hairLayer:
 			if (flag) {
 				DrawData value = new DrawData(armorHeadTexture[drawPlayer.head], new Vector2(drawPlayer.position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f) + drawPlayer.headPosition + vector, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color5, drawPlayer.headRotation, vector, Scale, spriteEffects, 0);
 				GameShaders.Armor.Apply(shaderId, drawPlayer, new DrawData?(value));
@@ -25202,6 +_,8 @@
 				}
 			}
 
+			goto layerLoopContinue;
+		altHairLayer:
 			if (flag2) {
 				Microsoft.Xna.Framework.Rectangle bodyFrame3 = drawPlayer.bodyFrame;
 				bodyFrame3.Y -= 336;
@@ -25216,6 +_,8 @@
 				}
 			}
 
+			goto layerLoopContinue;
+		armorLayer:
 			if (drawPlayer.head == 23) {
 				Microsoft.Xna.Framework.Rectangle bodyFrame4 = drawPlayer.bodyFrame;
 				bodyFrame4.Y -= 336;
@@ -25266,7 +_,7 @@
 				value4.Draw(spriteBatch);
 				pixelShader.CurrentTechnique.Passes[0].Apply();
 			}
-			else if (drawPlayer.head > 0 && drawPlayer.head < 216 && drawPlayer.head != 28) {
+			else if (drawPlayer.head > 0 && drawPlayer.head != 28) {
 				DrawData value5 = new DrawData(armorHeadTexture[drawPlayer.head], new Vector2(drawPlayer.position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f) + drawPlayer.headPosition + vector, drawPlayer.bodyFrame, color5, drawPlayer.headRotation, vector, Scale, spriteEffects, 0);
 				GameShaders.Armor.Apply(shaderId, drawPlayer, value5);
 				value5.Draw(spriteBatch);
@@ -26175,7 +_,9 @@
 				pixelShader.CurrentTechnique.Passes[0].Apply();
 			}
 
-			if (drawPlayer.face > 0 && drawPlayer.face < 9) {
+			goto layerLoopContinue;
+		faceLayer:
+			if (drawPlayer.face > 0) {
 				DrawData value7;
 				if (drawPlayer.face == 7)
 					value7 = new DrawData(accFaceTexture[(int)drawPlayer.face], new Vector2((float)(int)(drawPlayer.position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)), (float)(int)(drawPlayer.position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f)) + drawPlayer.headPosition + vector, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), new Microsoft.Xna.Framework.Color(200, 200, 200, 150), drawPlayer.headRotation, vector, Scale, spriteEffects, 0);
@@ -26187,7 +_,10 @@
 				pixelShader.CurrentTechnique.Passes[0].Apply();
 			}
 
+			goto layerLoopContinue;
+		postDraw:
 			drawPlayer.position = position;
+
 			drawPlayer.bodyFrame.Y = bodyFrame.Y;
 		}
 
@@ -26205,6 +_,11 @@
 		}
 
 		public void DrawPlayer(Player drawPlayer, Vector2 Position, float rotation, Vector2 rotationOrigin, float shadow = 0f) {
+			//prepare for code more ugly than DrawPlayerHead
+			PlayerDrawInfo drawInfo = new PlayerDrawInfo();
+			drawInfo.drawPlayer = drawPlayer;
+			drawInfo.position = Position;
+			drawInfo.shadow = shadow;
 			bool arg_06_0 = drawPlayer.controlDown;
 			float num = 0f;
 			DrawData value = default;
@@ -25310,6 +_,7 @@
 			playerDrawDust.Clear();
 			playerDrawGore.Clear();
 			Vector2 value2 = Position + (drawPlayer.itemLocation - drawPlayer.position);
+			drawInfo.itemLocation = value2;
 			int num2 = 0;
 			bool flag = false;
 			bool flag2 = false;
@@ -26224,13 +_,19 @@
 			if (drawPlayer.body == 99 || drawPlayer.body == 98 || drawPlayer.body == 100 || drawPlayer.body == 167 || drawPlayer.body == 171 || drawPlayer.body == 183 || drawPlayer.body == 191 || drawPlayer.body == 192 || drawPlayer.body == 198 || drawPlayer.body == 199 || drawPlayer.body == 202 || drawPlayer.body == 201 || drawPlayer.body == 203 || drawPlayer.body == 197 || drawPlayer.body == 182 || drawPlayer.body == 87)
 				flag2 = true;
 
+			ItemLoader.DrawHands(drawPlayer, ref flag, ref flag2);
+			drawInfo.drawHands = flag;
+			drawInfo.drawArms = flag2;
 			int num3;
 			if (drawPlayer.heldProj >= 0 && shadow == 0f) {
 				num3 = projectile[drawPlayer.heldProj].type;
 				if (num3 == 460 || num3 == 535 || num3 == 600)
 					flag3 = true;
+
+				ProjectileLoader.DrawHeldProjInFrontOfHeldItemAndArms(projectile[drawPlayer.heldProj], ref flag3);
 			}
 
+			drawInfo.drawHeldProjInFrontOfHeldItemAndBody = flag3;
 			bool flag4 = false;
 			if (drawPlayer.head == 10 || drawPlayer.head == 12 || drawPlayer.head == 28 || drawPlayer.head == 62 || drawPlayer.head == 97 || drawPlayer.head == 106 || drawPlayer.head == 113 || drawPlayer.head == 116 || drawPlayer.head == 119 || drawPlayer.head == 133 || drawPlayer.head == 138 || drawPlayer.head == 139 || drawPlayer.head == 163 || drawPlayer.head == 178 || drawPlayer.head == 181 || drawPlayer.head == 191 || drawPlayer.head == 198)
 				flag4 = true;
@@ -25335,6 +_,9 @@
 			if (drawPlayer.head == 161 || drawPlayer.head == 14 || drawPlayer.head == 15 || drawPlayer.head == 16 || drawPlayer.head == 18 || drawPlayer.head == 21 || drawPlayer.head == 24 || drawPlayer.head == 25 || drawPlayer.head == 26 || drawPlayer.head == 40 || drawPlayer.head == 44 || drawPlayer.head == 51 || drawPlayer.head == 56 || drawPlayer.head == 59 || drawPlayer.head == 60 || drawPlayer.head == 67 || drawPlayer.head == 68 || drawPlayer.head == 69 || drawPlayer.head == 114 || drawPlayer.head == 121 || drawPlayer.head == 126 || drawPlayer.head == 130 || drawPlayer.head == 136 || drawPlayer.head == 140 || drawPlayer.head == 145 || drawPlayer.head == 158 || drawPlayer.head == 159 || drawPlayer.head == 184 || drawPlayer.head == 190 || drawPlayer.head == 92 || drawPlayer.head == 195 || drawPlayer.head == 215)
 				flag5 = true;
 
+			ItemLoader.DrawHair(drawPlayer, ref flag4, ref flag5);
+			drawInfo.drawHair = flag4;
+			drawInfo.drawAltHair = flag5;
 			bool flag6 = false;
 			if (drawPlayer.face == 4 || drawPlayer.face == 3 || drawPlayer.face == 2)
 				flag6 = true;
@@ -26247,16 +_,20 @@
 			if (drawPlayer.head == 0 && num4 == 0)
 				num4 = 1;
 
+			drawInfo.hairShader = num4;
 			float num5 = drawPlayer.mount.PlayerOffset;
 			Position.Y -= num5;
+			drawInfo.position = Position;
 			int num6 = 0;
 			if (drawPlayer.dye[0] != null)
 				num6 = drawPlayer.dye[0].dye;
 
+			drawInfo.headArmorShader = num6;
 			int num7 = 0;
 			if (drawPlayer.dye[1] != null)
 				num7 = drawPlayer.dye[1].dye;
 
+			drawInfo.bodyArmorShader = num7;
 			int shader = 0;
 			if (drawPlayer.dye[2] != null)
 				shader = drawPlayer.dye[2].dye;
@@ -26264,6 +_,7 @@
 			if (drawPlayer.wearsRobe)
 				shader = num7;
 
+			drawInfo.legArmorShader = shader;
 			int shader2 = 0;
 			int shader3 = 0;
 			int shader4 = 0;
@@ -26279,41 +_,65 @@
 			for (int i = 0; i < 20; i++) {
 				int num8 = i % 10;
 				if (drawPlayer.dye[num8] != null && drawPlayer.armor[i].type > 0 && drawPlayer.armor[i].stack > 0 && (i / 10 >= 1 || !drawPlayer.hideVisual[num8] || drawPlayer.armor[i].wingSlot > 0 || drawPlayer.armor[i].type == 934)) {
-					if (drawPlayer.armor[i].handOnSlot > 0 && drawPlayer.armor[i].handOnSlot < 20)
+					if (drawPlayer.armor[i].handOnSlot > 0) {
 						shader2 = drawPlayer.dye[num8].dye;
+						drawInfo.handOnShader = shader2;
+					}
 
-					if (drawPlayer.armor[i].handOffSlot > 0 && drawPlayer.armor[i].handOffSlot < 12)
+					if (drawPlayer.armor[i].handOffSlot > 0) {
 						shader3 = drawPlayer.dye[num8].dye;
+						drawInfo.handOffShader = shader3;
+					}
 
-					if (drawPlayer.armor[i].backSlot > 0 && drawPlayer.armor[i].backSlot < 14)
+					if (drawPlayer.armor[i].backSlot > 0) {
 						shader4 = drawPlayer.dye[num8].dye;
+						drawInfo.backShader = shader4;
+					}
 
-					if (drawPlayer.armor[i].frontSlot > 0 && drawPlayer.armor[i].frontSlot < 5)
+					if (drawPlayer.armor[i].frontSlot > 0) {
 						shader5 = drawPlayer.dye[num8].dye;
+						drawInfo.frontShader = shader5;
+					}
 
-					if (drawPlayer.armor[i].shoeSlot > 0 && drawPlayer.armor[i].shoeSlot < 18)
+					if (drawPlayer.armor[i].shoeSlot > 0) {
 						shader6 = drawPlayer.dye[num8].dye;
+						drawInfo.shoeShader = shader6;
+					}
 
-					if (drawPlayer.armor[i].waistSlot > 0 && drawPlayer.armor[i].waistSlot < 13)
+					if (drawPlayer.armor[i].waistSlot > 0) {
 						shader7 = drawPlayer.dye[num8].dye;
+						drawInfo.waistShader = shader7;
+					}
 
-					if (drawPlayer.armor[i].shieldSlot > 0 && drawPlayer.armor[i].shieldSlot < 7)
+					if (drawPlayer.armor[i].shieldSlot > 0) {
 						shader8 = drawPlayer.dye[num8].dye;
+						drawInfo.shieldShader = shader8;
+					}
 
-					if (drawPlayer.armor[i].neckSlot > 0 && drawPlayer.armor[i].neckSlot < 10)
+					if (drawPlayer.armor[i].neckSlot > 0) {
 						shader9 = drawPlayer.dye[num8].dye;
+						drawInfo.neckShader = shader9;
+					}
 
-					if (drawPlayer.armor[i].faceSlot > 0 && drawPlayer.armor[i].faceSlot < 9)
+					if (drawPlayer.armor[i].faceSlot > 0) {
 						shader10 = drawPlayer.dye[num8].dye;
+						drawInfo.faceShader = shader10;
+					}
 
-					if (drawPlayer.armor[i].balloonSlot > 0 && drawPlayer.armor[i].balloonSlot < 18)
+					if (drawPlayer.armor[i].balloonSlot > 0) {
 						shader11 = drawPlayer.dye[num8].dye;
+						drawInfo.balloonShader = shader11;
+					}
 
-					if (drawPlayer.armor[i].wingSlot > 0 && drawPlayer.armor[i].wingSlot < 40)
+					if (drawPlayer.armor[i].wingSlot > 0) {
 						shader12 = drawPlayer.dye[num8].dye;
+						drawInfo.wingShader = shader12;
+					}
 
-					if (drawPlayer.armor[i].type == 934)
+					if (drawPlayer.armor[i].type == 934) {
 						shader13 = drawPlayer.dye[num8].dye;
+						drawInfo.carpetShader = shader13;
+					}
 				}
 			}
 
@@ -26325,32 +_,54 @@
 			SpriteEffects spriteEffects = SpriteEffects.None;
 			SpriteEffects effect = SpriteEffects.FlipHorizontally;
 			Microsoft.Xna.Framework.Color color = drawPlayer.GetImmuneAlpha(drawPlayer.GetHairColor(true), shadow);
+			drawInfo.hairColor = color;
 			Microsoft.Xna.Framework.Color color2 = drawPlayer.GetImmuneAlpha(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.25) / 16.0), Microsoft.Xna.Framework.Color.White), shadow);
+			drawInfo.eyeWhiteColor = color2;
 			Microsoft.Xna.Framework.Color color3 = drawPlayer.GetImmuneAlpha(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.25) / 16.0), drawPlayer.eyeColor), shadow);
+			drawInfo.eyeColor = color3;
 			Microsoft.Xna.Framework.Color color4 = drawPlayer.GetImmuneAlpha(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.25) / 16.0), drawPlayer.skinColor), shadow);
+			drawInfo.faceColor = color4;
 			Microsoft.Xna.Framework.Color color5 = drawPlayer.GetImmuneAlpha(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.5) / 16.0), drawPlayer.skinColor), shadow);
+			drawInfo.bodyColor = color5;
 			Microsoft.Xna.Framework.Color color6 = drawPlayer.GetImmuneAlpha(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.75) / 16.0), drawPlayer.skinColor), shadow);
+			drawInfo.legColor = color6;
 			Microsoft.Xna.Framework.Color color7 = drawPlayer.GetImmuneAlphaPure(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.5) / 16.0), drawPlayer.shirtColor), shadow);
+			drawInfo.shirtColor = color7;
 			Microsoft.Xna.Framework.Color color8 = drawPlayer.GetImmuneAlphaPure(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.5) / 16.0), drawPlayer.underShirtColor), shadow);
+			drawInfo.underShirtColor = color8;
 			Microsoft.Xna.Framework.Color color9 = drawPlayer.GetImmuneAlphaPure(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.75) / 16.0), drawPlayer.pantsColor), shadow);
+			drawInfo.pantsColor = color9;
 			Microsoft.Xna.Framework.Color color10 = drawPlayer.GetImmuneAlphaPure(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.75) / 16.0), drawPlayer.shoeColor), shadow);
+			drawInfo.shoeColor = color10;
 			Microsoft.Xna.Framework.Color color11 = drawPlayer.GetImmuneAlphaPure(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)((double)Position.Y + (double)drawPlayer.height * 0.25) / 16, Microsoft.Xna.Framework.Color.White), shadow);
+			drawInfo.upperArmorColor = color11;
 			Microsoft.Xna.Framework.Color color12 = drawPlayer.GetImmuneAlphaPure(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)((double)Position.Y + (double)drawPlayer.height * 0.5) / 16, Microsoft.Xna.Framework.Color.White), shadow);
+			drawInfo.middleArmorColor = color12;
 			Microsoft.Xna.Framework.Color color13 = color12;
+			drawInfo.mountColor = color13;
 			Microsoft.Xna.Framework.Color color14 = drawPlayer.GetImmuneAlphaPure(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)((double)Position.Y + (double)drawPlayer.height * 0.75) / 16, Microsoft.Xna.Framework.Color.White), shadow);
+			drawInfo.lowerArmorColor = color14;
 			Microsoft.Xna.Framework.Color color15 = new Microsoft.Xna.Framework.Color(255, 255, 255, 100);
 			int num9 = 0;
 			int num10 = 0;
 			int num11 = 0;
 			int num12 = 0;
 			int num13 = -1;
+			drawInfo.headGlowMask = num13;
 			int num14 = -1;
+			drawInfo.bodyGlowMask = num14;
 			int num15 = -1;
+			drawInfo.armGlowMask = num15;
 			int num16 = -1;
+			drawInfo.legGlowMask = num16;
 			Microsoft.Xna.Framework.Color color16 = Microsoft.Xna.Framework.Color.Transparent;
+			drawInfo.armGlowMaskColor = color16;
 			Microsoft.Xna.Framework.Color color17 = Microsoft.Xna.Framework.Color.Transparent;
+			drawInfo.armGlowMaskColor = color17;
 			Microsoft.Xna.Framework.Color color18 = Microsoft.Xna.Framework.Color.Transparent;
+			drawInfo.armGlowMaskColor = color18;
 			Microsoft.Xna.Framework.Color color19 = Microsoft.Xna.Framework.Color.Transparent;
+			drawInfo.legGlowMaskColor = color19;
 			num3 = drawPlayer.head;
 			switch (num3) {
 				case 169:
@@ -26405,6 +_,7 @@
 			Microsoft.Xna.Framework.Color underShirtColor = drawPlayer.underShirtColor;
 			underShirtColor.A = 180;
 			if (drawPlayer.head == 169) {
+				//patch file: num13, color16
 				num13 = 15;
 				byte b = (byte)(62.5f * (1 + num9));
 				color16 = new Microsoft.Xna.Framework.Color(b, b, b, 0);
@@ -26451,11 +_,14 @@
 			}
 
 			if (drawPlayer.body == 175) {
+				//patch file: num14
 				if (drawPlayer.Male)
 					num14 = 13;
+				//patch file
 				else
 					num14 = 18;
 
+				//patch file: color17
 				byte b6 = (byte)(62.5f * (1 + num9));
 				color17 = new Microsoft.Xna.Framework.Color(b6, b6, b6, 0);
 			}
@@ -26476,6 +_,7 @@
 					num14 = 186;
 
 				num15 = 188;
+				//patch file: num15, color18
 				byte b7 = (byte)(62.5f * (1 + num12));
 				color17 = new Microsoft.Xna.Framework.Color(b7, b7, b7, 0);
 				color18 = new Microsoft.Xna.Framework.Color(b7, b7, b7, 0);
@@ -26514,6 +_,7 @@
 			}
 
 			if (drawPlayer.legs == 111) {
+				//patch file: num17, color19
 				num16 = 17;
 				byte b10 = (byte)(62.5f * (1 + num10));
 				color19 = new Microsoft.Xna.Framework.Color(b10, b10, b10, 0);
@@ -26546,6 +_,10 @@
 				color14 = drawPlayer.GetImmuneAlphaPure(new Microsoft.Xna.Framework.Color((int)b13, (int)b13, (int)b13, 255), shadow);
 			}
 
+			ItemLoader.DrawArmorColor(EquipType.Head, drawPlayer.head, drawPlayer, shadow, ref color11, ref num13, ref color16);
+			ItemLoader.DrawArmorColor(EquipType.Body, drawPlayer.body, drawPlayer, shadow, ref color12, ref num14, ref color17);
+			ItemLoader.ArmorArmGlowMask(drawPlayer.body, drawPlayer, shadow, ref num15, ref color18);
+			ItemLoader.DrawArmorColor(EquipType.Legs, drawPlayer.legs, drawPlayer, shadow, ref color14, ref num16, ref color19);
 			color16 = drawPlayer.GetImmuneAlphaPure(color16, shadow);
 			color17 = drawPlayer.GetImmuneAlphaPure(color17, shadow);
 			color18 = drawPlayer.GetImmuneAlphaPure(color18, shadow);
@@ -26979,8 +_,10 @@
 				playerDrawDust.Add(num44);
 			}
 
+			bool fullBright = false;
+			PlayerHooks.DrawEffects(drawInfo, ref num19, ref num20, ref num21, ref num22, ref fullBright);
 			if (num19 != 1f || num20 != 1f || num21 != 1f || num22 != 1f) {
-				if (drawPlayer.onFire || drawPlayer.onFire2 || drawPlayer.onFrostBurn) {
+				if (drawPlayer.onFire || drawPlayer.onFire2 || drawPlayer.onFrostBurn || fullBright) {
 					color2 = drawPlayer.GetImmuneAlpha(Microsoft.Xna.Framework.Color.White, shadow);
 					color3 = drawPlayer.GetImmuneAlpha(drawPlayer.eyeColor, shadow);
 					color = drawPlayer.GetImmuneAlpha(drawPlayer.GetHairColor(true), shadow);
@@ -27148,6 +_,27 @@
 				color19 = Microsoft.Xna.Framework.Color.Multiply(color19, num50);
 			}
 
+			drawInfo.hairColor = color;
+			drawInfo.eyeWhiteColor = color2;
+			drawInfo.eyeColor = color3;
+			drawInfo.faceColor = color4;
+			drawInfo.bodyColor = color5;
+			drawInfo.legColor = color6;
+			drawInfo.shirtColor = color7;
+			drawInfo.underShirtColor = color8;
+			drawInfo.pantsColor = color9;
+			drawInfo.shoeColor = color10;
+			drawInfo.upperArmorColor = color11;
+			drawInfo.middleArmorColor = color12;
+			drawInfo.lowerArmorColor = color14;
+			drawInfo.headGlowMask = num13;
+			drawInfo.bodyGlowMask = num14;
+			drawInfo.armGlowMask = num15;
+			drawInfo.legGlowMask = num16;
+			drawInfo.headGlowMaskColor = color16;
+			drawInfo.bodyGlowMaskColor = color17;
+			drawInfo.armGlowMaskColor = color18;
+			drawInfo.legGlowMaskColor = color19;
 			if (drawPlayer.gravDir == 1f) {
 				if (drawPlayer.direction == 1) {
 					spriteEffects = SpriteEffects.None;
@@ -27181,9 +_,13 @@
 				}
 			}
 
+			drawInfo.spriteEffects = spriteEffects;
 			Vector2 vector2 = new Vector2((float)drawPlayer.legFrame.Width * 0.5f, (float)drawPlayer.legFrame.Height * 0.75f);
+			drawInfo.legOrigin = vector2;
 			Vector2 origin = new Vector2((float)drawPlayer.legFrame.Width * 0.5f, (float)drawPlayer.legFrame.Height * 0.5f);
+			drawInfo.bodyOrigin = origin;
 			Vector2 vector3 = new Vector2((float)drawPlayer.legFrame.Width * 0.5f, (float)drawPlayer.legFrame.Height * 0.4f);
+			drawInfo.headOrigin = vector3;
 			if ((drawPlayer.merman || drawPlayer.forceMerman) && !drawPlayer.hideMerman) {
 				drawPlayer.headRotation = drawPlayer.velocity.Y * drawPlayer.direction * 0.1f;
 				if (drawPlayer.headRotation < -0.3)
@@ -26242,6 +_,130 @@
 			if (hair == 133)
 				flag7 = true;
 
+			goto heldItemColor;
+		postSetupVars:
+			PlayerHooks.ModifyDrawInfo(ref drawInfo);
+
+			List<PlayerLayer> drawLayers = PlayerHooks.GetDrawLayers(drawPlayer);
+			int layerIndex = -1;
+		layerLoopContinue:
+			layerIndex++;
+
+			Position = drawInfo.position;
+			shadow = drawInfo.shadow;
+			value2 = drawInfo.itemLocation;
+			flag = drawInfo.drawHands;
+			flag2 = drawInfo.drawArms;
+			flag3 = drawInfo.drawHeldProjInFrontOfHeldItemAndBody;
+			flag4 = drawInfo.drawHair;
+			flag5 = drawInfo.drawAltHair;
+			num4 = drawInfo.hairShader;
+			num6 = drawInfo.headArmorShader;
+			num7 = drawInfo.bodyArmorShader;
+			shader = drawInfo.legArmorShader;
+			shader2 = drawInfo.handOnShader;
+			shader3 = drawInfo.handOffShader;
+			shader4 = drawInfo.backShader;
+			shader5 = drawInfo.frontShader;
+			shader6 = drawInfo.shoeShader;
+			shader7 = drawInfo.waistShader;
+			shader8 = drawInfo.shieldShader;
+			shader9 = drawInfo.neckShader;
+			shader10 = drawInfo.faceShader;
+			shader11 = drawInfo.balloonShader;
+			shader12 = drawInfo.wingShader;
+			shader13 = drawInfo.carpetShader;
+			color = drawInfo.hairColor;
+			color2 = drawInfo.eyeWhiteColor;
+			color3 = drawInfo.eyeColor;
+			color4 = drawInfo.faceColor;
+			color5 = drawInfo.bodyColor;
+			color6 = drawInfo.legColor;
+			color7 = drawInfo.shirtColor;
+			color8 = drawInfo.underShirtColor;
+			color9 = drawInfo.pantsColor;
+			color10 = drawInfo.shoeColor;
+			color11 = drawInfo.upperArmorColor;
+			color12 = drawInfo.middleArmorColor;
+			color13 = drawInfo.mountColor;
+			color14 = drawInfo.lowerArmorColor;
+			num13 = drawInfo.headGlowMask;
+			num14 = drawInfo.bodyGlowMask;
+			num15 = drawInfo.armGlowMask;
+			num16 = drawInfo.legGlowMask;
+			color16 = drawInfo.headGlowMaskColor;
+			color17 = drawInfo.bodyGlowMaskColor;
+			color18 = drawInfo.armGlowMaskColor;
+			color19 = drawInfo.legGlowMaskColor;
+			spriteEffects = drawInfo.spriteEffects;
+			vector2 = drawInfo.legOrigin;
+			origin = drawInfo.bodyOrigin;
+			vector3 = drawInfo.headOrigin;
+			if (layerIndex >= drawLayers.Count)
+				goto postDraw;
+
+			if (!drawLayers[layerIndex].ShouldDraw(drawLayers))
+				goto layerLoopContinue;
+
+			if (drawLayers[layerIndex] == PlayerLayer.HairBack)
+				goto hairBackLayer;
+			else if (drawLayers[layerIndex] == PlayerLayer.MountBack)
+				goto mountBackLayer;
+			else if (drawLayers[layerIndex] == PlayerLayer.MiscEffectsBack)
+				goto miscEffectsBackLayer;
+			else if (drawLayers[layerIndex] == PlayerLayer.BackAcc)
+				goto backAccLayer;
+			else if (drawLayers[layerIndex] == PlayerLayer.Wings)
+				goto wingsLayer;
+			else if (drawLayers[layerIndex] == PlayerLayer.BalloonAcc)
+				goto balloonAccLayer;
+			else if (drawLayers[layerIndex] == PlayerLayer.Skin)
+				goto skinLayer;
+			else if (drawLayers[layerIndex] == PlayerLayer.Legs)
+				goto legsLayer;
+			else if (drawLayers[layerIndex] == PlayerLayer.ShoeAcc)
+				goto shoeAccLayer;
+			else if (drawLayers[layerIndex] == PlayerLayer.Body)
+				goto bodyLayer;
+			else if (drawLayers[layerIndex] == PlayerLayer.HandOffAcc)
+				goto handOffAccLayer;
+			else if (drawLayers[layerIndex] == PlayerLayer.WaistAcc)
+				goto waistAccLayer;
+			else if (drawLayers[layerIndex] == PlayerLayer.NeckAcc)
+				goto neckAccLayer;
+			else if (drawLayers[layerIndex] == PlayerLayer.Face)
+				goto faceLayer;
+			else if (drawLayers[layerIndex] == PlayerLayer.Hair)
+				goto hairLayer;
+			else if (drawLayers[layerIndex] == PlayerLayer.Head)
+				goto headLayer;
+			else if (drawLayers[layerIndex] == PlayerLayer.FaceAcc)
+				goto faceAccLayer;
+			else if (drawLayers[layerIndex] == PlayerLayer.MountFront)
+				goto mountFrontLayer;
+			else if (drawLayers[layerIndex] == PlayerLayer.ShieldAcc)
+				goto shieldAccLayer;
+			else if (drawLayers[layerIndex] == PlayerLayer.SolarShield)
+				goto solarShieldLayer;
+			else if (drawLayers[layerIndex] == PlayerLayer.HeldProjBack)
+				goto heldProjBackLayer;
+			else if (drawLayers[layerIndex] == PlayerLayer.HeldItem)
+				goto heldItemLayer;
+			else if (drawLayers[layerIndex] == PlayerLayer.Arms)
+				goto armsLayer;
+			else if (drawLayers[layerIndex] == PlayerLayer.HandOnAcc)
+				goto handOnAccLayer;
+			else if (drawLayers[layerIndex] == PlayerLayer.HeldProjFront)
+				goto heldProjFrontLayer;
+			else if (drawLayers[layerIndex] == PlayerLayer.FrontAcc)
+				goto frontAccLayer;
+			else if (drawLayers[layerIndex] == PlayerLayer.MiscEffectsFront)
+				goto miscEffectsFrontLayer;
+			else
+				drawLayers[layerIndex].Draw(ref drawInfo);
+
+			goto layerLoopContinue;
+		hairBackLayer:
 			if (flag6) {
 				bodyFrame.Height = 0;
 			}
@@ -26261,6 +_,8 @@
 					bodyFrame.Height = height;
 			}
 
+			goto layerLoopContinue;
+		mountBackLayer:
 			if (drawPlayer.mount.Active) {
 				drawPlayer.mount.Draw(playerDrawData, 0, drawPlayer, Position, color13, spriteEffects, shadow);
 				drawPlayer.mount.Draw(playerDrawData, 1, drawPlayer, Position, color13, spriteEffects, shadow);
@@ -27243,6 +_,8 @@
 			}
 
 			Position.Y += num;
+			goto layerLoopContinue;
+		miscEffectsBackLayer:
 			if (drawPlayer.electrified && shadow == 0f) {
 				Texture2D texture2D = glowMaskTexture[25];
 				int num52 = drawPlayer.miscCounter / 5;
@@ -27261,6 +_,7 @@
 				Microsoft.Xna.Framework.Color color21 = Microsoft.Xna.Framework.Color.Lerp(color12, Microsoft.Xna.Framework.Color.White, 0.7f);
 				Texture2D texture2D2 = extraTexture[74];
 				Texture2D texture = glowMaskTexture[217];
+				// TODO do we need flag8
 				bool flag8 = !drawPlayer.setForbiddenCooldownLocked;
 				int num53 = (int)((drawPlayer.miscCounter / 300f * 6.28318548f).ToRotationVector2().Y * 6f);
 				float num54 = (drawPlayer.miscCounter / 75f * 6.28318548f).ToRotationVector2().X * 4f;
@@ -27319,7 +_,10 @@
 			}
 
 			Position.Y -= num;
+			goto layerLoopContinue;
+		backAccLayer:
 			bool flag9 = false;
+
 			if ((drawPlayer.wings == 0 || drawPlayer.velocity.Y == 0f) && (drawPlayer.inventory[drawPlayer.selectedItem].type == 1178 || drawPlayer.inventory[drawPlayer.selectedItem].type == 779 || drawPlayer.inventory[drawPlayer.selectedItem].type == 1295 || drawPlayer.inventory[drawPlayer.selectedItem].type == 1910 || drawPlayer.turtleArmor || drawPlayer.body == 106 || drawPlayer.body == 170)) {
 				flag9 = true;
 				int type3 = drawPlayer.inventory[drawPlayer.selectedItem].type;
@@ -27369,8 +_,8 @@
 				}
 			}
 
-			if (!flag9 && drawPlayer.back > 0 && drawPlayer.back < 14 && !drawPlayer.mount.Active) {
-				if (drawPlayer.front >= 1 && drawPlayer.front <= 4) {
+			if (!flag9 && drawPlayer.back > 0 && !drawPlayer.mount.Active) {
+				if (drawPlayer.front >= 1) {
 					int num62 = drawPlayer.bodyFrame.Y / 56;
 					if (num62 < 1 || num62 > 5) {
 						num2 = 10;
@@ -27395,6 +_,10 @@
 				playerDrawData.Add(value);
 			}
 
+			goto layerLoopContinue;
+		wingsLayer:
+			flag9 = (drawPlayer.wings == 0 || drawPlayer.velocity.Y == 0f) && (drawPlayer.inventory[drawPlayer.selectedItem].type == 1178 || drawPlayer.inventory[drawPlayer.selectedItem].type == 779 || drawPlayer.inventory[drawPlayer.selectedItem].type == 1295 || drawPlayer.inventory[drawPlayer.selectedItem].type == 1910 || drawPlayer.turtleArmor || drawPlayer.body == 106 || drawPlayer.body == 170);
+
 			Position.Y += (int)num5 / 2;
 			if (!flag9 && drawPlayer.wings > 0) {
 				LoadWings(drawPlayer.wings);
@@ -27587,6 +_,11 @@
 				}
 			}
 
+			Position.Y -= (int)num5 / 2;
+			goto layerLoopContinue;
+		balloonAccLayer:
+			Position.Y += (int)num5 / 2;
+
 			if (drawPlayer.balloon > 0) {
 				int num70 = DateTime.Now.Millisecond % 800 / 200;
 				Vector2 vector6 = OffsetsPlayerOffhand[drawPlayer.bodyFrame.Y / 56];
@@ -27602,24 +_,30 @@
 			}
 
 			Position.Y -= (int)num5 / 2;
+			goto layerLoopContinue;
+		skinLayer:
 			bool flag10 = drawPlayer.body == 82 || drawPlayer.body == 83 || drawPlayer.body == 93 || drawPlayer.body == 21 || drawPlayer.body == 22;
+
 			bool flag11 = drawPlayer.body == 93 || drawPlayer.legs == 20 || drawPlayer.legs == 21;
-			if (!flag10) {
+			if (!flag10 && ItemLoader.DrawBody(drawPlayer)) // TODO this might be wrong, the logic changed
+			{
 				Position.Y += num;
 				value = new DrawData(playerTextures[skinVariant, 3], new Vector2((float)(int)(Position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)), (float)(int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f)) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color5, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
 				playerDrawData.Add(value);
 				Position.Y -= num;
 			}
 
-			if (!flag11 && drawPlayer.legs != 67 && drawPlayer.legs != 106 && drawPlayer.legs != 140 && drawPlayer.legs != 138 && drawPlayer.shoe != 15 && drawPlayer.legs != 143) {
+			if (!flag11 && drawPlayer.legs != 67 && drawPlayer.legs != 106 && drawPlayer.legs != 140 && drawPlayer.legs != 138 && drawPlayer.shoe != 15 && drawPlayer.legs != 143 && ItemLoader.DrawLegs(drawPlayer)) {
 				value = new DrawData(playerTextures[skinVariant, 10], new Vector2((float)(int)(Position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)), (float)(int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f)) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.legFrame), color6, drawPlayer.legRotation, origin, 1f, spriteEffects, 0);
 				playerDrawData.Add(value);
 			}
 
+			goto layerLoopContinue;
 			if (drawPlayer.wearsRobe)
 				goto IL_6F65;
 
 			IL_6A97:
+		legsLayer:
 			if (drawPlayer.legs == 140) {
 				if (!drawPlayer.invis && !drawPlayer.mount.Active) {
 					Texture2D texture2 = extraTexture[73];
@@ -27643,7 +_,7 @@
 					playerDrawData.Add(value);
 				}
 			}
-			else if (drawPlayer.legs > 0 && drawPlayer.legs < 161 && (drawPlayer.shoe != 15 || drawPlayer.wearsRobe)) {
+			else if (drawPlayer.legs > 0 && (drawPlayer.shoe != 15 || drawPlayer.wearsRobe)) {
 				if (!drawPlayer.invis) {
 					value = new DrawData(armorLegTexture[drawPlayer.legs], new Vector2((float)(int)(Position.X - screenPosition.X - (float)(drawPlayer.legFrame.Width / 2) + (float)(drawPlayer.width / 2)), (float)(int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.legFrame.Height + 4f)) + drawPlayer.legPosition + vector2, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.legFrame), color14, drawPlayer.legRotation, vector2, 1f, spriteEffects, 0);
 					value.shader = shader;
@@ -27662,24 +_,29 @@
 				playerDrawData.Add(value);
 			}
 
+			goto layerLoopContinue;
 			if (drawPlayer.wearsRobe)
 				goto IL_7040;
 
 			IL_6F65:
-			if (drawPlayer.shoe > 0 && drawPlayer.shoe < 18) {
+		shoeAccLayer:
+			if (drawPlayer.shoe > 0) {
 				value = new DrawData(accShoesTexture[(int)drawPlayer.shoe], new Vector2((float)(int)(Position.X - screenPosition.X - (float)(drawPlayer.legFrame.Width / 2) + (float)(drawPlayer.width / 2)), (float)(int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.legFrame.Height + 4f)) + drawPlayer.legPosition + vector2, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.legFrame), color14, drawPlayer.legRotation, vector2, 1f, spriteEffects, 0);
 				value.shader = shader6;
 				playerDrawData.Add(value);
 			}
 
+			goto layerLoopContinue;
 			if (drawPlayer.wearsRobe)
 				goto IL_6A97;
 
 			IL_7040:
 			Position.Y += num;
 
+		bodyLayer:
 			bool flag13 = skinVariant == 3 || skinVariant == 8 || skinVariant == 7;
-			if (flag13 && (drawPlayer.body <= 0 || drawPlayer.body >= 210) && !drawPlayer.invis) {
+
+			if (flag13 && drawPlayer.body <= 0 && !drawPlayer.invis) {
 				value = new DrawData(playerTextures[skinVariant, 14], new Vector2((float)(int)(Position.X - screenPosition.X - (float)(drawPlayer.legFrame.Width / 2) + (float)(drawPlayer.width / 2)), (float)(int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.legFrame.Height + 4f)) + drawPlayer.legPosition + vector2, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.legFrame), color7, drawPlayer.legRotation, vector2, 1f, spriteEffects, 0);
 				playerDrawData.Add(value);
 			}
@@ -27709,7 +_,7 @@
 				playerDrawData.Add(value);
 			}
 
-			if (drawPlayer.body > 0 && drawPlayer.body < 210) {
+			if (drawPlayer.body > 0) {
 				Microsoft.Xna.Framework.Rectangle bodyFrame2 = drawPlayer.bodyFrame;
 				int num74 = num2;
 				bodyFrame2.X += num74;
@@ -27757,13 +_,17 @@
 				playerDrawData.Add(value);
 			}
 
-			if (drawPlayer.handoff > 0 && drawPlayer.handoff < 12) {
+			goto layerLoopContinue;
+		handOffAccLayer:
+			if (drawPlayer.handoff > 0) {
 				value = new DrawData(accHandsOffTexture[(int)drawPlayer.handoff], new Vector2((float)(int)(Position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)), (float)(int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f)) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color12, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
 				value.shader = shader3;
 				playerDrawData.Add(value);
 			}
 
-			if (drawPlayer.waist > 0 && drawPlayer.waist < 13) {
+			goto layerLoopContinue;
+		waistAccLayer:
+			if (drawPlayer.waist > 0) {
 				Microsoft.Xna.Framework.Rectangle legFrame = drawPlayer.legFrame;
 				if (legFrame.Y >= 1064)
 					legFrame.Y = 0;
@@ -27773,13 +_,17 @@
 				playerDrawData.Add(value);
 			}
 
-			if (drawPlayer.neck > 0 && drawPlayer.neck < 10) {
+			goto layerLoopContinue;
+		neckAccLayer:
+			if (drawPlayer.neck > 0) {
 				value = new DrawData(accNeckTexture[(int)drawPlayer.neck], new Vector2((float)(int)(Position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)), (float)(int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f)) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color12, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
 				value.shader = shader9;
 				playerDrawData.Add(value);
 			}
 
+			goto layerLoopContinue;
+		faceLayer:
-			if (!drawPlayer.invis && drawPlayer.head != 38 && drawPlayer.head != 135) {
+			if (!drawPlayer.invis && drawPlayer.head != 38 && drawPlayer.head != 135 && ItemLoader.DrawHead(drawPlayer)) {
 				value = new DrawData(playerTextures[skinVariant, 0], new Vector2((float)(int)(Position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)), (float)(int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f)) + drawPlayer.headPosition + vector3, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color4, drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
 				playerDrawData.Add(value);
 				value = new DrawData(playerTextures[skinVariant, 1], new Vector2((float)(int)(Position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)), (float)(int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f)) + drawPlayer.headPosition + vector3, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color2, drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
@@ -27792,6 +_,8 @@
 				}
 			}
 
+			goto layerLoopContinue;
+		hairLayer:
 			if (flag4) {
 				value = new DrawData(armorHeadTexture[drawPlayer.head], new Vector2((float)(int)(Position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)), (float)(int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f)) + drawPlayer.headPosition + vector3, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color11, drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
 				value.shader = num6;
@@ -27809,6 +_,8 @@
 				playerDrawData.Add(value);
 			}
 
+			goto layerLoopContinue;
+		headLayer:
 			if (drawPlayer.head == 23) {
 				if (!drawPlayer.invis) {
 					value = new DrawData(playerHairTexture[drawPlayer.hair], new Vector2((float)(int)(Position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)), (float)(int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f)) + drawPlayer.headPosition + vector3, new Microsoft.Xna.Framework.Rectangle?(bodyFrame), color, drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
@@ -27840,7 +_,7 @@
 				value.shader = num6;
 				playerDrawData.Add(value);
 			}
-			else if (drawPlayer.head > 0 && drawPlayer.head < 216 && drawPlayer.head != 28) {
+			else if (drawPlayer.head > 0 && drawPlayer.head != 28) {
 				if (!drawPlayer.invis || drawPlayer.head != 39 && drawPlayer.head != 38) {
 					if (drawPlayer.head == 13) {
 						int num75 = 0;
@@ -27929,7 +_,9 @@
 				}
 			}
 
-			if (drawPlayer.face > 0 && drawPlayer.face < 9) {
+			goto layerLoopContinue;
+		faceAccLayer:
+			if (drawPlayer.face > 0) {
 				if (drawPlayer.face == 7) {
 					value = new DrawData(accFaceTexture[(int)drawPlayer.face], new Vector2((float)(int)(Position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)), (float)(int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f)) + drawPlayer.headPosition + vector3, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), new Microsoft.Xna.Framework.Color(200, 200, 200, 150), drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
 					value.shader = shader10;
@@ -26934,6 +_,8 @@
 				}
 			}
 
+			goto layerLoopContinue;
+		mountFrontLayer:
 			if (drawPlayer.mount.Active) {
 				drawPlayer.mount.Draw(playerDrawData, 2, drawPlayer, Position, color13, spriteEffects, shadow);
 				drawPlayer.mount.Draw(playerDrawData, 3, drawPlayer, Position, color13, spriteEffects, shadow);
@@ -26956,7 +_,9 @@
 				}
 			}
 
-			if (drawPlayer.shield > 0 && drawPlayer.shield < 7) {
+			goto layerLoopContinue;
+		shieldAccLayer:
+			if (drawPlayer.shield > 0) {
 				Vector2 zero = Vector2.Zero;
 				if (drawPlayer.shieldRaised)
 					zero.Y -= 4f;
@@ -28011,11 +_,14 @@
 					playerDrawData.Add(value);
 				}
 
+				goto layerLoopContinue;
 				if (drawPlayer.mount.Cart)
 					playerDrawData.Reverse(playerDrawData.Count - 2, 2);
 			}
 
+		solarShieldLayer:
 			Position.Y += (int)num5 / 2;
+
 			if (drawPlayer.solarShields > 0 && shadow == 0f && !drawPlayer.dead) {
 				Texture2D texture2D7 = extraTexture[61 + drawPlayer.solarShields - 1];
 				Microsoft.Xna.Framework.Color color36 = new Microsoft.Xna.Framework.Color(255, 255, 255, 127);
@@ -28030,10 +_,15 @@
 			}
 
 			Position.Y -= (int)num5 / 2;
+			goto layerLoopContinue;
+		heldProjBackLayer:
 			if (drawPlayer.heldProj >= 0 && shadow == 0f && !flag3)
 				projectileDrawPosition = playerDrawData.Count;
 
+			goto layerLoopContinue;
+		heldItemColor:
 			Microsoft.Xna.Framework.Color color37 = Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.5) / 16.0));
+
 			if (drawPlayer.inventory[drawPlayer.selectedItem].type == 678)
 				color37 = Microsoft.Xna.Framework.Color.White;
 
@@ -28055,6 +_,8 @@
 				color37 = color37.MultiplyRGBA(new Microsoft.Xna.Framework.Color(Vector4.Lerp(Vector4.One, new Vector4(0f, 0.12f, 0.16f, 0f), 1f - num101)));
 			}
 
+			goto postSetupVars;
+		heldItemLayer:
 			if (shadow == 0f && !drawPlayer.frozen && (drawPlayer.itemAnimation > 0 && drawPlayer.inventory[drawPlayer.selectedItem].useStyle != 0 || drawPlayer.inventory[drawPlayer.selectedItem].holdStyle > 0 && !drawPlayer.pulley) && drawPlayer.inventory[drawPlayer.selectedItem].type > 0 && !drawPlayer.dead && !drawPlayer.inventory[drawPlayer.selectedItem].noUseGraphic && (!drawPlayer.wet || !drawPlayer.inventory[drawPlayer.selectedItem].noWet)) {
 				string arg_9C49_0 = drawPlayer.name;
 				Microsoft.Xna.Framework.Color color38 = new Microsoft.Xna.Framework.Color(250, 250, 250, drawPlayer.inventory[drawPlayer.selectedItem].alpha);
@@ -28133,7 +_,9 @@
 							num105 -= itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width;
 						}
 
+						Vector2 holdoutOrigin = Vector2.Zero;
+						ItemLoader.HoldoutOrigin(drawPlayer, ref holdoutOrigin);
-						value = new DrawData(itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type], new Vector2((float)(int)(value2.X - screenPosition.X + zero3.X + (float)num105), (float)(int)(value2.Y - screenPosition.Y + (float)num106)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width, itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Height)), drawPlayer.inventory[drawPlayer.selectedItem].GetAlpha(color37), num104, zero3, drawPlayer.inventory[drawPlayer.selectedItem].scale, effect, 0);
+						value = new DrawData(itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type], new Vector2((float)(int)(value2.X - screenPosition.X + zero3.X + (float)num105), (float)(int)(value2.Y - screenPosition.Y + (float)num106)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width, itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Height)), drawPlayer.inventory[drawPlayer.selectedItem].GetAlpha(color37), num104, zero3 + holdoutOrigin, drawPlayer.inventory[drawPlayer.selectedItem].scale, effect, 0);
 						playerDrawData.Add(value);
 						if (drawPlayer.inventory[drawPlayer.selectedItem].type == 3870) {
 							value = new DrawData(glowMaskTexture[238], new Vector2((float)(int)(value2.X - screenPosition.X + zero3.X + (float)num105), (float)(int)(value2.Y - screenPosition.Y + (float)num106)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width, itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Height)), new Microsoft.Xna.Framework.Color(255, 255, 255, 127), num104, zero3, drawPlayer.inventory[drawPlayer.selectedItem].scale, effect, 0);
@@ -28235,7 +_,9 @@
 				}
 			}
 
-			if (drawPlayer.body > 0 && drawPlayer.body < 210) {
+			goto layerLoopContinue;
+		armsLayer:
+			if (drawPlayer.body > 0) {
 				Microsoft.Xna.Framework.Rectangle bodyFrame5 = drawPlayer.bodyFrame;
 				int num111 = num2;
 				bodyFrame5.X += num111;
@@ -28246,6 +_,7 @@
 				if (!drawPlayer.invis || drawPlayer.body != 21 && drawPlayer.body != 22) {
 					if (flag && !drawPlayer.invis) {
 						int arg_B487_0 = drawPlayer.body;
+						//patch file: flag, flag2
 						if (flag2) {
 							value = new DrawData(playerTextures[skinVariant, 7], new Vector2((float)(int)(Position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)), (float)(int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f)) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color5, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
 							playerDrawData.Add(value);
@@ -28287,7 +_,9 @@
 				playerDrawData.Add(value);
 			}
 
-			if (drawPlayer.handon > 0 && drawPlayer.handon < 20) {
+			goto layerLoopContinue;
+		handOnAccLayer:
+			if (drawPlayer.handon > 0) {
 				value = new DrawData(accHandsOnTexture[(int)drawPlayer.handon], new Vector2((float)(int)(Position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)), (float)(int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f)) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color12, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
 				value.shader = shader2;
 				playerDrawData.Add(value);
@@ -28305,16 +_,24 @@
 				}
 			}
 
+			goto layerLoopContinue;
+		heldProjFrontLayer:
 			if (drawPlayer.heldProj >= 0 && shadow == 0f && flag3)
 				projectileDrawPosition = playerDrawData.Count;
 
+			goto layerLoopContinue;
+		frontAccLayer:
 			Position.Y -= num;
-			if (!flag9 && drawPlayer.front > 0 && drawPlayer.front < 5 && !drawPlayer.mount.Active) {
+
+			flag9 = (drawPlayer.wings == 0 || drawPlayer.velocity.Y == 0f) && (drawPlayer.inventory[drawPlayer.selectedItem].type == 1178 || drawPlayer.inventory[drawPlayer.selectedItem].type == 779 || drawPlayer.inventory[drawPlayer.selectedItem].type == 1295 || drawPlayer.inventory[drawPlayer.selectedItem].type == 1910 || drawPlayer.turtleArmor || drawPlayer.body == 106 || drawPlayer.body == 170);
+			if (!flag9 && drawPlayer.front > 0 && !drawPlayer.mount.Active) {
 				value = new DrawData(accFrontTexture[(int)drawPlayer.front], new Vector2((float)(int)(Position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)), (float)(int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f)) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color12, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
 				value.shader = shader5;
 				playerDrawData.Add(value);
 			}
 
+			goto layerLoopContinue;
+		miscEffectsFrontLayer:
 			if (drawPlayer.frozen && shadow == 0f) {
 				Microsoft.Xna.Framework.Color color43 = color12;
 				color43.R = (byte)((double)color43.R * 0.55);
@@ -28438,6 +_,8 @@
 				}
 			}
 
+			goto layerLoopContinue;
+		postDraw:
 			if (rotation != 0f) {
 				Vector2 value20 = Position - screenPosition + rotationOrigin;
 				Vector2 value21 = drawPlayer.position + rotationOrigin;
@@ -28519,7 +_,7 @@
 			}
 		}
 
-		protected void DrawItem(Item item, int whoami) {
+		public void DrawItem(Item item, int whoami) {
 			int arg_22_0 = (int)((double)item.position.X + item.width * 0.5) / 16;
 			int arg_28_0 = Lighting.offScreenTiles;
 			int arg_4B_0 = (int)((double)item.position.Y + item.height * 0.5) / 16;
@@ -28543,6 +_,11 @@
 			float scale = 1f;
 			Microsoft.Xna.Framework.Color alpha = item.GetAlpha(color);
 			ItemSlot.GetItemLight(ref alpha, ref scale, item, false);
+			if (!ItemLoader.PreDrawInWorld(item, spriteBatch, color, alpha, ref num4, ref scale, whoami)) {
+				ItemLoader.PostDrawInWorld(item, spriteBatch, color, alpha, num4, scale, whoami);
+				return;
+			}
+
 			float num5 = (float)(item.height - itemTexture[item.type].Height);
 			float num6 = (float)(item.width / 2 - itemTexture[item.type].Width / 2);
 			if (item.type >= 71 && item.type <= 74) {
@@ -28560,6 +_,7 @@
 				int num8 = coinTexture[num7].Height / 8;
 				num6 = (float)(item.width / 2 - coinTexture[num7].Width / 2);
 				spriteBatch.Draw(coinTexture[num7], new Vector2(item.position.X - screenPosition.X + width / 2 + num6, item.position.Y - screenPosition.Y + num8 / 2 + num5), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, itemFrame[whoami] * num8 + 1, itemTexture[item.type].Width, num8)), alpha, num4, new Vector2(width / 2, num8 / 2), scale, SpriteEffects.None, 0f);
+				ItemLoader.PostDrawInWorld(item, spriteBatch, color, alpha, num4, scale, whoami);
 				return;
 			}
 
@@ -28577,6 +_,7 @@
 				num6 = (float)(item.width / 2 - rectangle.Width / 2);
 				num5 = (float)(item.height - rectangle.Height);
 				spriteBatch.Draw(itemTexture[item.type], new Vector2(item.position.X - screenPosition.X + (float)(rectangle.Width / 2) + num6, item.position.Y - screenPosition.Y + (float)(rectangle.Height / 2) + num5), new Microsoft.Xna.Framework.Rectangle?(rectangle), alpha, num4, rectangle.Size() / 2f, scale, SpriteEffects.None, 0f);
+				ItemLoader.PostDrawInWorld(item, spriteBatch, color, alpha, num4, scale, whoami);
 				return;
 			}
 
@@ -28594,6 +_,7 @@
 				num6 = (float)(item.width / 2 - rectangle2.Width / 2);
 				num5 = (float)(item.height - rectangle2.Height);
 				spriteBatch.Draw(itemTexture[item.type], new Vector2(item.position.X - screenPosition.X + (float)(rectangle2.Width / 2) + num6, item.position.Y - screenPosition.Y + (float)(rectangle2.Height / 2) + num5), new Microsoft.Xna.Framework.Rectangle?(rectangle2), alpha, num4, rectangle2.Size() / 2f, scale, SpriteEffects.None, 0f);
+				ItemLoader.PostDrawInWorld(item, spriteBatch, color, alpha, num4, scale, whoami);
 				return;
 			}
 
@@ -28615,6 +_,7 @@
 				num6 -= 2f;
 				num5 -= 2f;
 				spriteBatch.Draw(texture2D, new Vector2(item.position.X - screenPosition.X + (float)(rectangle3.Width / 2) + num6, item.position.Y - screenPosition.Y + (float)(rectangle3.Height / 2) + num5), new Microsoft.Xna.Framework.Rectangle?(rectangle3), new Microsoft.Xna.Framework.Color(255, 255, 255, 63) * 0.75f, num4, rectangle3.Size() / 2f, scale, SpriteEffects.None, 0f);
+				ItemLoader.PostDrawInWorld(item, spriteBatch, color, alpha, num4, scale, whoami);
 				return;
 			}
 
@@ -28627,16 +_,25 @@
 					spriteBatch.Draw(glowMaskTexture[item.glowMask], new Vector2(item.position.X - screenPosition.X + (float)(itemTexture[item.type].Width / 2) + num6, item.position.Y - screenPosition.Y + (float)(itemTexture[item.type].Height / 2) + num5 + 2f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, itemTexture[item.type].Width, itemTexture[item.type].Height)), new Microsoft.Xna.Framework.Color(250, 250, 250, item.alpha), num4, new Vector2((float)(itemTexture[item.type].Width / 2), (float)(itemTexture[item.type].Height / 2)), scale, SpriteEffects.None, 0f);
 
 				spriteBatch.Draw(wireTexture, new Vector2(item.position.X - screenPosition.X + (float)(itemTexture[item.type].Width / 2) + num6, item.position.Y - screenPosition.Y + (float)(itemTexture[item.type].Height / 2) + num5 + 2f) + itemTexture[item.type].Size().RotatedBy(num4, default) * 0.45f * item.scale, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(4, 58, 8, 8)), alpha, 0f, new Vector2(4f), 1f, SpriteEffects.None, 0f);
+				ItemLoader.PostDrawInWorld(item, spriteBatch, color, alpha, num4, scale, whoami);
 				return;
 			}
 
 			if (item.type >= 1522 && item.type <= 1527 || item.type == 3643) {
 				spriteBatch.Draw(itemTexture[item.type], new Vector2(item.position.X - screenPosition.X + (float)(itemTexture[item.type].Width / 2) + num6, item.position.Y - screenPosition.Y + (float)(itemTexture[item.type].Height / 2) + num5 + 2f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, itemTexture[item.type].Width, itemTexture[item.type].Height)), new Microsoft.Xna.Framework.Color(250, 250, 250, mouseTextColor / 2), num4, new Vector2((float)(itemTexture[item.type].Width / 2), (float)(itemTexture[item.type].Height / 2)), mouseTextColor / 1000f + 0.8f, SpriteEffects.None, 0f);
+				ItemLoader.PostDrawInWorld(item, spriteBatch, color, alpha, num4, scale, whoami);
 				return;
 			}
 
 			if (item.type == 3779) {
 				spriteBatch.Draw(itemTexture[item.type], new Vector2(item.position.X - screenPosition.X + (float)(itemTexture[item.type].Width / 2) + num6, item.position.Y - screenPosition.Y + (float)(itemTexture[item.type].Height / 2) + num5 + 2f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, itemTexture[item.type].Width, itemTexture[item.type].Height)), alpha, num4, new Vector2((float)(itemTexture[item.type].Width / 2), (float)(itemTexture[item.type].Height / 2)), scale, SpriteEffects.None, 0f);
+				ItemLoader.PostDrawInWorld(item, spriteBatch, color, alpha, num4, scale, whoami);
+				return;
+			}
+
+			if (ItemLoader.animations.Contains(item.type)) {
+				ItemLoader.DrawAnimatedItem(item, whoami, color, alpha, num4, scale);
+				ItemLoader.PostDrawInWorld(item, spriteBatch, color, alpha, num4, scale, whoami);
 				return;
 			}
 
@@ -28646,6 +_,8 @@
 
 			if (item.glowMask != -1)
 				spriteBatch.Draw(glowMaskTexture[item.glowMask], new Vector2(item.position.X - screenPosition.X + (float)(itemTexture[item.type].Width / 2) + num6, item.position.Y - screenPosition.Y + (float)(itemTexture[item.type].Height / 2) + num5 + 2f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, itemTexture[item.type].Width, itemTexture[item.type].Height)), new Microsoft.Xna.Framework.Color(250, 250, 250, item.alpha), num4, new Vector2((float)(itemTexture[item.type].Width / 2), (float)(itemTexture[item.type].Height / 2)), scale, SpriteEffects.None, 0f);
+
+			ItemLoader.PostDrawInWorld(item, spriteBatch, color, alpha, num4, scale, whoami);
 		}
 
 		protected void DrawRain() {
@@ -28769,13 +_,19 @@
 						}
 
 						Microsoft.Xna.Framework.Color color5 = Lighting.GetColor((int)((double)dust.position.X + 4.0) / 16, (int)((double)dust.position.Y + 4.0) / 16);
-						if (dust.type == 6 || dust.type == 15 || dust.noLight && dust.type < 86 && dust.type > 91 || dust.type >= 59 && dust.type <= 64)
+						if (dust.type == 6 || dust.type == 15 || dust.type >= 59 && dust.type <= 64)
 							color5 = Microsoft.Xna.Framework.Color.White;
 
 						color5 = dust.GetAlpha(color5);
 						if (dust.type == 213)
 							scale = 1f;
 
+						ModDust modDust = ModDust.GetDust(dust.type);
+						if (modDust != null) {
+							modDust.Draw(dust, color5, scale);
+							continue;
+						}
+
 						spriteBatch.Draw(dustTexture, dust.position - screenPosition, new Microsoft.Xna.Framework.Rectangle?(dust.frame), color5, dust.rotation, new Vector2(4f, 4f), scale, SpriteEffects.None, 0f);
 						if (dust.color != default(Microsoft.Xna.Framework.Color))
 							spriteBatch.Draw(dustTexture, dust.position - screenPosition, new Microsoft.Xna.Framework.Rectangle?(dust.frame), dust.GetColor(color5), dust.rotation, new Vector2(4f, 4f), scale, SpriteEffects.None, 0f);
@@ -29267,7 +_,11 @@
 			Microsoft.Xna.Framework.Color color2 = new Microsoft.Xna.Framework.Color(num, num, num, num);
 			bool flag = InGameUI.CurrentState is UIVirtualKeyboard && PlayerInput.UsingGamepad;
 			int num2;
+			/*
-			string[] array = Utils.WordwrapString(npcChatText, fontMouseText, 460, 10, out num2);
+			string[] array = Utils.WordwrapString(Main.npcChatText, Main.fontMouseText, 460, 10, out num2);
+			*/
+			var snippets = Utils.WordwrapStringSmart(npcChatText, Microsoft.Xna.Framework.Color.White, fontMouseText, 460, 10);
+			num2 = snippets.Count;
 			if (editSign) {
 				textBlinkerCount++;
 				if (textBlinkerCount >= 20) {
@@ -29279,21 +_,38 @@
 					textBlinkerCount = 0;
 				}
 
-				if (textBlinkerState == 1) {
+				if (textBlinkerState == 1)
+					/*
 					string[] array2;
 					IntPtr intPtr;
 					(array2 = array)[(int)(intPtr = (IntPtr)num2)] = array2[(int)intPtr] + "|";
-				}
+					*/
+					snippets[num2 - 1].Add(new TextSnippet("|", Microsoft.Xna.Framework.Color.White, 1f));
 
 				instance.DrawWindowsIMEPanel(new Vector2(screenWidth / 2, 90f), 0.5f);
 			}
 
-			num2++;
+			//num2++;
 			spriteBatch.Draw(chatBackTexture, new Vector2((float)(screenWidth / 2 - chatBackTexture.Width / 2), 100f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, chatBackTexture.Width, (num2 + 1) * 30)), color, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 			spriteBatch.Draw(chatBackTexture, new Vector2((float)(screenWidth / 2 - chatBackTexture.Width / 2), 100 + (num2 + 1) * 30), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, chatBackTexture.Height - 30, chatBackTexture.Width, 30)), color, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
+			TextSnippet hoveredTextSnippet = null;
 			for (int i = 0; i < num2; i++) {
+				/*
 				if (array[i] != null)
+				{
-					Utils.DrawBorderStringFourWay(spriteBatch, fontMouseText, array[i], (float)(170 + (screenWidth - 800) / 2), (float)(120 + i * 30), color2, Microsoft.Xna.Framework.Color.Black, Vector2.Zero, 1f);
+					Utils.DrawBorderStringFourWay(Main.spriteBatch, Main.fontMouseText, array[i], (float)(170 + (Main.screenWidth - 800) / 2), (float)(120 + i * 30), color2, Microsoft.Xna.Framework.Color.Black, Vector2.Zero, 1f);
+				}
+				*/
+				int hoveredSnippet;
+				ChatManager.DrawColorCodedStringWithShadow(spriteBatch, fontMouseText, snippets[i].ToArray(), new Vector2((float)(170 + (screenWidth - 800) / 2), (float)(120 + i * 30)), 0, Vector2.Zero, Vector2.One, out hoveredSnippet, -1);
+				if (hoveredSnippet > -1)
+					hoveredTextSnippet = snippets[i][hoveredSnippet];
+			}
+
+			if (hoveredTextSnippet != null) {
+				hoveredTextSnippet.OnHover();
+				if (mouseLeft && mouseLeftRelease)
+					hoveredTextSnippet.OnClick();
 			}
 
 			Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle(screenWidth / 2 - chatBackTexture.Width / 2, 100, chatBackTexture.Width, (num2 + 2) * 30);
@@ -29330,12 +_,16 @@
 			string focusText = "";
 			string focusText2 = "";
 			int num5 = player[myPlayer].statLifeMax2 - player[myPlayer].statLife;
-			for (int j = 0; j < 22; j++) {
+			for (int j = 0; j < Player.MaxBuffs; j++) {
 				int num6 = player[myPlayer].buffType[j];
-				if (debuff[num6] && player[myPlayer].buffTime[j] > 5 && num6 != 28 && num6 != 34 && num6 != 87 && num6 != 89 && num6 != 21 && num6 != 86 && num6 != 199)
+				if (debuff[num6] && player[myPlayer].buffTime[j] > 5 && BuffLoader.CanBeCleared(num6))
 					num5 += 1000;
 			}
 
+			int health = player[myPlayer].statLifeMax2 - player[myPlayer].statLife;
+			bool removeDebuffs = true;
+			string reason = "";
+			bool canHeal = true;
 			if (player[myPlayer].sign > -1) {
 				if (editSign)
 					focusText = Lang.inter[47].Value;
@@ -29489,6 +_,9 @@
 						num17 = 1;
 				}
 
+				reason = Language.GetTextValue("tModLoader.DefaultNurseCantHealChat");
+				canHeal = PlayerHooks.ModifyNurseHeal(player[myPlayer], npc[player[myPlayer].talkNPC], ref health, ref removeDebuffs, ref reason);
+				PlayerHooks.ModifyNursePrice(player[myPlayer], npc[player[myPlayer].talkNPC], health, removeDebuffs, ref num17);
 				if (num17 < 0)
 					num17 = 0;
 
@@ -29574,6 +_,7 @@
 				}
 			}
 
+			NPCLoader.SetChatButtons(ref focusText, ref focusText2);
 			if (!flag)
 				DrawNPCChatButtons(num, color2, num2, focusText, focusText2);
 
@@ -29600,7 +_,12 @@
 							IngameFancyUI.OpenVirtualKeyboard(1);
 							return;
 						}
+
+						if (!NPCLoader.PreChatButtonClicked(true))
+							return;
+
+						NPCLoader.OnChatButtonClicked(true);
-						else if (npc[player[myPlayer].talkNPC].type == 369) {
+						if (npc[player[myPlayer].talkNPC].type == 369) {
 							npcChatCornerItem = 0;
 							PlaySound(12, -1, -1, 1, 1f, 0f);
 							bool flag2 = false;
@@ -29875,10 +_,15 @@
 							else if (npc[player[myPlayer].talkNPC].type == 18) {
 								PlaySound(12, -1, -1, 1, 1f, 0f);
 								if (num5 > 0) {
+									if (!canHeal) {
+										npcChatText = reason;
+										return;
+									}
+
 									if (player[myPlayer].BuyItem(num5, -1)) {
 										AchievementsHelper.HandleNurseService(num5);
 										PlaySound(SoundID.Item4, -1, -1);
-										player[myPlayer].HealEffect(player[myPlayer].statLifeMax2 - player[myPlayer].statLife, true);
+										player[myPlayer].HealEffect(health, true);
 										if (player[myPlayer].statLife < player[myPlayer].statLifeMax2 * 0.25)
 											npcChatText = Lang.dialog(227, false);
 										else if (player[myPlayer].statLife < player[myPlayer].statLifeMax2 * 0.5)
@@ -29888,15 +_,18 @@
 										else
 											npcChatText = Lang.dialog(230, false);
 
+										player[myPlayer].statLife += health;
-										player[myPlayer].statLife = player[myPlayer].statLifeMax2;
+										if (removeDebuffs) { // no indent for better patching
-										for (int l = 0; l < 22; l++) {
+											for (int l = 0; l < Player.MaxBuffs; l++) {
-											int num24 = player[myPlayer].buffType[l];
+												int num24 = player[myPlayer].buffType[l];
-											if (debuff[num24] && player[myPlayer].buffTime[l] > 0 && num24 != 28 && num24 != 34 && num24 != 87 && num24 != 89 && num24 != 21 && num24 != 86 && num24 != 199) {
+												if (debuff[num24] && player[myPlayer].buffTime[l] > 0 && BuffLoader.CanBeCleared(num24)) {
-												player[myPlayer].DelBuff(l);
+													player[myPlayer].DelBuff(l);
-												l = -1;
+													l = -1;
+												}
 											}
 										}
 
+										PlayerHooks.PostNurseHeal(player[myPlayer], npc[player[myPlayer].talkNPC], health, removeDebuffs, num5);
 										return;
 									}
 
@@ -29944,6 +_,10 @@
 						}
 					}
 					else if (npcChatFocus3 && player[myPlayer].talkNPC >= 0) {
+						if (!NPCLoader.PreChatButtonClicked(false))
+							return;
+
+						NPCLoader.OnChatButtonClicked(false);
 						if (npc[player[myPlayer].talkNPC].type == 20) {
 							PlaySound(12, -1, -1, 1, 1f, 0f);
 							npcChatText = Lang.GetDryadWorldStatusDialog();
@@ -30614,6 +_,11 @@
 				inventoryScale = 0.755f;
 				num += 5;
 			}
+			else if ((player[myPlayer].chest == -1 || npcShop == -1) && trashSlotOffset != Point16.Zero) {
+				num += trashSlotOffset.X;
+				num2 += trashSlotOffset.Y;
+				inventoryScale = 0.755f;
+			}
 
 			new Microsoft.Xna.Framework.Color(150, 150, 150, 150);
 			if (mouseX >= num && mouseX <= num + (float)inventoryBackTexture.Width * inventoryScale && mouseY >= num2 && mouseY <= num2 + (float)inventoryBackTexture.Height * inventoryScale && !PlayerInput.IgnoreMouseInterface) {
@@ -30891,7 +_,7 @@
 					num24++;
 
 				int num26 = 46;
-				for (int n = 0; n < 22; n++) {
+				for (int n = 0; n < Player.MaxBuffs; n++) {
 					int num27 = player[myPlayer].buffType[n];
 					if (num27 != 0) {
 						int num28 = num23 / num24;
@@ -30922,10 +_,12 @@
 							buffString = buffString + num31 + "%";
 						}
 
+						int rare = 0;
 						if (meleeBuff[num30])
-							MouseTextHackZoom(Lang.GetBuffName(num30), -10, 0);
-						else
-							MouseTextHackZoom(Lang.GetBuffName(num30));
+							rare = -10;
+
+						BuffLoader.ModifyBuffTip(num30, ref buffString, ref rare);
+						MouseTextHackZoom(Lang.GetBuffName(num30), rare, 0);
 					}
 				}
 			}
@@ -31237,11 +_,15 @@
 					int num61 = 270;
 					string text2 = Lang.inter[46].Value + ": ";
 					if (reforgeItem.type > 0) {
+						bool canApplyDiscount = true;
 						int num62 = reforgeItem.value;
+						if (ItemLoader.ReforgePrice(reforgeItem, ref num62, ref canApplyDiscount)) {
-						if (player[myPlayer].discount)
+							if (canApplyDiscount && player[myPlayer].discount)
-							num62 = (int)(num62 * 0.8);
+								num62 = (int)(num62 * 0.8);
 
-						num62 /= 3;
+							num62 /= 3;
+						}
+
 						string text3 = "";
 						int num63 = 0;
 						int num64 = 0;
@@ -31343,14 +_,23 @@
 
 							mouseReforge = true;
 							player[myPlayer].mouseInterface = true;
-							if (mouseLeftRelease && mouseLeft && player[myPlayer].BuyItem(num62, -1)) {
-								bool favorited = reforgeItem.favorited;
-								reforgeItem.netDefaults(reforgeItem.netID);
+							if (mouseLeftRelease && mouseLeft && player[myPlayer].CanBuyItem(num62, -1) && ItemLoader.PreReforge(reforgeItem)) {
+								player[myPlayer].BuyItem(num62, -1);
+								bool favorited = Main.reforgeItem.favorited;
+								int stack = Main.reforgeItem.stack; // keep the stack, stacked weps support (i.e. light discs)
+																	//vanilla doesnt have a good way of resetting prefix, so it creates a new item entirely
+																	//before we roll te prefix, we simply copy over the old mod data before doing so
+								Item reforgeItem = new Item();
+								reforgeItem.netDefaults(Main.reforgeItem.netID);
+								reforgeItem = reforgeItem.CloneWithModdedDataFrom(Main.reforgeItem);
 								reforgeItem.Prefix(-2);
+								Main.reforgeItem = reforgeItem.Clone();
-								reforgeItem.position.X = player[myPlayer].position.X + player[myPlayer].width / 2 - reforgeItem.width / 2;
+								Main.reforgeItem.position.X = player[myPlayer].position.X + player[myPlayer].width / 2 - Main.reforgeItem.width / 2;
-								reforgeItem.position.Y = player[myPlayer].position.Y + player[myPlayer].height / 2 - reforgeItem.height / 2;
+								Main.reforgeItem.position.Y = player[myPlayer].position.Y + player[myPlayer].height / 2 - Main.reforgeItem.height / 2;
-								reforgeItem.favorited = favorited;
+								Main.reforgeItem.favorited = favorited;
-								ItemText.NewText(reforgeItem, reforgeItem.stack, true, false);
+								Main.reforgeItem.stack = stack;
+								ItemLoader.PostReforge(Main.reforgeItem);
+								ItemText.NewText(Main.reforgeItem, Main.reforgeItem.stack, true, false);
 								PlaySound(SoundID.Item37, -1, -1);
 							}
 						}
@@ -31410,6 +_,7 @@
 							else {
 								num73++;
 								spriteBatch.DrawString(fontMouseText, Lang.GetMapObjectName(MapHelper.TileToLookup(recipe[availableRecipe[num72]].requiredTile[num74], 0)), new Vector2(num70, num71 + 118 + num75), color3, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
+								// TODO: investigate this new thing: Main.spriteBatch.DrawString(Main.fontMouseText, Lang.mapLegend.FromType(Main.recipe[Main.availableRecipe[num72]].requiredTile[num74]), new Vector2((float)num70, (float)(num71 + 118 + num75)), color3, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 								num74++;
 							}
 						}
@@ -30187,7 +_,7 @@
 				}
 			}
 
-			if (!InReforgeMenu) {
+			if (!InReforgeMenu && !HidePlayerCraftingMenu) {
 				UILinkPointNavigator.Shortcuts.CRAFT_CurrentRecipeBig = -1;
 				UILinkPointNavigator.Shortcuts.CRAFT_CurrentRecipeSmall = -1;
 				if (numAvailableRecipes > 0)
@@ -30385,6 +_,7 @@
 				}
 			}
 
+			HidePlayerCraftingMenu = false;
 			if (recBigList) {
 				UILinkPointNavigator.Shortcuts.CRAFT_CurrentRecipeBig = -1;
 				UILinkPointNavigator.Shortcuts.CRAFT_CurrentRecipeSmall = -1;
@@ -30665,8 +_,11 @@
 			mouseItem.position.Y = player[myPlayer].position.Y + (float)(player[myPlayer].height / 2) - (float)(mouseItem.height / 2);
 			ItemText.NewText(mouseItem, r.createItem.stack);
 			r.Create();
-			if (mouseItem.type > 0 || r.createItem.type > 0)
+			if (mouseItem.type > 0 || r.createItem.type > 0) {
+				RecipeHooks.OnCraft(mouseItem, r);
+				ItemLoader.OnCraft(mouseItem, r);
 				PlaySound(7);
+			}
 		}
 
 		private static void DrawPVPIcons() {
@@ -32112,7 +_,8 @@
 			if (!mouseText) {
 				for (int i = 0; i < 400; i++) {
 					if (item[i].active) {
-						Microsoft.Xna.Framework.Rectangle value = new Microsoft.Xna.Framework.Rectangle((int)((double)item[i].position.X + item[i].width * 0.5 - (double)itemTexture[item[i].type].Width * 0.5), (int)(item[i].position.Y + item[i].height - (float)itemTexture[item[i].type].Height), itemTexture[item[i].type].Width, itemTexture[item[i].type].Height);
+						Microsoft.Xna.Framework.Rectangle value = itemAnimations[item[i].type]?.GetFrame(itemTexture[item[i].type]) ?? itemTexture[item[i].type].Bounds;
+						value.Location = new Microsoft.Xna.Framework.Point((int)(item[i].position.X + item[i].width * 0.5 - value.Width * 0.5), (int)(item[i].position.Y + item[i].height - value.Height));
 						if (rectangle.Intersects(value)) {
 							player[myPlayer].showItemIcon = false;
 							string text = item[i].AffixName();
@@ -32181,7 +_,7 @@
 						bool flag2 = flag || SmartInteractShowingGenuine && SmartInteractNPC == k;
 						if (flag2 && (npc[k].type != 85 && npc[k].type != 341 && npc[k].aiStyle != 87 || npc[k].ai[0] != 0f) && npc[k].type != 488) {
 							bool flag3 = SmartInteractShowingGenuine && SmartInteractNPC == k;
-							if (npc[k].townNPC || npc[k].type == 105 || npc[k].type == 106 || npc[k].type == 123 || npc[k].type == 354 || npc[k].type == 376 || npc[k].type == 579 || npc[k].type == 453) {
+							if (NPCLoader.CanChat(npc[k], npc[k].townNPC || npc[k].type == 105 || npc[k].type == 106 || npc[k].type == 123 || npc[k].type == 354 || npc[k].type == 376 || npc[k].type == 579 || npc[k].type == 453)) {
 								Microsoft.Xna.Framework.Rectangle rectangle2 = new Microsoft.Xna.Framework.Rectangle((int)(player[myPlayer].position.X + player[myPlayer].width / 2 - Player.tileRangeX * 16), (int)(player[myPlayer].position.Y + player[myPlayer].height / 2 - Player.tileRangeY * 16), Player.tileRangeX * 16 * 2, Player.tileRangeY * 16 * 2);
 								Microsoft.Xna.Framework.Rectangle value4 = new Microsoft.Xna.Framework.Rectangle((int)npc[k].position.X, (int)npc[k].position.Y, npc[k].width, npc[k].height);
 								if (rectangle2.Intersects(value4))
@@ -31189,14 +_,14 @@
 			recBigList = false;
 			int num = -1;
 			int num2 = 11;
-			for (int i = 0; i < 22; i++) {
+			for (int i = 0; i < Player.MaxBuffs; i++) {
 				if (player[myPlayer].buffType[i] > 0) {
 					int b = player[myPlayer].buffType[i];
 					int x = 32 + i * 38;
 					int num3 = 76;
 					if (i >= num2) {
-						x = 32 + (i - num2) * 38;
-						num3 += 50;
+						x = 32 + Math.Abs(i % 11) * 38;
+						num3 += 50 * (i / 11);
 					}
 
 					num = DrawBuffIcon(num, i, b, x, num3);
@@ -32529,6 +_,7 @@
 				int num4 = player[myPlayer].buffType[num];
 				if (num4 > 0) {
 					buffString = Lang.GetBuffDescription(num4);
+					int rare = 0;
 					if (num4 == 26 && expertMode)
 						buffString = Language.GetTextValue("BuffDescription.WellFed_Expert");
 
@@ -32540,12 +_,11 @@
 						buffString = buffString + num5 + "%";
 					}
 
-					if (meleeBuff[num4]) {
-						MouseTextHackZoom(Lang.GetBuffName(num4), -10, 0);
-						return;
-					}
+					if (meleeBuff[num4])
+						rare = -10;
 
+					BuffLoader.ModifyBuffTip(num4, ref buffString, ref rare);
-					MouseTextHackZoom(Lang.GetBuffName(num4));
+					MouseTextHackZoom(Lang.GetBuffName(num4), rare);
 				}
 			}
 		}
@@ -33800,7 +_,9 @@
 				SetupDrawInterfaceLayers();
 
 			PlayerInput.SetZoom_UI();
+			List<GameInterfaceLayer> interfaceLayers = new List<GameInterfaceLayer>(_gameInterfaceLayers);
+			ModHooks.ModifyInterfaceLayers(interfaceLayers);
-			foreach (GameInterfaceLayer current in _gameInterfaceLayers) {
+			foreach (GameInterfaceLayer current in interfaceLayers) {
 				if (!current.Draw())
 					break;
 			}
@@ -32614,6 +_,8 @@
 		}
 
 		private void DrawInterface_33_MouseText() {
+			// TODO - UI Sorting and selective disable support -  move this to new one between 32 and 33
+			ModHooks.PostDrawInterface(spriteBatch);
 			if (mouseItem.stack <= 0)
 				mouseItem.type = 0;
 
@@ -32725,6 +_,7 @@
 		}
 
 		private static void DrawInterface_26_InterfaceLogic3() {
+			bool wasOpen = playerInventory;
 			if (player[myPlayer].dead)
 				playerInventory = false;
 
@@ -32733,7 +_,9 @@
 				if (InGuideCraftMenu)
 					InGuideCraftMenu = false;
 
+				if (wasOpen)
-				Recipe.FindRecipes();
+					Recipe.FindRecipes();
+
 				InReforgeMenu = false;
 			}
 
@@ -34489,6 +_,8 @@
 					text2 = string.Format("{0:0,0}", txDataType[j]);
 					spriteBatch.DrawString(fontMouseText, text2, new Vector2(num3, num4), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), scale, SpriteEffects.None, 0f);
 				}
+
+				ModNet.DrawModDiagnoseNet();
 			}
 		}
 
@@ -34595,6 +_,11 @@
 							if (type == 439 || type == 370)
 								scale = 1.5f;
 
+							if (!NPCLoader.DrawHealthBar(npc[i], ref scale)) {
+								npc[i].position -= npc[i].visualOffset;
+								continue;
+							}
+
 							if ((!expertMode || type != 266) && (type != 439 && type != 440 || npc[i].ai[0] != 5f)) {
 								if (type >= 134 && type <= 136) {
 									scale = 1.5f;
@@ -36130,7 +_,8 @@
 					goto IL_2C6;
 				}
 
-			IL_3E3:;
+			IL_3E3:
+				;
 			}
 
 			invasionProgressNearInvasion = flag;
@@ -36837,7 +_,7 @@
 				array7[0] = 1f;
 				if (selectedMenu >= 1) {
 					LanguageManager.Instance.SetLanguage(selectedMenu);
-					menuMode = 0;
+					menuMode = Interface.loadModsID;
 					PlaySound(10, -1, -1, 1, 1f, 0f);
 					SaveSettings();
 				}
@@ -36986,7 +_,7 @@
 				}
 			}
 			else {
-				if (netMode == 1 || menuMode == 14) {
+				if (netMode == 1 && menuMode < 10000 && menuMode != 888 || menuMode == 14) {
 					num5 = 2;
 					array9[0] = statusText;
 					array[0] = true;
@@ -37103,10 +_,14 @@
 						else
 							text = text + " -world \"" + worldPathName + "\"";
 
+						text = text + " -modpath \"" + ModOrganizer.modPath + "\"";
+						if (showServerConsole)
+							text = text + " -showserverconsole";
+
 #if WINDOWS
-						this.tServer.StartInfo.FileName = "TerrariaServer.exe";
+						this.tServer.StartInfo.FileName = "tModLoaderServer.exe";
 #else
-						tServer.StartInfo.FileName = "TerrariaServer";
+						tServer.StartInfo.FileName = "tModLoaderServer";
 #endif
 						tServer.StartInfo.Arguments = text;
 						if (libPath != "") {
@@ -37115,7 +_,7 @@
 						}
 
 						tServer.StartInfo.UseShellExecute = false;
-						tServer.StartInfo.CreateNoWindow = true;
+						tServer.StartInfo.CreateNoWindow = !showServerConsole;
 						if (SocialAPI.Network != null)
 							SocialAPI.Network.LaunchLocalServer(tServer, MenuServerMode);
 						else
@@ -37136,7 +_,10 @@
 					array4[3] = 30;
 					array4[4] = 70;
 					array4[5] = 70;
+					array4[6] = 70;
-					num5 = 6;
+					num5 = 7;
+					array9[6] = Language.GetTextValue(showServerConsole ? "tModLoader.MPShowServerConsoleYes" : "tModLoader.MPShowServerConsoleNo");
+					array7[6] = 0.5f;
 					array9[0] = Lang.menu[135].Value;
 					array9[4] = Lang.menu[144].Value;
 					array9[5] = Lang.menu[5].Value;
@@ -37197,6 +_,10 @@
 							menuMode = 6;
 							PlaySound(11, -1, -1, 1, 1f, 0f);
 							break;
+						case 6:
+							showServerConsole = !showServerConsole;
+							PlaySound(12, -1, -1, 1, 1f, 0f);
+							break;
 					}
 				}
 				else if (menuMode == 15) {
@@ -37217,15 +_,22 @@
 				else if (menuMode == 200) {
 					num5 = 3;
 					array9[0] = Lang.menu[9].Value;
+					if (WorldIO.customDataFail != null)
+						array9[0] = WorldIO.customDataFail.modName + ": " + array9[0];
+
 					array[0] = true;
 					num2 -= 30;
 					array4[1] = 70;
 					array4[2] = 50;
 					array9[1] = Lang.menu[10].Value;
 					array9[2] = Lang.menu[6].Value;
+					if (WorldIO.customDataFail != null)
+						array9[2] = Language.GetTextValue("tModLoader.OpenLogs");
+
 					if (selectedMenu == 1) {
 						if (FileUtilities.Exists(worldPathName + ".bak", ActiveWorldFileData.IsCloudSave)) {
 							FileUtilities.Move(worldPathName + ".bak", worldPathName, ActiveWorldFileData.IsCloudSave, true);
+							WorldIO.LoadBackup(worldPathName, ActiveWorldFileData.IsCloudSave);
 							PlaySound(10, -1, -1, 1, 1f, 0f);
 							WorldGen.playWorld();
 							menuMode = 10;
@@ -37240,13 +_,24 @@
 					if (selectedMenu == 2 || flag5) {
 						flag5 = false;
 						PlaySound(11, -1, -1, 1, 1f, 0f);
+						if (WorldIO.customDataFail == null) {
-						menuMode = 0;
+							menuMode = 0;
+						}
+						else {
+							Logging.tML.Error(Language.GetTextValue("tModLoader.WorldIODataException"), WorldIO.customDataFail.InnerException);
+							PlaySound(SoundID.MenuOpen);
+							Process.Start(Logging.LogPath);
+						}
+
 						netMode = 0;
 					}
 				}
 				else if (menuMode == 201) {
 					num5 = 3;
 					array9[0] = Lang.menu[9].Value;
+					if (WorldIO.customDataFail != null)
+						array9[0] = WorldIO.customDataFail.modName + ": " + array9[0];
+
 					array[0] = true;
 					array[1] = true;
 					num2 -= 30;
@@ -37254,9 +_,21 @@
 					array4[2] = 50;
 					array9[1] = Lang.menu[11].Value;
 					array9[2] = Lang.menu[5].Value;
+					if (WorldIO.customDataFail != null)
+						array9[2] = Language.GetTextValue("tModLoader.OpenLogs");
+
 					if (selectedMenu == 2 || flag5) {
 						flag5 = false;
 						PlaySound(11, -1, -1, 1, 1f, 0f);
+						if (WorldIO.customDataFail == null) {
+							menuMode = 0;
+						}
+						else {
+							Logging.tML.Error(Language.GetTextValue("tModLoader.WorldIODataException"), WorldIO.customDataFail.InnerException);
+							PlaySound(SoundID.MenuOpen);
+							Process.Start(Logging.LogPath);
+						}
+
 						menuMode = 0;
 						netMode = 0;
 					}
@@ -37341,6 +_,9 @@
 					if (SkyManager.Instance["Slime"].IsActive())
 						SkyManager.Instance["Slime"].Deactivate(new object[0]);
 
+					// tmod added.
+					Filters.Scene.DeactivateAll();
+					SkyManager.Instance.DeactivateAll();
 					int num12 = 0;
 					num5 = 5;
 					num4 = 60;
@@ -37366,6 +_,7 @@
 					}
 
 					num12++;
+					Interface.AddMenuButtons(this, selectedMenu, array9, array7, ref num2, ref num4, ref num12, ref num5);
 					array9[num12] = Lang.menu[14].Value;
 					if (selectedMenu == num12) {
 						PlaySound(10, -1, -1, 1, 1f, 0f);
@@ -37966,6 +_,7 @@
 						num2 = 210;
 						num4 = 37;
 						num5 = 8;
+						num5++; // Room for tModLoader settings option.
 						array4[num5 - 1] = 8;
 						for (int num20 = 0; num20 < num5; num20++) {
 							array7[num20] = 0.75f;
@@ -38021,6 +_,13 @@
 						}
 
 						num21++;
+						array9[num21] = "tModLoader " + Lang.menu[14].Value; //"tModLoader Settings"
+						if (selectedMenu == num21) {
+							PlaySound(SoundID.MenuOpen);
+							menuMode = Interface.tModLoaderSettingsID;
+						}
+
+						num21++;
 						array9[num21] = Lang.menu[5].Value;
 						if (selectedMenu == num21 || flag5) {
 							flag5 = false;
@@ -39037,6 +_,9 @@
 							WorldGen.setWorldSize();
 						}
 					}
+					else {
+						Interface.ModLoaderMenus(this, selectedMenu, array9, array7, array4, ref num2, ref num4, ref num5, ref flag5);
+					}
 				}
 			}
 
@@ -39559,6 +_,7 @@
 
 			bool flag11 = false;
 			for (int num94 = 0; num94 < num5; num94++) {
+				//patch file: num5, array9, num94
 				if (array9[num94] != null) {
 					Vector2 origin = fontDeathText.MeasureString(array9[num94]);
 					origin.X *= 0.5f;
@@ -39652,6 +_,7 @@
 
 						num103 *= array7[num94];
 						if (!array8[num94])
+							//patch file: array9, array7, array4, num2, num4
 							spriteBatch.DrawString(fontDeathText, array9[num94], new Vector2(num3 + num101 + array5[num94], num2 + num4 * num94 + num102 + origin.Y * array7[num94] + array4[num94]), color10, 0f, origin, num103, SpriteEffects.None, 0f);
 						else
 							spriteBatch.DrawString(fontDeathText, array9[num94], new Vector2(num3 + num101 + array5[num94], num2 + num4 * num94 + num102 + origin.Y * array7[num94] + array4[num94]), color10, 0f, new Vector2(0f, origin.Y), num103, SpriteEffects.None, 0f);
@@ -39764,6 +_,27 @@
 				Vector2 origin2 = fontMouseText.MeasureString(text6);
 				origin2.X *= 0.5f;
 				origin2.Y *= 0.5f;
+				if (menuMode == 0 && !ModCompile.DeveloperMode) {
+					origin2.Y *= 2;
+					var text = "Enable Developer Mode";
+					// measure and draw text from bottom right
+					var textSize = fontMouseText.MeasureString(text);
+					var pos = new Vector2(screenWidth - 10f + num107, screenHeight - 2f + num108);
+					var d_color = color11;
+					if (num106 == 4) // final draw
+					{
+						var rect = new Microsoft.Xna.Framework.Rectangle((int)(pos.X - textSize.X), (int)(pos.Y - textSize.Y), (int)textSize.X, (int)textSize.Y);
+						bool mouseover = rect.Contains(mouseX, mouseY);
+						d_color = mouseover ? highVersionColor : new Microsoft.Xna.Framework.Color(120, 120, 120, 76);
+						if (mouseover && mouseLeftRelease && mouseLeft) {
+							PlaySound(SoundID.MenuOpen);
+							menuMode = Interface.developerModeHelpID;
+						}
+					}
+
+					spriteBatch.DrawString(fontMouseText, text, pos, d_color, 0f, textSize, 1f, SpriteEffects.None, 0f);
+				}
+
 				spriteBatch.DrawString(fontMouseText, text6, new Vector2(screenWidth - origin2.X + num107 - 10f, screenHeight - origin2.Y + num108 - 2f), color11, 0f, origin2, 1f, SpriteEffects.None, 0f);
 			}
 
@@ -39791,10 +_,26 @@
 				if (num109 == 3)
 					num111 = 2;
 
+				string supportMessage = Language.GetTextValue("tModLoader.PatreonSupport");
+				string patreonShortURL = @"patreon.com/tModLoader";
+				bool showPatreon = menuMode == 0;
+				string drawVersion = versionNumber + Environment.NewLine + ModLoader.ModLoader.versionedName + (showPatreon ? Environment.NewLine + supportMessage : "");
-				Vector2 origin3 = fontMouseText.MeasureString(versionNumber);
+				Vector2 origin3 = fontMouseText.MeasureString(drawVersion);
 				origin3.X *= 0.5f;
 				origin3.Y *= 0.5f;
-				spriteBatch.DrawString(fontMouseText, versionNumber, new Vector2(origin3.X + num110 + 10f, screenHeight - origin3.Y + num111 - 2f), color12, 0f, origin3, 1f, SpriteEffects.None, 0f);
+				spriteBatch.DrawString(fontMouseText, drawVersion, new Vector2(origin3.X + num110 + 10f, screenHeight - origin3.Y + num111 - 2f), color12, 0f, origin3, 1f, SpriteEffects.None, 0f);
+				if (num109 == 4)
+					color12 = new Microsoft.Xna.Framework.Color(127, 191, 191, 76);
+
+				if (showPatreon) {
+					origin3 = fontMouseText.MeasureString(supportMessage);
+					Vector2 urlSize = fontMouseText.MeasureString(patreonShortURL);
+					spriteBatch.DrawString(fontMouseText, patreonShortURL, new Vector2(origin3.X + num110 + 10f, screenHeight - origin3.Y + num111 - 2f), color12, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
+					if (num109 == 4 && mouseLeftRelease && mouseLeft && new Microsoft.Xna.Framework.Rectangle((int)origin3.X + 10, screenHeight - (int)urlSize.Y - 2, (int)urlSize.X, (int)origin3.Y).Contains(new Microsoft.Xna.Framework.Point(mouseX, mouseY)) && hasFocus) {
+						PlaySound(SoundID.MenuOpen);
+						Process.Start("https://www.patreon.com/tModLoader");
+					}
+				}
 			}
 
 			Vector2 bonus = DrawThickCursor(false);
@@ -38179,6 +_,21 @@
 			else
 				mouseRightRelease = true;
 
+			if (mouseMiddle)
+				mouseMiddleRelease = false;
+			else
+				mouseMiddleRelease = true;
+
+			if (mouseXButton1)
+				mouseXButton1Release = false;
+			else
+				mouseXButton1Release = true;
+
+			if (mouseXButton2)
+				mouseXButton2Release = false;
+			else
+				mouseXButton2Release = true;
+
 			if (menuMode == num)
 				GamepadMainMenuHandler.LastDrew = num;
 		}
@@ -40055,6 +_,7 @@
 			if (shroomTiles > 200)
 				num9 = 2;
 
+			UgBgStyleLoader.ChooseStyle(ref num9);
 			if (num9 != ugBack) {
 				oldUgBack = ugBack;
 				ugBack = num9;
@@ -40225,6 +_,7 @@
 					array4[5] = 127;
 
 				array4[6] = 185 + hellBackStyle;
+				UgBgStyleLoader.FillTextureArray(num10, array4);
 				LoadBackground(array4[0]);
 				LoadBackground(array4[1]);
 				LoadBackground(array4[2]);
@@ -40482,7 +_,8 @@
 									}
 								}
 
-							IL_1888:;
+							IL_1888:
+								;
 							}
 						}
 					}
@@ -41479,7 +_,8 @@
 									spriteBatch.Draw(backgroundTexture[array2[1]], new Vector2(bgStart + num3 * n + 16 * num24 + num22, bgStartY + backgroundHeight[array2[1]] * num23 + 16 * num25) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num24 + num22 + 16, 16 * num25, 16, 16)), color3);
 								}
 
-							IL_182C:;
+							IL_182C:
+								;
 							}
 						}
 					}
@@ -42416,7 +_,11 @@
 				spriteBatch.End();
 				spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.PointClamp, DepthStencilState.None, RasterizerState.CullCounterClockwise);
 				flag = true;
+				Texture2D modTexture = PlayerHooks.GetMapBackgroundImage(player[myPlayer]);
+				if (modTexture != null) {
+					spriteBatch.Draw(modTexture, new Microsoft.Xna.Framework.Rectangle(0, 0, screenWidth, screenHeight), Microsoft.Xna.Framework.Color.White);
+				}
-				if (screenPosition.Y > (maxTilesY - 232) * 16) {
+				else if (screenPosition.Y > (maxTilesY - 232) * 16) {
 					spriteBatch.Draw(mapBG3Texture, new Microsoft.Xna.Framework.Rectangle(0, 0, screenWidth, screenHeight), Microsoft.Xna.Framework.Color.White);
 				}
 				else if (player[myPlayer].ZoneDungeon) {
@@ -42455,8 +_,22 @@
 						spriteBatch.Draw(mapBG1Texture, new Microsoft.Xna.Framework.Rectangle(0, 0, screenWidth, screenHeight), bgColor);
 				}
 
+				/* Map texture drawing replaced by an adaptive drawing below, as mod worlds sometimes aren't regular sizes.
 				Microsoft.Xna.Framework.Rectangle destinationRectangle = new Microsoft.Xna.Framework.Rectangle((int)num23, (int)num24, (int)num25, (int)num26);
-				spriteBatch.Draw(mapTexture, destinationRectangle, Microsoft.Xna.Framework.Color.White);
+				Main.spriteBatch.Draw(Main.mapTexture, destinationRectangle, Microsoft.Xna.Framework.Color.White);
+				*/
+				int x = (int)(num + mapFullscreenScale * 10);
+				int y = (int)(num2 + mapFullscreenScale * 10);
+				int width = (int)((maxTilesX - 40) * mapFullscreenScale);
+				int height = (int)((maxTilesY - 40) * mapFullscreenScale);
+				var destinationRectangle = new Microsoft.Xna.Framework.Rectangle(x, y, width, height);
+				spriteBatch.Draw(mapTexture, destinationRectangle, new Microsoft.Xna.Framework.Rectangle(40, 4, 848, 240), Microsoft.Xna.Framework.Color.White);
+				int edgeWidth = (int)(40 * mapFullscreenScale * 5);
+				int edgeHeight = (int)(4 * mapFullscreenScale * 5);
+				destinationRectangle = new Microsoft.Xna.Framework.Rectangle(x - edgeWidth, y - edgeHeight, edgeWidth, height + 2 * edgeHeight);
+				spriteBatch.Draw(mapTexture, destinationRectangle, new Microsoft.Xna.Framework.Rectangle(0, 0, 40, 248), Microsoft.Xna.Framework.Color.White);
+				destinationRectangle = new Microsoft.Xna.Framework.Rectangle(x + width, y - edgeHeight, edgeWidth, height + 2 * edgeHeight);
+				spriteBatch.Draw(mapTexture, destinationRectangle, new Microsoft.Xna.Framework.Rectangle(888, 0, 40, 248), Microsoft.Xna.Framework.Color.White);
 				if (num16 < 1f) {
 					spriteBatch.End();
 					spriteBatch.Begin();
@@ -42555,7 +_,7 @@
 			float num35 = textureMaxHeight * num16;
 			float num36 = num;
 			float num37 = 0f;
-			for (int k = 0; k <= 4; k++) {
+			for (int k = 0; k <= mapTargetX - 1; k++) {
 				if ((k + 1) * textureMaxWidth > num6 && k * textureMaxWidth < num6 + num8) {
 					for (int l = 0; l <= num5; l++) {
 						if ((l + 1) * textureMaxHeight > num7 && l * textureMaxHeight < num7 + num9) {
@@ -42920,6 +_,7 @@
 						}
 					}
 					else if (type >= num99 && type < num99 + num100) {
+						//patch file: num91, num92
 						Tile tile5 = tile[num91, num92];
 						if (tile5 != null) {
 							int num109 = num91;
@@ -41249,6 +_,7 @@
 					}
 					else {
 						text = Lang.GetMapObjectName(type);
+						text = Lang._mapLegendCache.FromTile(Map[num91, num92], num91, num92);
 					}
 				}
 
@@ -43093,6 +_,7 @@
 				}
 
 				spriteBatch.Draw(mapIconTexture[num145], new Vector2(num143, num144), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, mapIconTexture[num145].Width, mapIconTexture[num145].Height)), new Microsoft.Xna.Framework.Color(num146, num146, num146, num146), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
+				ModHooks.PostDrawFullscreenMap(ref text);
 				Vector2 bonus = DrawThickCursor(false);
 				DrawCursor(bonus, false);
 			}
@@ -43557,6 +_,7 @@
 			tileColor.R = (byte)((bgColor.R + bgColor.G + bgColor.B + bgColor.R * 7) / 10);
 			tileColor.G = (byte)((bgColor.R + bgColor.G + bgColor.B + bgColor.G * 7) / 10);
 			tileColor.B = (byte)((bgColor.R + bgColor.G + bgColor.B + bgColor.B * 7) / 10);
+			ModHooks.ModifySunLight(ref tileColor, ref bgColor);
 			backColor = bgColor;
 			trueBackColor = backColor;
 			Lighting.Initialize(true);
@@ -42229,6 +_,7 @@
 					waterStyle = 0;
 				}
 
+				WaterStyleLoader.ChooseWaterStyle(ref waterStyle);
 				if (bgStyle != 4 && bloodMoon && !dayTime)
 					waterStyle = 9;
 
@@ -42654,6 +_,8 @@
 					if (liquidAlpha[10] > 1f)
 						liquidAlpha[10] = 1f;
 				}
+
+				WaterStyleLoader.UpdateLiquidAlphas();
 			}
 
 			drewLava = false;
@@ -42678,8 +_,8 @@
 					return;
 				}
 
-				for (int i = 0; i < 11; i++) {
+				for (int i = 0; i < WaterStyleLoader.WaterStyleCount; i++) {
-					if (i != 1 && liquidAlpha[i] > 0f)
+					if (i != 1 && i != 11 && liquidAlpha[i] > 0f)
 						DrawWater(bg, i, liquidAlpha[i]);
 				}
 
@@ -44483,24 +_,22 @@
 
 				if (liquidAlpha[10] > 0f) {
 					if (bg) {
-						if (waterStyle < 10) {
+						if (waterStyle < 10)
 							DrawWater(bg, 10, liquidAlpha[10]);
-							return;
-						}
-
-						DrawWater(bg, 10, 1f);
-						return;
+						else
+							DrawWater(bg, 10, 1f);
 					}
 					else {
 						DrawWater(bg, 10, liquidAlpha[10]);
 					}
 				}
 
+				WaterStyleLoader.DrawWatersToScreen(bg);
 				return;
 			}
 		}
 
-		protected void DrawWater(bool bg = false, int Style = 0, float Alpha = 1f) {
+		protected internal void DrawWater(bool bg = false, int Style = 0, float Alpha = 1f) {
 			if (!Lighting.NotRetro) {
 				oldDrawWater(bg, Style, Alpha);
 				return;
@@ -44789,7 +_,8 @@
 						}
 					}
 
-				IL_E7F:;
+				IL_E7F:
+					;
 				}
 			}
 
@@ -44976,12 +_,17 @@
 						Main.tile[j, i] = tile;
 					}
 
-					byte wall = tile.wall;
+					ushort wall = tile.wall;
 					if (wall > 0 && !FullTile(j, i)) {
 						Microsoft.Xna.Framework.Color color = Lighting.GetColor(j, i);
 						if (color.R != 0 || color.G != 0 || color.B != 0 || i >= num8) {
 							LoadWall(wall);
 							int num9 = wallFrame[wall] * 180;
+							if (!WallLoader.PreDraw(j, i, wall, spriteBatch)) {
+								WallLoader.PostDraw(j, i, wall, spriteBatch);
+								continue;
+							}
+
 							if (Lighting.NotRetro && !wallLight[wall] && (tile.wall < 88 || tile.wall > 93) && !WorldGen.SolidTile(tile)) {
 								Texture2D texture;
 								if (canDrawColorWall(j, i))
@@ -45037,6 +_,8 @@
 								if (flag4)
 									spriteBatch.Draw(wallOutlineTexture, new Vector2((float)(j * 16 - (int)screenPosition.X), (float)(i * 16 - (int)screenPosition.Y + 14)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 14, 16, 2)), color, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
 							}
+
+							WallLoader.PostDraw(j, i, wall, spriteBatch);
 						}
 					}
 				}
@@ -44369,4 +_,6 @@
 		}
 
 		public void LoadBackground(int i) {
-			if (i >= 0 && !backgroundLoaded[i]) {
+			// sometimes when updating GraphicsProfile from Reach to HiDef, the device is re-created rather than reset
+			// This happens early, and the background loading texture may be disposed
+			if (i >= 0 && (!backgroundLoaded[i] || backgroundTexture[i].IsDisposed)) {
@@ -44377,5 +_,5 @@
 			}
 		}
 
-		protected void LoadNPC(int i) {
+		public void LoadNPC(int i) {
 			if (!NPCLoaded[i] || npcTexture[i] == null) {
@@ -44384,5 +_,5 @@
 			}
 		}
 
-		protected void LoadProjectile(int i) {
+		public void LoadProjectile(int i) {
 			if (!projectileLoaded[i]) {
@@ -44391,5 +_,5 @@
 			}
 		}
 
-		protected void LoadGore(int i) {
+		public void LoadGore(int i) {
 			if (!goreLoaded[i]) {
@@ -44398,5 +_,5 @@
 			}
 		}
 
-		protected void LoadWall(int i) {
+		public void LoadWall(int i) {
 			if (!wallLoaded[i]) {
@@ -44405,5 +_,5 @@
 			}
 		}
 
-		protected void LoadTiles(int i) {
+		public void LoadTiles(int i) {
 			if (!tileSetsLoaded[i]) {
@@ -44758,6 +_,7 @@
 							}
 						}
 
+						SurfaceBgStyleLoader.DrawFarTexture();
 						SkyManager.Instance.DrawToDepth(spriteBatch, 5f);
 					}
 				}
@@ -46969,6 +_,8 @@
 								spriteBatch.Draw(backgroundTexture[42], new Vector2(bgStart + bgW * num17, bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, backgroundWidth[42], backgroundHeight[42])), backColor, 0f, default(Vector2), bgScale, SpriteEffects.None, 0f);
 							}
 						}
+
+						SurfaceBgStyleLoader.DrawMiddleTexture();
 					}
 				}
 
@@ -44965,7 +_,7 @@
 			}
 
 			if (!mapFullscreen) {
-				for (int num21 = 0; num21 < 10; num21++) {
+				for (int num21 = 0; num21 < bgAlpha2.Length; num21++) {
 					if (bgStyle == num21) {
 						bgAlpha[num21] += tranSpeed;
 						if (bgAlpha[num21] > 1f)
@@ -47584,6 +_,7 @@
 							}
 						}
 
+						//patch file: num21
 						if (bgAlpha[num21] > 0f && num21 == 9) {
 							float num44 = (float)backColor.A / 255f;
 							Microsoft.Xna.Framework.Color color2 = backColor;
@@ -47733,6 +_,8 @@
 
 							SkyManager.Instance.DrawToDepth(spriteBatch, 1f);
 						}
+
+						SurfaceBgStyleLoader.DrawCloseBackground(num21);
 					}
 				}
 			}
@@ -47791,7 +_,7 @@
 							if (flag) {
 								bool flag2 = false;
 								bool flag3 = false;
-								if (tile[x, y].type == 10) {
+								if (TileLoader.IsClosedDoor(tile[x, y])) {
 									flag2 = false;
 								}
 								else if (tileSolid[tile[x, y].type] && !tileSolidTop[tile[x, y].type]) {
@@ -47861,14 +_,20 @@
 		}
 
 		protected override void Draw(GameTime gameTime) {
+			try {
-			if (!_isDrawingOrUpdating && IsGraphicsDeviceAvailable) {
+				if (!_isDrawingOrUpdating && IsGraphicsDeviceAvailable) {
-				_isDrawingOrUpdating = true;
+					_isDrawingOrUpdating = true;
-				EnsureRenderTargetContent();
+					EnsureRenderTargetContent();
-				DoDraw(gameTime);
+					DoDraw(gameTime);
-				if (OnPostDraw != null)
+					if (OnPostDraw != null)
-					OnPostDraw(gameTime);
+						OnPostDraw(gameTime);
 
-				_isDrawingOrUpdating = false;
+					_isDrawingOrUpdating = false;
+				}
+			}
+			catch (Exception e) {
+				Logging.Terraria.Error(e);
+				throw;
 			}
 		}
 
@@ -48001,6 +_,7 @@
 							else if (player.scope)
 								num6 = 0.5f;
 
+							PlayerHooks.ModifyZoom(Main.player[myPlayer], ref num6);
 							Vector2 vector2 = (MouseScreen - new Vector2(screenWidth, screenHeight) / 2f) / (new Vector2(screenWidth, screenHeight) / 2f);
 							Vector2 vector3 = vector2;
 							num5 = 48f;
@@ -48027,8 +_,10 @@
 						if (num8 < 0)
 							num8 = 0;
 
+						float zoom = .8f;
+						PlayerHooks.ModifyZoom(player[myPlayer], ref zoom);
-						num3 = (num7 - screenWidth / 2) / 1.25f;
+						num3 = (num7 - screenWidth / 2) * zoom;
-						num4 = (num8 - screenHeight / 2) / 1.25f;
+						num4 = (num8 - screenHeight / 2) * zoom;
 					}
 					else if (player[myPlayer].inventory[player[myPlayer].selectedItem].type == 1254 && mouseRight) {
 						int num9 = mouseX;
@@ -48045,8 +_,10 @@
 						if (num10 < 0)
 							num10 = 0;
 
+						float zoom = 0.6666667f;
+						PlayerHooks.ModifyZoom(player[myPlayer], ref zoom);
-						num3 = (num9 - screenWidth / 2) / 1.5f;
+						num3 = (num9 - screenWidth / 2) * zoom;
-						num4 = (num10 - screenHeight / 2) / 1.5f;
+						num4 = (num10 - screenHeight / 2) * zoom;
 					}
 					else if (player[myPlayer].inventory[player[myPlayer].selectedItem].type == 1299 && player[myPlayer].selectedItem != 58) {
 						int num11 = mouseX;
@@ -48063,8 +_,10 @@
 						if (num12 < 0)
 							num12 = 0;
 
+						float zoom = 0.6666667f;
+						PlayerHooks.ModifyZoom(player[myPlayer], ref zoom);
-						num3 = (num11 - screenWidth / 2) / 1.5f;
+						num3 = (num11 - screenWidth / 2) * zoom;
-						num4 = (num12 - screenHeight / 2) / 1.5f;
+						num4 = (num12 - screenHeight / 2) * zoom;
 					}
 					else if (player[myPlayer].scope && mouseRight) {
 						int num13 = mouseX;
@@ -48081,8 +_,32 @@
 						if (num14 < 0)
 							num14 = 0;
 
+						float zoom = 0.5f;
+						PlayerHooks.ModifyZoom(player[myPlayer], ref zoom);
-						num3 = (num13 - screenWidth / 2) / 2f;
+						num3 = (num13 - screenWidth / 2) * zoom;
-						num4 = (num14 - screenHeight / 2) / 2f;
+						num4 = (num14 - screenHeight / 2) * zoom;
+					}
+					else {
+						int mouseXClamped = mouseX;
+						int mouseYClamped = mouseY;
+						if (mouseXClamped > screenWidth)
+							mouseXClamped = screenWidth;
+
+						if (mouseXClamped < 0)
+							mouseXClamped = 0;
+
+						if (mouseYClamped > screenHeight)
+							mouseYClamped = screenHeight;
+
+						if (mouseYClamped < 0)
+							mouseYClamped = 0;
+
+						float zoom = -1f;
+						PlayerHooks.ModifyZoom(player[myPlayer], ref zoom);
+						if (zoom != -1f) {
+							num3 = (mouseXClamped - screenWidth / 2) * zoom;
+							num4 = (mouseYClamped - screenHeight / 2) * zoom;
+						}
 					}
 				}
 
@@ -46076,6 +_,7 @@
 
 				screenPosition.X = (int)screenPosition.X;
 				screenPosition.Y = (int)screenPosition.Y;
+				PlayerHooks.ModifyScreenPosition(player[myPlayer]);
 			}
 
 			if (!gameMenu && netMode != 2)
@@ -46728,6 +_,8 @@
 			tileColor.G = (byte)((bgColor.R + bgColor.G + bgColor.B + bgColor.G * 7) / 10);
 			tileColor.B = (byte)((bgColor.R + bgColor.G + bgColor.B + bgColor.B * 7) / 10);
 			tileColor = SkyManager.Instance.ProcessTileColor(tileColor);
+			// TODO: Add in white and white2 as sunColor and moonColor
+			ModHooks.ModifySunLight(ref tileColor, ref bgColor);
 			float num43 = maxTilesX / 4200;
 			num43 *= num43;
 			atmo = (float)((double)((screenPosition.Y + (float)(screenHeight / 2)) / 16f - (65f + 10f * num43)) / (worldSurface / 5.0));
@@ -48798,8 +_,8 @@
 
 			base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Black);
 			base.Draw(gameTime);
-			float val = screenWidth / 1920f;
-			float val2 = screenHeight / 1200f;
+			float val = screenWidth / (ModLoader.ModLoader.removeForcedMinimumZoom ? 1920f : 8192f);
+			float val2 = screenHeight / (ModLoader.ModLoader.removeForcedMinimumZoom ? 1200f : 8192f);
 			GameViewMatrix.Effects = gameMenu || player[myPlayer].gravDir == 1f ? SpriteEffects.None : SpriteEffects.FlipVertically;
 			BackgroundViewMatrix.Effects = GameViewMatrix.Effects;
 			ForcedMinimumZoom = Math.Max(Math.Max(1f, val), val2);
@@ -46764,6 +_,7 @@
 			else
 				Rasterizer = RasterizerState.CullClockwise;
 
+			ModHooks.ModifyTransformMatrix(ref GameViewMatrix);
 			bool flag = !drawToScreen && netMode != 2 && !gameMenu && !mapFullscreen && Lighting.NotRetro && Filters.Scene.CanCapture();
 			if (flag)
 				Filters.Scene.BeginCapture();
@@ -46915,7 +_,7 @@
 			spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, Rasterizer, null, GameViewMatrix.TransformationMatrix);
 			DrawBackgroundBlackFill();
 			spriteBatch.End();
-			Overlays.Scene.Draw(spriteBatch, RenderLayers.Landscape);
+			Overlays.Scene.Draw(spriteBatch, RenderLayers.Landscape, true);
 			spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, Rasterizer, null, UIScaleMatrix);
 			if (gameMenu || netMode == 2) {
 				bool isActive = base.IsActive;
@@ -49169,6 +_,7 @@
 				TimeLogger.DetailedDrawReset();
 
 				spriteBatch.End();
+				WorldHooks.PostDrawTiles();
 				TimeLogger.DetailedDrawTime(35);
 				SortDrawCacheWorms();
 				DrawCachedProjs(DrawCacheProjsBehindProjectiles, true);
@@ -49231,7 +_,7 @@
 				ScreenObstruction.Draw(spriteBatch);
 				TimeLogger.DetailedDrawReset();
 				spriteBatch.End();
-				Overlays.Scene.Draw(spriteBatch, RenderLayers.All);
+				Overlays.Scene.Draw(spriteBatch, RenderLayers.All, true);
 				if (flag)
 					Filters.Scene.EndCapture();
 
@@ -49437,6 +_,21 @@
 				else
 					mouseRightRelease = true;
 
+				if (mouseMiddle)
+					mouseMiddleRelease = false;
+				else
+					mouseMiddleRelease = true;
+
+				if (mouseXButton1)
+					mouseXButton1Release = false;
+				else
+					mouseXButton1Release = true;
+
+				if (mouseXButton2)
+					mouseXButton2Release = false;
+				else
+					mouseXButton2Release = true;
+
 				if (!PlayerInput.Triggers.Current.MouseRight)
 					stackSplit = 0;
 
@@ -49551,6 +_,7 @@
 				num3 = 0;
 			}
 
+			SurfaceBgStyleLoader.ChooseStyle(ref num3);
 			int num5 = 30;
 			tranSpeed = 0.05f;
 			if (num3 == 0)
@@ -47660,7 +_,7 @@
 				if (bgAlpha2[6] > 1f)
 					bgAlpha2[6] = 1f;
 			}
-			else {
+			else if (bgStyle == 0 || bgStyle == 3) {
 				bgAlpha2[0] += tranSpeed;
 				if (bgAlpha2[0] > 1f)
 					bgAlpha2[0] = 1f;
@@ -47690,6 +_,15 @@
 					bgAlpha2[6] = 0f;
 			}
 
+			if (bgStyle < SurfaceBgStyleLoader.vanillaSurfaceBgStyleCount) {
+				for (int i = SurfaceBgStyleLoader.vanillaSurfaceBgStyleCount; i < bgAlpha2.Length /*SurfaceBackgroundStyleLoader.SurfaceStyleCount*/; i++) {
+					bgAlpha2[i] -= tranSpeed;
+					if (bgAlpha2[i] < 0f)
+						bgAlpha2[i] = 0f;
+				}
+			}
+
+			SurfaceBgStyleLoader.ModifyFarFades(bgStyle, bgAlpha2, tranSpeed);
 			if (ignoreErrors) {
 				try {
 					DrawSurfaceBG();
@@ -50130,6 +_,14 @@
 			}
 		}
 
+		public static void NewText(string newText, Microsoft.Xna.Framework.Color color, bool force = false) {
+			NewText(newText, color.R, color.G, color.B, force);
+		}
+
+		public static void NewText(object o, Microsoft.Xna.Framework.Color color = default, bool force = false) {
+			NewText(o.ToString(), color.R, color.G, color.B, force);
+		}
+
 		public static void NewText(string newText, byte R = 255, byte G = 255, byte B = 255, bool force = false) {
 			int num = 80;
 			if (!force && newText.Length > num) {
@@ -50786,7 +_,7 @@
 						num++;
 				}
 
-				for (int j = 0; j < 580; j++) {
+				for (int j = 0; j < townNPCCanSpawn.Length; j++) {
 					townNPCCanSpawn[j] = false;
 				}
 
@@ -50911,6 +_,7 @@
 							for (int m = 0; m < 58; m++) {
 								if (player[l].inventory[m] != null & player[l].inventory[m].stack > 0) {
 									if (num27 < 2000000000) {
+										//patch file: num27
 										if (player[l].inventory[m].type == 71)
 											num27 += player[l].inventory[m].stack;
 
@@ -51101,6 +_,9 @@
 
 					if (WorldGen.prioritizedTownNPC == 0 && NPC.savedBartender && num25 < 1)
 						WorldGen.prioritizedTownNPC = 550;
+
+					// TODO, see what changed and see if we need to do anything to integrate mod npc
+					NPCLoader.CanTownNPCSpawn(num26, num27);
 				}
 			}
 		}
@@ -51206,6 +_,9 @@
 		}
 
 		public static SoundEffectInstance PlaySound(int type, int x = -1, int y = -1, int Style = 1, float volumeScale = 1f, float pitchOffset = 0f) {
+			if (waveBank == null) //supress extra exceptions from audio engine failing to load
+				return null;
+
 #if !WINDOWS
 			object audioLock = _audioLock;
 			lock (audioLock) {
@@ -51284,7 +_,10 @@
 						}
 
 						SoundEffectInstance soundEffectInstance = null;
+						if (SoundLoader.PlayModSound(type, num, num2, num3, ref soundEffectInstance)) {
+							// Modders can return null to not play anything (prevent overlap), return the original sound effect (restarts sound), or return a new sound effect instance to allow overlapping sound.
+						}
-						if (type == 0) {
+						else if (type == 0) {
 							int num7 = rand.Next(3);
 							soundInstanceDig[num7].Stop();
 							soundInstanceDig[num7] = soundDig[num7].CreateInstance();
@@ -51803,6 +_,15 @@
 							soundEffectInstance.Pan = num3;
 							trackableSoundInstances[num] = soundEffectInstance;
 						}
+						// TODO, trackable sounds? verify working. return soundEffectInstance
+						else if (type == SoundLoader.customSoundType) {
+							SoundLoader.customSoundInstances[num].Stop();
+							SoundLoader.customSoundInstances[num] = SoundLoader.customSounds[num].CreateInstance();
+							SoundLoader.customSoundInstances[num].Volume = num2;
+							SoundLoader.customSoundInstances[num].Pan = num3;
+							//Main.PlaySoundInstance(SoundLoader.customSoundInstances[num]);
+							soundEffectInstance = SoundLoader.customSoundInstances[num];
+						}
 
 						if (soundEffectInstance != null) {
 							soundEffectInstance.Pitch += pitchOffset;
@@ -51810,11 +_,34 @@
 							PlaySoundInstance(soundEffectInstance);
 						}
 
+						if (type >= 30 && type <= 35 || type == 39) {
+							if (ambientError > 0)
+								ambientError--;
+						}
+						else {
+							if (soundError > 0)
+								soundError--;
+						}
+
 						result = soundEffectInstance;
 						return result;
 					}
 				}
 				catch {
+					if (type >= 30 && type <= 35 || type == 39) {
+						ambientError++;
+						if (ambientError >= 100) {
+							ambientError = 0;
+							ambientVolume = 0f;
+						}
+					}
+					else {
+						soundError++;
+						if (soundError >= 100) {
+							soundError = 0;
+							soundVolume = 0f;
+						}
+					}
 				}
 
 				return null;
@@ -51953,7 +_,9 @@
 			}
 
 #if WINDOWS
+			// appears redundant. Just causes the window to fight the user when attempting to resize too small
+			// with this disabled, the window will just snap back to minimum size when released
-			if (!fullscreen && !flag2)
+			/*if (!fullscreen && !flag2)
 			{
 				if (form.ClientSize.Width < Main.graphics.PreferredBackBufferWidth)
 				{
@@ -51965,10 +_,11 @@
 					height = form.ClientSize.Height;
 					flag2 = true;
 				}
-			}
+			}*/
 #endif
-			width &= 2147483646;
-			height &= 2147483646;
+			// unknown justification for preventing odd window sizes. Causes excessive device resets.
+			// width &= 2147483646;
+			// height &= 2147483646;
 			width = Math.Max(width, minScreenW);
 			height = Math.Max(height, minScreenH);
 			if (width != num3 || height != num4 || flag2) {
@@ -51980,7 +_,9 @@
 				screenHeight = height;
 				graphics.PreferredBackBufferWidth = screenWidth;
 				graphics.PreferredBackBufferHeight = screenHeight;
+				if (width != num3 || height != num4) //avoid resetting the device when it doesn't need resizing
-				graphics.ApplyChanges();
+					graphics.ApplyChanges();
+
 				PlayerInput.CacheOriginalScreenDimensions();
 				FixUIScale();
 				if (OnResolutionChanged != null)
