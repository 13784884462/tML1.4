--- src/Terraria/Terraria/Main.cs
+++ src/tModLoader/Terraria/Main.cs
@@ -32,9 +_,10 @@
 using System.Text;
 using System.Threading;
 using System.Threading.Tasks;
 #if WINDOWS
 using System.Windows.Forms;
 #endif
+using Steamworks;
 using Terraria.Achievements;
 using Terraria.Audio;
 using Terraria.Chat;
@@ -69,6 +_,12 @@
 using Terraria.IO;
 using Terraria.Localization;
 using Terraria.Map;
+using Terraria.ModLoader;
+using Terraria.ModLoader.Audio;
+using Terraria.ModLoader.Core;
+using Terraria.ModLoader.Engine;
+using Terraria.ModLoader.IO;
+using Terraria.ModLoader.UI;
 using Terraria.Net;
 using Terraria.ObjectData;
 using Terraria.Social;
@@ -237,22 +_,22 @@
 		public static NPCHeadRenderer BossNPCHeadRenderer = null;
 		public static string versionNumber = "v1.4.0.5";
 		public static string versionNumber2 = "v1.4.0.5";
-		public static string SavePath = Program.LaunchParameters.ContainsKey("-savedirectory") ? Program.LaunchParameters["-savedirectory"] : Platform.Get<IPathService>().GetStoragePath("Terraria");
+		public static string SavePath = Program.SavePath;
 		public static bool AnnouncementBoxDisabled;
 		public static int AnnouncementBoxRange = -1;
 		public static string AutogenSeedName;
 		private static GameModeData _currentGameModeInfo = GameModeData.NormalMode;
 		public static Dictionary<int, GameModeData> RegisterdGameModes = new Dictionary<int, GameModeData> {
 			{ 0, GameModeData.NormalMode },
 			{ 1, GameModeData.ExpertMode },
 			{ 2, GameModeData.MasterMode },
 			{ 3, GameModeData.CreativeMode }		};
 		private static bool? _overrideForExpertMode = null;
 		private static bool? _overrideForMasterMode = null;
 		public static bool drunkWorld = false;
 		public static bool getGoodWorld = false;
 		public static Vector2 destroyerHB = new Vector2(0f, 0f);
 		public static FavoritesFile LocalFavoriteData = new FavoritesFile(SavePath + "/favorites.json", isCloud: false);
-		public static FavoritesFile CloudFavoritesData = new FavoritesFile("/favorites.json", isCloud: true);
+		public static FavoritesFile CloudFavoritesData = new FavoritesFile("/ModLoader/favorites.json", true);
 		public static FileMetadata WorldFileMetadata;
 		public static FileMetadata MapFileMetadata;
@@ -271,5 +_,6 @@
 		public static ulong LobbyId = 0uL;
 		private static Microsoft.Xna.Framework.Color[] _mapColorCacheArray = new Microsoft.Xna.Framework.Color[30000];
+		public static bool playerLoaded => ActivePlayersCount > 0;
 		public WaterfallManager waterfallManager;
 		public static WorldSections sectionManager;
 		public static bool ServerSideCharacter;
@@ -282,6 +_,7 @@
 		public static ulong TileFrameSeed = (ulong)Guid.NewGuid().GetHashCode();
 		private static ulong _drawCycleCounter;
 		public static ContentManager ShaderContentManager;
+		internal static TMLContentManager AlternateContentManager;
 		public static Ref<Effect> ScreenShaderRef = new Ref<Effect>();
 		public static Ref<Effect> PixelShaderRef = new Ref<Effect>();
 		public static Ref<Effect> TileShaderRef = new Ref<Effect>();
@@ -291,6 +_,8 @@
 		public static bool UseHeatDistortion = true;
 		public static int npcStreamSpeed = 30;
 		public static int musicError;
+		public static int soundError;
+		public static int ambientError;
 		public static bool dedServFPS;
 		public static int dedServCount1;
 		public static int dedServCount2;
@@ -435,7 +_,10 @@
 		public static int lastMouseY;
 		private static ConcurrentQueue<Action> _mainThreadActions = new ConcurrentQueue<Action>();
 		public static bool mouseLeft;
 		public static bool mouseRight;
+		public static bool mouseMiddle;
+		public static bool mouseXButton1;
+		public static bool mouseXButton2;
 		public static bool isMouseLeftConsumedByUI = false;
 		public static float essScale = 1f;
 		public static int essDir = -1;
@@ -553,13 +_,13 @@
 		public static int wofDrawAreaBottom;
 		public static int wofDrawFrameIndex;
 		public static int offScreenRange = 200;
-		private RenderTarget2D backWaterTarget;
+		public RenderTarget2D backWaterTarget;
 		public static RenderTarget2D waterTarget;
-		private RenderTarget2D tileTarget;
+		public RenderTarget2D tileTarget;
-		private RenderTarget2D blackTarget;
+		public RenderTarget2D blackTarget;
-		private RenderTarget2D tile2Target;
+		public RenderTarget2D tile2Target;
-		private RenderTarget2D wallTarget;
+		public RenderTarget2D wallTarget;
-		private RenderTarget2D backgroundTarget;
+		public RenderTarget2D backgroundTarget;
 		public static RenderTarget2D screenTarget;
 		public static RenderTarget2D screenTargetSwap;
 		public static int maxMapUpdates = 250000;
@@ -580,8 +_,8 @@
 		public static bool clearMap;
 		public static int mapTargetX = 5;
 		public static int mapTargetY = 2;
-		private RenderTarget2D[,] mapTarget = new RenderTarget2D[mapTargetX, mapTargetY];
+		public RenderTarget2D[,] mapTarget = new RenderTarget2D[mapTargetX, mapTargetY];
-		private RenderTarget2D mapSectionTexture;
+		public RenderTarget2D mapSectionTexture;
 		public static bool[,] initMap = new bool[mapTargetX, mapTargetY];
 		public static bool[,] mapWasContentLost = new bool[mapTargetX, mapTargetY];
 		public const int numInfoIcons = 13;
@@ -612,12 +_,12 @@
 		private int lastTileX;
 		private int firstTileY;
 		private int lastTileY;
-		private double bgParallax;
+		internal double bgParallax;
-		private int bgStartX;
+		internal int bgStartX;
-		private int bgLoops;
+		internal int bgLoops;
 		private int bgStartY;
 		private int bgLoopsY;
-		private int bgTopY;
+		internal int bgTopY;
 		public static int renderCount = 99;
 		private const int MF_BYPOSITION = 1024;
 		public static GraphicsDeviceManager graphics;
@@ -659,6 +_,7 @@
 		public static bool maxQ = true;
 		public static float gfxQuality = 1f;
 		public static float gfxRate = 0.01f;
+		public static Microsoft.Xna.Framework.Color DiscoColor => new Microsoft.Xna.Framework.Color(DiscoR, DiscoG, DiscoB);
 		public int DiscoStyle;
 		public static int DiscoR = 255;
 		public static int DiscoB;
@@ -702,7 +_,7 @@
 		public const int maxItems = 400;
 		public const int maxProjectiles = 1000;
 		public const int maxNPCs = 200;
-		private static UICharacterSelect _characterSelectMenu = new UICharacterSelect();
+		internal static UICharacterSelect _characterSelectMenu = new UICharacterSelect();
 		private static UIWorldSelect _worldSelectMenu = new UIWorldSelect();
 		public static UIManageControls ManageControlsMenu = new UIManageControls();
 		public static UIAchievementsMenu AchievementsMenu = new UIAchievementsMenu();
@@ -757,7 +_,14 @@
 		public static int LogoA = 255;
 		public static int LogoB;
 		public static bool LogoT;
-		public static string statusText = "";
+		private static string _statusText = "";
+		public static string statusText {
+			get => _statusText;
+			set {
+				Logging.LogStatusChange(_statusText, value);
+				_statusText = value;
+			}
+		}
 		public static string worldName = "";
 		public static int worldID;
 		public static int background;
@@ -840,8 +_,8 @@
 		public static AudioEngine engine;
 		public static SoundBank soundBank;
 		public static WaveBank waveBank;
-		public static Cue[] music = new Cue[89];
+		public static Music[] music = new Music[89];
 		public static bool[] musicNoCrossFade = new bool[89];
 		public static float[] musicFade = new float[89];
 		public static float musicVolume = 1f;
 		public static float ambientVolume = 1f;
@@ -1018,9 +_,14 @@
 			0.75f
 		};
 		public static byte mouseTextColor;
+		public static Microsoft.Xna.Framework.Color mouseTextColorReal
+			=> new Microsoft.Xna.Framework.Color(mouseTextColor / 255f, mouseTextColor / 255f, mouseTextColor / 255f, mouseTextColor / 255f);
 		public static int mouseTextColorChange = 1;
 		public static bool mouseLeftRelease;
 		public static bool mouseRightRelease;
+		public static bool mouseMiddleRelease = false;
+		public static bool mouseXButton1Release = false;
+		public static bool mouseXButton2Release = false;
 		public static bool playerInventory;
 		public static int stackSplit;
 		public static bool preventStackSplitReset;
@@ -1036,6 +_,7 @@
 		public static bool recFastScroll;
 		public static bool recBigList;
 		public static int recStart;
+		public static Point16 trashSlotOffset = Point16.Zero;
 		public static Recipe[] recipe = new Recipe[Recipe.maxRecipes];
 		public static int[] availableRecipe = new int[Recipe.maxRecipes];
 		public static float[] availableRecipeY = new float[Recipe.maxRecipes];
@@ -1121,7 +_,8 @@
 		public static bool Support4K = true;
 		public static float MinimumZoomComparerX = 1920f;
 		public static float MinimumZoomComparerY = 1200f;
+		public static bool Support8K = true; // provide option to disable 8k (but leave 4k)
 		private static int _renderTargetMaxSize = 2048;
 #if XNA
 		private static GraphicsProfile _selectedGraphicsProfile = GraphicsProfile.Reach;
 		private static GraphicsProfile _currentGraphicsProfile = GraphicsProfile.Reach;
@@ -1135,6 +_,7 @@
 		public static float temporaryGUIScaleSlider = -1f;
 		public static bool temporaryGUIScaleSliderUpdate = false;
 		public static bool InGuideCraftMenu;
+		public static bool HidePlayerCraftingMenu = false;
 		public static bool InReforgeMenu;
 		public static Item HoverItem = new Item();
 		private static int backSpaceCount;
@@ -1156,9 +_,9 @@
 		public static List<WorldFileData> WorldList = new List<WorldFileData>();
 		public static WorldFileData ActiveWorldFileData = new WorldFileData();
 		public static string WorldPath = Path.Combine(SavePath, "Worlds");
-		public static string CloudWorldPath = "worlds";
+		public static string CloudWorldPath = "ModLoader/worlds";
 		public static string PlayerPath = Path.Combine(SavePath, "Players");
-		public static string CloudPlayerPath = "players";
+		public static string CloudPlayerPath = "ModLoader/players";
 		public static Preferences Configuration = new Preferences(SavePath + Path.DirectorySeparatorChar + "config.json");
 		public static Preferences InputProfiles = new Preferences(SavePath + Path.DirectorySeparatorChar + "input profiles.json");
 		public static KeyboardState inputText;
@@ -1852,7 +_,7 @@
 		public static float exitScale = 0.8f;
 		public static bool mouseReforge;
 		public static float reforgeScale = 0.8f;
-		public static Player clientPlayer = new Player();
+		public static Player clientPlayer = new Player(false); // setup inventory is unnecessary
 		public static string getIP = defaultIP;
 		public static string getPort = Convert.ToString(Netplay.ListenPort);
 		public static bool menuMultiplayer;
@@ -1944,6 +_,7 @@
 		public static string oldStatusText = "";
 		public static string autoGenFileLocation = null;
 		public static bool autoShutdown;
+		public static bool showServerConsole = false;
 #if WINDOWS
 		private uint previousExecutionState;
 #endif
@@ -1992,16 +_,18 @@
 		private int selectedMenu2 = -1;
 		public static int selectedPlayer = 0;
 		public static int selectedWorld;
-		public static int menuMode;
+		public static int menuMode = Interface.loadModsID;
 		public static int menuSkip;
 		private static bool _needsLanguageSelect = true;
-		private static Item tooltipPrefixComparisonItem = new Item();
+		public static Item tooltipPrefixComparisonItem = new Item();
+		[Obsolete("Use Main.tooltipPrefixComparisonItem instead")]
+		public static ref Item cpItem => ref tooltipPrefixComparisonItem;
 		private MouseTextCache _mouseTextCache;
 		public int textBlinkerCount;
 		public int textBlinkerState;
 		public static string newWorldName = "";
-		private static int[] specX = new int[1000];
+		public static int[] specX = new int[1000];
-		private static int[] specY = new int[1000];
+		public static int[] specY = new int[1000];
 		public TilePaintSystemV2 TilePaintSystem;
 		public TileDrawing TilesRenderer;
 		public WallDrawing WallsRenderer;
@@ -2026,7 +_,7 @@
 		public static Microsoft.Xna.Framework.Color inventoryBack = new Microsoft.Xna.Framework.Color(220, 220, 220, 220);
 		public static bool mouseText;
 		private static int mH;
-		private static int rare;
+		public static int rare;
 		public static int hairStart;
 		private static int oldHairStyle;
 		private static Microsoft.Xna.Framework.Color oldHairColor;
@@ -2038,8 +_,8 @@
 		public static Player dresserInterfaceDummy;
 		private bool _needToSetupDrawInterfaceLayers = true;
 		private List<GameInterfaceLayer> _gameInterfaceLayers;
-		private static GameTime _drawInterfaceGameTime;
+		public static GameTime _drawInterfaceGameTime;
 		private static bool _settingsButtonIsPushedToSide;
 		private static bool _MouseOversCanClear;
 		private static Vector2 _itemIconCacheScreenPosition;
 		private static int _itemIconCacheSelectedItemID;
@@ -2093,13 +_,13 @@
 		};
 		private static float backgroundLayerTransitionSpeed = 0.05f;
 		public static float atmo;
-		private static float bgScale = 1f;
+		internal static float bgScale = 1f;
-		private static int bgWidthScaled = (int)(1024f * bgScale);
+		internal static int bgWidthScaled = (int)(1024f * bgScale);
 		public static Microsoft.Xna.Framework.Color ColorOfTheSkies;
-		private static Microsoft.Xna.Framework.Color ColorOfSurfaceBackgroundsBase = Microsoft.Xna.Framework.Color.White;
+		internal static Microsoft.Xna.Framework.Color ColorOfSurfaceBackgroundsBase = Microsoft.Xna.Framework.Color.White;
-		private static Microsoft.Xna.Framework.Color ColorOfSurfaceBackgroundsModified = Microsoft.Xna.Framework.Color.White;
+		internal static Microsoft.Xna.Framework.Color ColorOfSurfaceBackgroundsModified = Microsoft.Xna.Framework.Color.White;
-		private float screenOff;
+		internal float screenOff;
-		private float scAdj;
+		internal float scAdj;
 		private float cTop;
 		private bool _isDrawingOrUpdating;
 		public static List<INeedRenderTargetContent> ContentThatNeedsRenderTargets = new List<INeedRenderTargetContent>();
@@ -2215,6 +_,8 @@
 
 		public static Effect screenShader => ScreenShaderRef.Value;
 
+		public static ulong TileFrameSeed => _tileFrameSeed;
+
 		public static Effect pixelShader => PixelShaderRef.Value;
 
 		public static Effect vertexPixelShader => VertexPixelShaderRef.Value;
@@ -2723,6 +_,7 @@
 			}
 
 			result.X = num;
+			ItemLoader.HoldoutOffset(gravdir, itemtype, ref result);
 			return result;
 		}
 
@@ -2739,6 +_,8 @@
 				itemAnimationsRegistered.Add(index);
 
 			itemAnimations[index] = animation;
+			if (ItemLoader.IsModItem(index))
+				ItemLoader.animations.Add(index);
 		}
 
 		public static void InitializeItemAnimations() {
@@ -2780,11 +_,13 @@
 			}
 		}
 
-		public static void SetGraphicsProfile(GraphicsProfile profile) {
+		private static bool SetGraphicsProfile(GraphicsProfile profile) {
 			if (_currentGraphicsProfile != profile) {
 				_selectedGraphicsProfile = profile;
 				SetGraphicsProfileInternal();
+				return graphics.GraphicsDevice.GraphicsProfile == profile;
 			}
+			return false;
 		}
 
 		private static void SetGraphicsProfileInternal() {
@@ -2792,10 +_,14 @@
 			graphics.GraphicsProfile = _selectedGraphicsProfile;
 			switch (_selectedGraphicsProfile) {
 				case GraphicsProfile.HiDef:
+					// update resolution related variables alongside TrySupporting8K
+					Configuration.Get("Support8K", ref Support8K);
+					int hiRes = Support8K ? 8192 : 4096;
-					maxScreenW = 4096;
+					maxScreenW = hiRes;
-					maxScreenH = 4096;
+					maxScreenH = hiRes;
-					_renderTargetMaxSize = 4096;
+					_renderTargetMaxSize = hiRes;
+					if (Support8K)
-					TrySupporting8K();
+						TrySupporting8K();
 					break;
 				case GraphicsProfile.Reach:
 					maxScreenW = 1920;
@@ -2813,8 +_,8 @@
 					SetGraphicsProfileInternal();
 				}
 			}
-
-			instance.EnsureRenderTargetContent();
+			// Seems unnecessary as graphics profile is only changed very early on, before the first frame is rendered
+			// Main.instance.EnsureRenderTargetContent();
 		}
 
 		private static void TrySupporting8K() {
@@ -2843,6 +_,7 @@
 				flag2 = false;
 				anglerQuest = rand.Next(anglerQuestItemNetIDs.Length);
 				int num = anglerQuestItemNetIDs[anglerQuest];
+				//patch file: num, flag2
 				if (num == 2454 && (!hardMode || WorldGen.crimson))
 					flag2 = true;
 
@@ -2884,6 +_,8 @@
 
 				if ((num == 2476 || num == 2453 || num == 2473) && !flag)
 					flag2 = true;
+
+				ItemLoader.IsAnglerQuestAvailable(num, ref flag2);
 			}
 
 			NetMessage.SendAnglerQuest(-1);
@@ -3011,7 +_,8 @@
 		public static void SaveRecent() {
 			Utils.TryCreatingDirectory(SavePath);
 			try {
+				if (File.Exists(SavePath + Path.DirectorySeparatorChar + "servers.dat"))
-				File.SetAttributes(SavePath + Path.DirectorySeparatorChar + "servers.dat", FileAttributes.Normal);
+					File.SetAttributes(SavePath + Path.DirectorySeparatorChar + "servers.dat", FileAttributes.Normal);
 			}
 			catch {
 			}
@@ -3085,6 +_,7 @@
 			Configuration.Put("UseHeatDistortion", UseHeatDistortion);
 			Configuration.Put("WaveQuality", WaveQuality);
 			Configuration.Put("Support4K", Support4K);
+			Configuration.Put("Support8K", Support8K);
 			Configuration.Put("MouseColor", new Dictionary<string, byte> {
 				{ "R", mouseColor.R },
 				{ "G", mouseColor.G },
@@ -3109,7 +_,8 @@
 			Configuration.Put("ThrottleWhenInactive", instance.InactiveSleepTime != TimeSpan.Zero);
 			Configuration.Put("DoorAutoOpeningMode", DoorOpeningHelper.PreferenceSettings);
 			Configuration.Put("WaterfallDrawLimit", instance.waterfallManager.maxWaterfallCount);
 			Configuration.Put("DisableIntenseVisualEffects", DisableIntenseVisualEffects);
+			ModLoader.ModLoader.SaveConfiguration();
 			if (Configuration.Save())
 				return PlayerInput.Save();
 
@@ -3175,5 +_,9 @@
 			}
 
+#if SERVER
+			ModLoader.ModLoader.LoadConfiguration();
+			return;
+#endif
 			Configuration.Get("SmartCursorToggle", ref cSmartCursorModeIsToggleAndNotHold);
 			Configuration.Get("MapEnabled", ref mapEnabled);
 			Configuration.Get("InvasionBarMode", ref invasionProgressMode);
@@ -3470,6 +_,7 @@
 				};
 			}
 
+			ModLoader.ModLoader.LoadConfiguration();
 			PlayerInput.Load();
 			if (currentValue < 165) {
 				try {
@@ -3482,7 +_,7 @@
 			mouseColorSlider.SetHSL(mouseColor);
 			mouseBorderColorSlider.SetHSL(MouseBorderColor);
 			mouseBorderColorSlider.Alpha = (float)(int)MouseBorderColor.A / 255f;
-			if (currentValue != 230)
+			if (currentValue != 230 || ModLoader.ModLoader.LastLaunchedTModLoaderVersion != ModLoader.ModLoader.version)
 				SaveSettings();
 		}
 
@@ -3608,8 +_,10 @@
 				FileUtilities.Delete(PlayerList[i].Path, PlayerList[i].IsCloudSave);
 				FileUtilities.Delete(PlayerList[i].Path + ".bak", PlayerList[i].IsCloudSave);
 			}
+			//patch context
 			catch {
 			}
 
+			PlayerIO.ErasePlayer(PlayerList[i].Path, PlayerList[i].IsCloudSave);
 			try {
 				string text = PlayerList[i].Path.Substring(0, PlayerList[i].Path.Length - 4);
@@ -3637,6 +_,7 @@
 					SocialAPI.Cloud.Delete(WorldList[i].Path);
 				}
 
+				WorldIO.EraseWorld(WorldList[i].Path, WorldList[i].IsCloudSave);
 				LoadWorlds();
 			}
 			catch {
@@ -3823,6 +_,12 @@
 						if (text.Length >= 10 && text.Substring(0, 10).ToLower() == "worldname=")
 							worldName = text.Substring(10);
 
+						if (text.Length >= 8 && text.Substring(0, 8).ToLower() == "modpath=")
+							ModOrganizer.modPath = text.Substring(8);
+
+						if (text.Length >= 8 && text.Substring(0, 8).ToLower() == "modpack=")
+							ModOrganizer.commandLineModPack = text.Substring(8);
+
 						if (text.Length >= 5 && text.Substring(0, 5).ToLower() == "seed=")
 							AutogenSeedName = text.Substring(5);
 
@@ -3950,6 +_,10 @@
 		}
 
 		public void YouCanSleepNow() {
+#if CLIENT
+			if (waveBank == null) //supress extra exceptions from audio engine failing to load
+				return;
+#endif
 #if WINDOWS
 			if (previousExecutionState != 0)
 				NativeMethods.SetThreadExecutionState(previousExecutionState);
@@ -3958,8 +_,8 @@
 
 		public void DedServ() {
 			NeverSleep();
 			rand = new UnifiedRandom();
-			if (autoShutdown) {
+			if (autoShutdown && !showServerConsole) {
 				string lpWindowName = Console.Title = "terraria" + rand.Next(int.MaxValue);
 #if WINDOWS
 				IntPtr intPtr = FindWindow(null, lpWindowName);
@@ -3968,17 +_,18 @@
 #endif
 			}
 			else {
-				Console.Title = "Terraria Server " + versionNumber2;
+				Console.Title = "Terraria Server " + versionNumber2 + " - " + ModLoader.ModLoader.versionedName;
 			}
 
 			dedServ = true;
 			showSplash = false;
 			Initialize();
+			ModLoader.ModLoader.Reload();
 			while (worldPathName == null || worldPathName == "") {
 				bool flag = true;
 				while (flag) {
 					LoadWorlds();
-					Console.WriteLine(Language.GetTextValue("CLI.Server", versionNumber2));
+					Console.WriteLine(Language.GetTextValue("CLI.Server", versionNumber2) + " - " + ModLoader.ModLoader.versionedName);
 					Console.WriteLine("");
 					for (int i = 0; i < WorldList.Count; i++) {
 						Console.WriteLine(i + 1 + "\t\t" + WorldList[i].Name);
@@ -3991,6 +_,8 @@
 					textValue2 = textValue2 + new string('\t', num - textValue2.Length / 8) + Language.GetTextValue("CLI.DeleteWorld_Description");
 					Console.WriteLine(textValue);
 					Console.WriteLine(textValue2);
+					Console.WriteLine("m\t\tMods Menu");
+					Console.WriteLine("b\t\tMod Browser");
 					Console.WriteLine("");
 					Console.Write(Language.GetTextValue("CLI.ChooseWorld"));
 					string text2 = Console.ReadLine();
@@ -4217,6 +_,14 @@
 
 						continue;
 					}
+					else if (text2 == "m" || text2 == "M") {
+						Interface.ServerModMenu();
+						continue;
+					}
+					else if (text2 == "b" || text2 == "b") {
+						Interface.ServerModBrowserMenu();
+						continue;
+					}
 
 					try {
 						int num3 = Convert.ToInt32(text2);
@@ -4327,6 +_,7 @@
 			catch {
 			}
 
+			myPlayer = 255;
 			Task task2 = WorldGen.serverLoadWorld();
 			Console.WriteLine(Language.GetTextValue("CLI.Server", versionNumber));
 			Console.WriteLine("");
@@ -4349,39 +_,38 @@
 			catch {
 			}
 
+			//run one tick to JIT all the game content now rather than when a player connects
+			Logging.ServerConsoleLine("Running one update...");
+			Logging.tML.Info($"Server starting with AllowVanillaClients set to {ModNet.AllowVanillaClients}");
+			Update(new GameTime());
 			if (WorldGen.loadFailed || !WorldGen.loadSuccess) {
 				WriteFancyWorldLoadErrorToConsole();
 				if (!autoShutdown)
 					Console.ReadKey();
 
+				Logging.ResetPastExceptions(); // "Running one update..." above.
 				YouCanSleepNow();
 				return;
 			}
 
 			Console.WriteLine(Language.GetTextValue("CLI.Server", versionNumber));
 			Console.WriteLine("");
-			Console.WriteLine(Language.GetTextValue("CLI.ListeningOnPort", Netplay.ListenPort));
+			Logging.ServerConsoleLine(Language.GetTextValue("CLI.ListeningOnPort", Netplay.ListenPort));
 			Console.WriteLine(Language.GetTextValue("CLI.HelpHint"));
 			Console.WriteLine("");
 			Console.Title = "Terraria Server: " + worldName;
 			Stopwatch stopwatch = new Stopwatch();
-			if (!autoShutdown)
+			if (!autoShutdown || showServerConsole)
 				startDedInput();
 
 			stopwatch.Start();
-			double num6 = 16.666666666666668;
-			double num7 = 0.0;
-			int num8 = 0;
-			new Stopwatch().Start();
 			Netplay.StartServer();
 			gameMenu = false;
+			double delta = 1000 / 60D;
+			double target = delta;
 			while (!Netplay.Disconnect) {
-				double totalMilliseconds = stopwatch.Elapsed.TotalMilliseconds;
-				if (totalMilliseconds + num7 >= num6) {
-					num8++;
-					num7 += totalMilliseconds - num6;
-					stopwatch.Reset();
-					stopwatch.Start();
+				ServerHangWatchdog.Checkin();
+				{
 					if (oldStatusText != statusText) {
 						oldStatusText = statusText;
 						Console.WriteLine(statusText);
@@ -4389,25 +_,21 @@
 
 					if (Netplay.HasClients)
 						Update(new GameTime());
 					else if (saveTime.IsRunning)
 						saveTime.Stop();
+					else
+						Netplay.OnUpdate();
 
 					if (Main.OnTickForThirdPartySoftwareOnly != null)
 						Main.OnTickForThirdPartySoftwareOnly();
 
-					double num9 = stopwatch.Elapsed.TotalMilliseconds + num7;
-					if (num9 < num6) {
-						int num10 = (int)(num6 - num9) - 1;
-						if (num10 > 1) {
-							Thread.Sleep(num10 - 1);
-							if (!Netplay.HasClients) {
-								num7 = 0.0;
-								Thread.Sleep(10);
-							}
-						}
-					}
-				}
+					double now = stopwatch.ElapsedMilliseconds;
+					double remaining = target - now;
+					target += delta; //new target
+					if (target < now) //can't catch up, reset target
+						target = now + delta;
 
-				Thread.Sleep(0);
+					Thread.Sleep(Math.Max((int)remaining, 0));
+				}
 			}
 
@@ -4428,8 +_,14 @@
 
 		public static void startDedInputCallBack() {
 			while (!Netplay.Disconnect) {
-				Console.Write(": ");
 				string text = Console.ReadLine();
+				ExecuteCommand(text, new ConsoleCommandCaller());
+			}
+		}
+
+		public static void ExecuteCommand(string text, CommandCaller commandCaller) {
+			do { // use a do {...} while (false); loop so we don't have to change all the continue; statements to return; when moving the loop body into a separate function
+				Console.Write(": ");
 				string text2 = text;
 				text = text.ToLower();
 				try {
@@ -4469,12 +_,21 @@
 								num = text3.Length;
 						}
 
+						var modHelpList = CommandManager.GetHelp(CommandType.Console);
+						foreach (var entry in modHelpList)
+							if (entry.Item1.Length > num)
+								num = entry.Item1.Length;
+
 						int num2 = (num + 1) / 8;
 						for (int j = 0; j < list.Count; j++) {
 							string text4 = Language.Exists("CLI." + list[j] + "_Example") ? Language.GetTextValue("CLI." + list[j] + "_Example") : Language.GetTextValue("CLI." + list[j] + "_Command");
 							Console.WriteLine(text4 + new string('\t', num2 - text4.Length / 8) + Language.GetTextValue("CLI." + list[j] + "_Description"));
 						}
+
+						foreach (var entry in modHelpList)
+							Console.WriteLine(entry.Item1 + new string('\t', num2 - entry.Item1.Length / 8) + entry.Item2);
 					}
+					else if (CommandManager.HandleCommand(text, commandCaller)) { }
 					else if (text == Language.GetTextValue("CLI.Settle_Command")) {
 						if (!Liquid.panicMode)
 							Liquid.StartPanic();
@@ -4559,11 +_,12 @@
 						Console.WriteLine(Language.GetTextValue("CLI.Port", Netplay.ListenPort));
 					}
 					else if (text == Language.GetTextValue("CLI.Version_Command")) {
-						Console.WriteLine(Language.GetTextValue("CLI.Server", versionNumber));
+						Console.WriteLine(Language.GetTextValue("CLI.Server", versionNumber) + " - " + ModLoader.ModLoader.versionedName);
 					}
 					else if (text == Language.GetTextValue("CLI.Clear_Command")) {
 						try {
 							Console.Clear();
+							Logging.ResetPastExceptions(); // "CLI.Clear_Command" above.
 						}
 						catch {
 						}
@@ -4685,7 +_,7 @@
 				catch {
 					Console.WriteLine(Language.GetTextValue("CLI.InvalidCommand"));
 				}
-			}
+			} while (false);
 		}
 
 		public static void Sundialing() {
@@ -4726,9 +_,37 @@
 			instance = this;
 			UnpausedUpdateSeed = (ulong)Guid.NewGuid().GetHashCode();
 #if CLIENT
 			Configuration.Load();
 			graphics = new GraphicsDeviceManager(this as Game);
-			base.Content.RootDirectory = "Content";
 #endif
+#endif //Is this needed?
+		}
+
+		internal void PostSocialInitialize()
+		{
+#if CLIENT
+			string vanillaContentFolder = "../Terraria/Content"; // Side-by-Side Manual Install
+			if (!Directory.Exists(vanillaContentFolder)) {
+				vanillaContentFolder = "../Content"; // Nested Manual Install
+			}
+			if (SocialAPI.Mode == SocialMode.Steam && Steamworks.SteamAPI.Init()) {
+				var appID = new Steamworks.AppId_t(105600u);
+				bool appInstalled = Steamworks.SteamApps.BIsAppInstalled(appID);
+				if (appInstalled) { 
+					Steamworks.SteamApps.GetAppInstallDir(appID, out var steamInstallFolder, 1000);
+					Logging.Terraria.Info("Found Terraria steamapp install at: "+ steamInstallFolder);
+
+					vanillaContentFolder = Path.Combine(steamInstallFolder, "Content");
+					if (!Directory.Exists(vanillaContentFolder))
+						vanillaContentFolder = Path.Combine(steamInstallFolder, "Terraria.app/Contents/MacOS/Content");
+				}
+			}
+			if (!Directory.Exists(vanillaContentFolder)) {
+				Interface.MessageBoxShow("Terraria Content folder not found. If you installed tModLoader through Steam, make sure that Terraria is installed. If not, make sure to install tModLoader in a folder nested within the Terraria install directory or a folder next to the Terraria install directory.");
+				Environment.Exit(1);
+			}
+
+			AlternateContentManager = new TMLContentManager(Content.ServiceProvider, "Content", null);
+			base.Content = new TMLContentManager(Content.ServiceProvider, vanillaContentFolder, AlternateContentManager);
 		}
 
@@ -4793,6 +_,13 @@
 		}
 
 		protected override void Initialize() {
+			DateTime date = DateTime.Now;
+			if (date.Month == 5 && date.Day == 17 || date.Month == 7 && date.Day == 8 || date.Month == 10 && date.Day == 24
+				|| date.Month == 6 && date.Day == 1 || date.Month == 4 || date.Day == 1 || new Random().Next(100) == 0) {
+				OurFavoriteColor.R = OurFavoriteColor.B;
+				OurFavoriteColor.B = 255;
+			}
+
 #if SERVER
 			netMode = 2;
 #endif
@@ -4994,7 +_,7 @@
 			}
 
 			for (int m = 0; m < 256; m++) {
-				player[m] = new Player();
+				player[m] = new Player(false); // setup inventory is unnecessary
 			}
 
 			for (int n = 0; n < 1001; n++) {
@@ -8337,6 +_,9 @@
 			numClouds = rand.Next(200);
 			Mount.Initialize();
 			Minecart.Initialize();
++			// move instance creation from class constructor to main thread to avoid deadlocks from content loading on JIT thread with FNA
++			CaptureManager.Instance = new CaptureManager();
++			LiquidRenderer.Instance = new LiquidRenderer();
 			CacheSupportedDisplaySizes();
 			ContentSamples.RebuildItemCreativeSortingIDsAfterRecipesAreSetUp();
 			ContentSamples.CommonlyUsedContentSamples.PrepareAfterEverythingElseLoaded();
@@ -8344,19 +_,19 @@
 
 		private void LoadMusic() {
 			if (SoundEngine.IsAudioSupported) {
-				engine = new AudioEngine("Content\\TerrariaMusic.xgs");
-				soundBank = new SoundBank(engine, "Content\\Sound Bank.xsb");
-				waveBank = new WaveBank(engine, "Content\\Wave Bank.xwb");
+				engine = new AudioEngine(Path.Combine(Main.instance.Content.RootDirectory, "TerrariaMusic.xgs"));
+				soundBank = new SoundBank(engine, Path.Combine(Main.instance.Content.RootDirectory, "Sound Bank.xsb"));
+				waveBank = new WaveBank(engine, Path.Combine(Main.instance.Content.RootDirectory, "Wave Bank.xwb"));
 				for (int i = 1; i < 89; i++) {
 					music[i] = soundBank.GetCue("Music_" + i);
 				}
 			}
 		}
 
 		private IEnumerator LoadMusic_InSteps() {
-			engine = new AudioEngine("Content\\TerrariaMusic.xgs");
-			soundBank = new SoundBank(engine, "Content\\Sound Bank.xsb");
-			waveBank = new WaveBank(engine, "Content\\Wave Bank.xwb");
+			engine = new AudioEngine(Path.Combine(Main.instance.Content.RootDirectory, "TerrariaMusic.xgs"));
+			soundBank = new SoundBank(engine, Path.Combine(Main.instance.Content.RootDirectory, "Sound Bank.xsb"));
+			waveBank = new WaveBank(engine, Path.Combine(Main.instance.Content.RootDirectory, "Wave Bank.xwb"));
 			yield return null;
 			for (int i = 1; i < 89; i++) {
 				music[i] = soundBank.GetCue("Music_" + i);
@@ -8772,6 +_,8 @@
 
 					if (SceneMetrics.ActiveMusicBox == 84)
 						newMusic = 88;
+					if (SceneMetrics.ActiveMusicBox >= maxMusic)
+						newMusic = SceneMetrics.ActiveMusicBox;
 				}
 
 				if (curMusic != newMusic)
@@ -8793,8 +_,10 @@
 						curMusic = 0;
 					}
 
-					if (NPC.MoonLordCountdown == 1 && curMusic >= 1 && curMusic < 89)
+					if (NPC.MoonLordCountdown == 1 && curMusic >= 1 && curMusic < music.Length)
 						musicFade[curMusic] = 0f;
 				}
 
-				for (int k = 1; k < 89; k++) {
+				for (int k = 1; k < music.Length; k++) {
+					if (music[k] == null)
+						continue; // Race condition, Music is resized during load.
@@ -8828,7 +_,7 @@
 									}
 
 									if (!music[k].IsPlaying) {
-										music[k] = soundBank.GetCue("Music_" + k);
+										music[k].Reset();
 										music[k].Play();
 										music[k].SetVariable("Volume", musicFade[k] * ambientVolume * num7);
 										continue;
@@ -8881,7 +_,7 @@
 									}
 
 									if (!music[k].IsPlaying) {
-										music[k] = soundBank.GetCue("Music_" + k);
+										music[k].Reset();
 										music[k].Play();
 										music[k].SetVariable("Volume", musicFade[k] * ambientVolume * num4);
 										continue;
@@ -8936,9 +_,11 @@
 								musicFade[k] = 1f;
 
 							music[k].SetVariable("Volume", num2);
 						}
+						music[k].CheckBuffer();
 					}
 					else if (music[k].IsPlaying || !music[k].IsStopped) {
+						music[k].CheckBuffer();
 						if (musicFade[curMusic] > 0.25f)
 							musicFade[k] -= 0.005f;
 						else if (curMusic == 0)
@@ -9090,17 +_,21 @@
 							break;
 					}
 
-					if (NPCID.Sets.BelongsToInvasionOldOnesArmy[npc[i].type])
+					if (npc[i].type < NPCID.Sets.BelongsToInvasionOldOnesArmy.Length && NPCID.Sets.BelongsToInvasionOldOnesArmy[npc[i].type])
 						num2 = 12;
 
 					if (num2 == 0 && npc[i].boss)
 						num2 = 1;
 
-					if (num2 == 0)
+					if (num2 == 0 && (npc[i].modNPC == null || npc[i].modNPC.music < 0))
 						continue;
 
 					Microsoft.Xna.Framework.Rectangle value = new Microsoft.Xna.Framework.Rectangle((int)(npc[i].position.X + (float)(npc[i].width / 2)) - num, (int)(npc[i].position.Y + (float)(npc[i].height / 2)) - num, num * 2, num * 2);
 					if (rectangle.Intersects(value)) {
+						if (npc[i].modNPC != null && npc[i].modNPC.music >= 0 && (modMusic < 0 || npc[i].modNPC.musicPriority > modPriority)) {
+							modMusic = npc[i].modNPC.music;
+							modPriority = npc[i].modNPC.musicPriority;
+						}
 						switch (num2) {
 							case 1:
 								flag = true;
@@ -12304,6 +_,17 @@
 					Main.OnEnginePreload();
 			}
 
+			try {
+				Update_Inner(gameTime);
+				
+				base.Update(gameTime); //Vanilla bug, moved from DoUpdate. Early returns fail to call base.Update, and prevent streaming audio from playing
+			}
+			catch (Exception e) {
+				Logging.Terraria.Error(e);
+			}
+		}
+		
+		private void Update_Inner(GameTime gameTime) {
 			if (!_isDrawingOrUpdating) {
 				_isDrawingOrUpdating = true;
 				DoUpdate(gameTime);
@@ -12399,6 +_,7 @@
 				_hasPendingNetmodeChange = false;
 			}
 
+			Netplay.OnUpdate(); // TODO, why do we add this?
 			if (CaptureManager.Instance.IsCapturing)
 				return;
 
@@ -12607,6 +_,9 @@
 
 					mouseLeftRelease = false;
 					mouseRightRelease = false;
+					mouseMiddleRelease = false;
+					mouseXButton1Release = false;
+					mouseXButton2Release = false;
 					if (gameMenu)
 						UpdateMenu();
 
@@ -12708,6 +_,7 @@
 				Sandstorm.EmitDust();
 			}
 
+			ModHooks.PreUpdateEntities();
 			if (!dedServ && (double)screenPosition.Y < worldSurface * 16.0 + 16.0 && netMode != 2) {
 				Star.UpdateStars();
 				Cloud.UpdateClouds();
@@ -12831,5 +_,7 @@
 			if (InGameUI != null)
 				InGameUI.Update(gameTime);
 
+			ModHooks.UpdateUI(gameTime);
+			PlayerInput.ScrollWheelDeltaForUI = 0; //TODO: Should this be before PlayerInput.ResetInputsOnActiveStateChange()?
 			CreativeMenu.Update(gameTime);
 			BigBossProgressBar.Update();
@@ -12950,6 +_,9 @@
 			if ((byte)Main.player[myPlayer].zone4 != (byte)player.zone4)
 				flag2 = true;
 
+			if (!PlayerHooks.CustomBiomesMatch(Main.player[myPlayer], player))
+				flag2 = true;
+
 			if (flag2)
 				NetMessage.SendData(36, -1, -1, null, myPlayer);
 
@@ -12978,6 +_,6 @@
 			}
 
 			bool flag3 = false;
-			for (int num4 = 0; num4 < 22; num4++) {
+			for (int num4 = 0; num4 < Player.MaxBuffs; num4++) {
 				if (Main.player[myPlayer].buffType[num4] != player.buffType[num4])
 					flag3 = true;
@@ -13047,6 +_,7 @@
 			}
 
 			_gameUpdateCount++;
+			ModHooks.MidUpdatePlayerNPC();
 			NPC.RevengeManager.Update();
 			if (netMode != 1) {
 				try {
@@ -13094,7 +_,8 @@
 				}
 			}
 
 			CurrentFrameFlags.AnyActiveBossNPC = anyActiveBossNPC;
+			ModHooks.MidUpdateNPCGore();
 			for (int l = 0; l < 600; l++) {
 				if (ignoreErrors) {
 					try {
@@ -13109,8 +_,9 @@
 				}
 			}
 
+			ModHooks.MidUpdateGoreProjectile();
 			LockOnHelper.SetUP();
 			CurrentFrameFlags.HadAnActiveInteractibleProjectile = false;
 			PreUpdateAllProjectiles();
 			for (int m = 0; m < 1000; m++) {
 				ProjectileUpdateLoopIndex = m;
@@ -13160,11 +_,13 @@
 				Dust.UpdateDust();
 			}
 
+			ModHooks.MidUpdateDustTime();
 			if (netMode != 2) {
 				CombatText.UpdateCombatText();
 				PopupText.UpdateItemText();
 			}
 
+			ModHooks.MidUpdateItemDust();
 			if (ignoreErrors) {
 				try {
 					UpdateTime();
@@ -13177,9 +_,10 @@
 				UpdateTime();
 			}
 
+			ModHooks.MidUpdateTimeWorld();
 			tileSolid[379] = true;
 			if (gameMenu && netMode != 2)
 				return;
 
 			if (netMode != 1) {
 				if (ignoreErrors) {
@@ -13217,6 +_,7 @@
 					UpdateClient();
 			}
 
+			ModHooks.PostUpdateEverything();
 			chatMonitor.Update();
 			upTimer = (float)sw.Elapsed.TotalMilliseconds;
 			if (upTimerMaxDelay > 0f)
@@ -13397,7 +_,8 @@
 			if (!inputTextEnter || !chatRelease)
 				return;
 
-			if (chatText != "") {
+			var handled = chatText.Length > 0 && chatText[0] == '/' && CommandManager.HandleCommand(chatText, new ChatCommandCaller());
+			if (chatText != "" && !handled) {
 				ChatMessage message = ChatManager.Commands.CreateOutgoingMessage(chatText);
 				if (netMode == 1)
 					ChatHelper.SendChatMessageFromClient(message);
@@ -13413,6 +_,7 @@
 
 		private void DoUpdate_HandleInput() {
 			PlayerInput.UpdateInput();
+			ModHooks.PostUpdateInput();
 			UpdateViewZoomKeys();
 			PlayerInput.SetZoom_Unscaled();
 			UILinkPointNavigator.Update();
@@ -14062,5 +_,6 @@
 				tileFrameCounter[493] += 120;
 
+			TileLoader.AnimateTiles();
 			AnimateTiles_CritterCages();
 		}
 
@@ -14245,6 +_,8 @@
 			wallFrame[144] = 0;
 			if (wallFrameCounter[144] > num3 * (16 + num4 * 2))
 				wallFrameCounter[144] = 0;
+
+			WallLoader.AnimateWalls();
 		}
 
 		private void DoUpdate_AnimateWaterfalls() {
@@ -14734,15 +_,15 @@
 				X += 34;
 
 			new Microsoft.Xna.Framework.Color(mouseTextColor, mouseTextColor, mouseTextColor, mouseTextColor);
+			Vector2 vector = fontMouseText.MeasureString(cursorText);
 			if (HoverItem.type > 0) {
 				MouseText_DrawItemTooltip(info, num, diff, X, Y);
 				return;
 			}
 
 			if (info.buffTooltip != null && info.buffTooltip != "")
-				MouseText_DrawBuffTooltip(info.buffTooltip, ref X, ref Y);
+				MouseText_DrawBuffString(info.buffTooltip, ref X, ref Y, (int)vector.Y);
 
-			Vector2 vector = FontAssets.MouseText.Value.MeasureString(cursorText);
 			if (hackedScreenHeight != -1 && hackedScreenWidth != -1) {
 				if ((float)X + vector.X + 4f > (float)hackedScreenWidth)
 					X = (int)((float)hackedScreenWidth - vector.X - 4f);
@@ -15178,6 +_,8 @@
 					if (player[myPlayer].inventory[player[myPlayer].selectedItem].type == 3106 && item.type == 3106)
 						num6 += num6 * (1f - player[myPlayer].stealth);
 
+					ItemLoader.GetWeaponKnockback(HoverItem, player[myPlayer], ref num6);
+					PlayerHooks.GetWeaponKnockback(player[myPlayer], HoverItem, ref num6);
 					if (num6 == 0f)
 						toolTipLine[numLines] = Lang.tip[14].Value;
 					else if ((double)num6 <= 1.5)
@@ -15310,10 +_,12 @@
 					for (int i = 0; i < item.ToolTip.Lines; i++) {
 						if (i == 0 && ItemID.Sets.UsesCursedByPlanteraTooltip[item.type] && !NPC.downedPlantBoss) {
 							toolTipLine[numLines] = Lang.tip[59].Value;
+							tooltipNames[currentLine] = "Tooltip" + j;
 							numLines++;
 						}
 						else {
 							toolTipLine[numLines] = item.ToolTip.GetLine(i);
+							tooltipNames[currentLine] = "Tooltip" + j;
 							numLines++;
 						}
 					}
@@ -15321,23 +_,27 @@
 
 				if ((item.type == 3818 || item.type == 3819 || item.type == 3820 || item.type == 3824 || item.type == 3825 || item.type == 3826 || item.type == 3829 || item.type == 3830 || item.type == 3831 || item.type == 3832 || item.type == 3833 || item.type == 3834) && !player[myPlayer].downedDD2EventAnyDifficulty) {
 					toolTipLine[numLines] = Lang.misc[104].Value;
+					tooltipNames[currentLine] = "EtherianManaWarning";
 					numLines++;
 				}
 
 				if (item.buffType > 0 && BuffID.Sets.IsWellFed[item.buffType] && expertMode) {
 					toolTipLine[numLines] = Lang.misc[40].Value;
+					tooltipNames[currentLine] = "WellFedExpert";
 					numLines++;
 				}
 
 				if (item.buffTime > 0) {
 					string text = (item.buffTime / 60 < 60) ? Language.GetTextValue("CommonItemTooltip.SecondDuration", Math.Round((double)item.buffTime / 60.0)) : Language.GetTextValue("CommonItemTooltip.MinuteDuration", Math.Round((double)(item.buffTime / 60) / 60.0));
 					toolTipLine[numLines] = text;
+					tooltipNames[currentLine] = "BuffTime";
 					numLines++;
 				}
 
 				if (item.type == 3262 || item.type == 3282 || item.type == 3283 || item.type == 3284 || item.type == 3285 || item.type == 3286 || item.type == 3316 || item.type == 3315 || item.type == 3317 || item.type == 3291 || item.type == 3389) {
 					toolTipLine[numLines] = " ";
 					yoyoLogo = numLines;
+					tooltipNames[currentLine] = "OneDropLogo";
 					numLines++;
 				}
 
@@ -15623,7 +_,7 @@
 
 			if (bannerMouseOver) {
 				int num6 = 0;
-				for (int i = 0; i < 289; i++) {
+				for (int i = 0; i < NPCLoader.NPCCount; i++) {
 					if (Item.BannerToNPC(i) != 0 && player[myPlayer].HasNPCBannerBuff(i)) {
 						num6++;
 						string nPCNameValue = Lang.GetNPCNameValue(Item.BannerToNPC(i));
@@ -15648,6 +_,7 @@
 				}
 			}
 
+			BuffLoader.CustomBuffTipSize(buffString, list);
 			Vector2 zero = Vector2.Zero;
 			foreach (Vector2 item2 in list) {
 				if (zero.X < item2.X)
@@ -15665,7 +_,7 @@
 
 			for (int k = 0; k < 5; k++) {
 				int num11 = X;
-				int num12 = Y + (int)FontAssets.MouseText.Value.MeasureString(buffString).Y;
+				int num12 = Y + buffNameHeight;
 				Microsoft.Xna.Framework.Color color = Microsoft.Xna.Framework.Color.Black;
 				switch (k) {
 					case 0:
@@ -15734,9 +_,12 @@
 					spriteBatch.DrawString(FontAssets.MouseText.Value, text, new Vector2(num14, num15), color2, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 				}
 
+				// TODO: BuffLoader.DrawCustomBuffTip here? This is new to fix too many banner buffs I think.
 				if (flag)
 					break;
 			}
+
+			BuffLoader.DrawCustomBuffTip(buffString, spriteBatch, X, Y + (int)fontMouseText.MeasureString(buffString).Y);
 		}
 
 		protected void DrawFPS() {
@@ -15971,7 +_,7 @@
 					continue;
 
 				bool flag = false;
-				if (((gore[i].type >= 706 && gore[i].type <= 717) || gore[i].type == 943 || gore[i].type == 1147 || (gore[i].type >= 1160 && gore[i].type <= 1162)) && (gore[i].frame < 7 || gore[i].frame > 9))
+				if (ModGore.DrawBackGore(gore[i]))
 					flag = true;
 
 				if (flag) {
@@ -15979,11 +_,11 @@
 					if (gore[i].Frame.ColumnCount > 1 || gore[i].Frame.RowCount > 1) {
 						Microsoft.Xna.Framework.Rectangle sourceRectangle = gore[i].Frame.GetSourceRectangle(TextureAssets.Gore[gore[i].type].Value);
 						Microsoft.Xna.Framework.Color alpha = gore[i].GetAlpha(Lighting.GetColor((int)((double)gore[i].position.X + (double)sourceRectangle.Width * 0.5) / 16, (int)(((double)gore[i].position.Y + (double)sourceRectangle.Height * 0.5) / 16.0)));
-						spriteBatch.Draw(TextureAssets.Gore[gore[i].type].Value, new Vector2(gore[i].position.X - screenPosition.X + (float)(sourceRectangle.Width / 2), gore[i].position.Y - screenPosition.Y + (float)(sourceRectangle.Height / 2) - 2f), sourceRectangle, alpha, gore[i].rotation, new Vector2(sourceRectangle.Width / 2, sourceRectangle.Height / 2), gore[i].scale, SpriteEffects.None, 0f);
+						spriteBatch.Draw(TextureAssets.Gore[gore[i].type].Value, new Vector2(gore[i].position.X + gore[i].drawOffset.X - screenPosition.X + (float)(sourceRectangle.Width / 2), gore[i].position.Y + gore[i].drawOffset.Y - screenPosition.Y + (float)(sourceRectangle.Height / 2) - 2f), sourceRectangle, alpha, gore[i].rotation, new Vector2(sourceRectangle.Width / 2, sourceRectangle.Height / 2), gore[i].scale, SpriteEffects.None, 0f);
 					}
 					else {
 						Microsoft.Xna.Framework.Color alpha2 = gore[i].GetAlpha(Lighting.GetColor((int)((double)gore[i].position.X + (double)TextureAssets.Gore[gore[i].type].Width() * 0.5) / 16, (int)(((double)gore[i].position.Y + (double)TextureAssets.Gore[gore[i].type].Height() * 0.5) / 16.0)));
-						spriteBatch.Draw(TextureAssets.Gore[gore[i].type].Value, new Vector2(gore[i].position.X - screenPosition.X + (float)(TextureAssets.Gore[gore[i].type].Width() / 2), gore[i].position.Y - screenPosition.Y + (float)(TextureAssets.Gore[gore[i].type].Height() / 2)), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Gore[gore[i].type].Width(), TextureAssets.Gore[gore[i].type].Height()), alpha2, gore[i].rotation, new Vector2(TextureAssets.Gore[gore[i].type].Width() / 2, TextureAssets.Gore[gore[i].type].Height() / 2), gore[i].scale, SpriteEffects.None, 0f);
+						spriteBatch.Draw(TextureAssets.Gore[gore[i].type].Value, new Vector2(gore[i].position.X + gore[i].drawOffset.X - screenPosition.X + (float)(TextureAssets.Gore[gore[i].type].Width() / 2), gore[i].position.Y + gore[i].drawOffset.Y - screenPosition.Y + (float)(TextureAssets.Gore[gore[i].type].Height() / 2)), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Gore[gore[i].type].Width(), TextureAssets.Gore[gore[i].type].Height()), alpha2, gore[i].rotation, new Vector2(TextureAssets.Gore[gore[i].type].Width() / 2, TextureAssets.Gore[gore[i].type].Height() / 2), gore[i].scale, SpriteEffects.None, 0f);
 					}
 				}
 			}
@@ -15995,7 +_,7 @@
 				if (!gore[i].active || gore[i].type <= 0)
 					continue;
 
-				if (((gore[i].type >= 706 && gore[i].type <= 717) || gore[i].type == 943 || gore[i].type == 1147 || (gore[i].type >= 1160 && gore[i].type <= 1162)) && (gore[i].frame < 7 || gore[i].frame > 9)) {
+				if (ModGore.DrawBackGore(gore[i])) {
 					drawBackGore = true;
 					continue;
 				}
@@ -16008,18 +_,18 @@
 						value.Y += 4f;
 
 					Microsoft.Xna.Framework.Color alpha = gore[i].GetAlpha(Lighting.GetColor((int)((double)gore[i].position.X + (double)sourceRectangle.Width * 0.5) / 16, (int)(((double)gore[i].position.Y + (double)sourceRectangle.Height * 0.5) / 16.0)));
-					spriteBatch.Draw(TextureAssets.Gore[gore[i].type].Value, new Vector2(gore[i].position.X - screenPosition.X + (float)(sourceRectangle.Width / 2), gore[i].position.Y - screenPosition.Y + (float)(sourceRectangle.Height / 2) - 2f) + value, sourceRectangle, alpha, gore[i].rotation, new Vector2(sourceRectangle.Width / 2, sourceRectangle.Height / 2), gore[i].scale, SpriteEffects.None, 0f);
+					spriteBatch.Draw(TextureAssets.Gore[gore[i].type].Value, new Vector2(gore[i].position.X + gore[i].drawOffset.X - screenPosition.X + (float)(sourceRectangle.Width / 2), gore[i].position.Y + gore[i].drawOffset.Y - screenPosition.Y + (float)(sourceRectangle.Height / 2) - 2f) + value, sourceRectangle, alpha, gore[i].rotation, new Vector2(sourceRectangle.Width / 2, sourceRectangle.Height / 2), gore[i].scale, SpriteEffects.None, 0f);
 				}
 				else {
 					Microsoft.Xna.Framework.Color alpha2 = gore[i].GetAlpha(Lighting.GetColor((int)((double)gore[i].position.X + (double)TextureAssets.Gore[gore[i].type].Width() * 0.5) / 16, (int)(((double)gore[i].position.Y + (double)TextureAssets.Gore[gore[i].type].Height() * 0.5) / 16.0)));
-					spriteBatch.Draw(TextureAssets.Gore[gore[i].type].Value, new Vector2(gore[i].position.X - screenPosition.X + (float)(TextureAssets.Gore[gore[i].type].Width() / 2), gore[i].position.Y - screenPosition.Y + (float)(TextureAssets.Gore[gore[i].type].Height() / 2)), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Gore[gore[i].type].Width(), TextureAssets.Gore[gore[i].type].Height()), alpha2, gore[i].rotation, new Vector2(TextureAssets.Gore[gore[i].type].Width() / 2, TextureAssets.Gore[gore[i].type].Height() / 2), gore[i].scale, SpriteEffects.None, 0f);
+					spriteBatch.Draw(TextureAssets.Gore[gore[i].type].Value, new Vector2(gore[i].position.X + gore[i].drawOffset.X - screenPosition.X + (float)(TextureAssets.Gore[gore[i].type].Width() / 2), gore[i].position.Y + gore[i].drawOffset.Y - screenPosition.Y + (float)(TextureAssets.Gore[gore[i].type].Height() / 2)), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Gore[gore[i].type].Width(), TextureAssets.Gore[gore[i].type].Height()), alpha2, gore[i].rotation, new Vector2(TextureAssets.Gore[gore[i].type].Width() / 2, TextureAssets.Gore[gore[i].type].Height() / 2), gore[i].scale, SpriteEffects.None, 0f);
 				}
 			}
 
 			TimeLogger.DetailedDrawTime(24);
 		}
 
-		public void DrawHealthBar(float X, float Y, int Health, int MaxHealth, float alpha, float scale = 1f, bool noFlip = false) {
+		public void DrawHealthBar(float X, float Y, int Health, int MaxHealth, float alpha, float scale = 1f) {
 			if (Health <= 0)
 				return;
 
@@ -16099,6 +_,8 @@
 			float num = 0f;
 			if (theNPC.type == 125)
 				num = 30f;
+			else if (theNPC.modNPC != null)
+				num = theNPC.modNPC.drawOffsetY;
 			else if (theNPC.type == 54)
 				num = 2f;
 			else if (theNPC.type == 205)
@@ -16296,6 +_,6 @@
 			Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle((int)screenPosition.X - 800, (int)screenPosition.Y - 800, screenWidth + 1600, screenHeight + 1600);
 			for (int num = 199; num >= 0; num--) {
 				try {
-					if (npc[num].active && npc[num].type > 0 && npc[num].type < 663 && !npc[num].hide) {
+					if (npc[num].active && npc[num].type > 0 && !npc[num].hide) {
 						npc[num].position += npc[num].netOffset;
 						if (npc[num].behindTiles == behindTiles) {
@@ -16409,11 +_,11 @@
 			}
 		}
 
-		protected void DrawNPCCheckAlt(NPC n) {
+		public void DrawNPCCheckAlt(NPC n) {
 			if (TownNPCProfiles.Instance.GetProfile(n.type, out ITownNPCProfile profile))
 				TextureAssets.Npc[n.type] = profile.GetTextureNPCShouldUse(n);
 		}
 
-		protected void DrawNPC(int iNPCIndex, bool behindTiles) {
+		public void DrawNPC(int iNPCIndex, bool behindTiles) {
 			NPC rCurrentNPC = npc[iNPCIndex];
 			Vector2 screenPos = screenPosition;
@@ -16810,6 +_,13 @@
 				}
 			}
 
+			NPCLoader.DrawEffects(rCurrentNPC, ref npcColor); //TODO: Effects were previously done before drawing, here, but 1.4 moved them to updates in UpdateNPC_BuffApplyVFX(). Should this hook be moved and renamed?
+			
+			if (!NPCLoader.PreDraw(npc[iNPCIndex], spriteBatch, npcColor)) {
+				NPCLoader.PostDraw(npc[iNPCIndex], spriteBatch, npcColor);
+				return;
+			}
+
 			npcColor = rCurrentNPC.GetNPCColorTintedByBuffs(npcColor);
 			if (type == 50) {
 				Vector2 zero = Vector2.Zero;
@@ -20128,12 +_,14 @@
 				}
 
 				instance.LoadItem(num8);
+				NPCLoader.DrawTownAttackGun(n, ref num7, ref num8, ref num9);
 				Texture2D value3 = TextureAssets.Item[num8].Value;
 				int num10 = (int)DrawPlayerItemPos(1f, num8).X - num9;
 				Vector2 origin2 = new Vector2(-num10, value3.Height / 2);
 				if (n.spriteDirection == -1)
 					origin2 = new Vector2(value3.Width + num10, value3.Height / 2);
 
+				//patch context
 				spriteBatch.Draw(value3, new Vector2((int)(vector2.X - screenPosition.X), (int)(vector2.Y - screenPosition.Y)), null, npcColor, rotation, origin2, n.scale * num7, npcSpriteEffect ^ SpriteEffects.FlipHorizontally, 0f);
 				if (n.type == 22 && n.frame.Y / (TextureAssets.Npc[n.type].Height() / npcFrameCount[n.type]) >= 21) {
 					Texture2D value4 = TextureAssets.Extra[52].Value;
@@ -20193,6 +_,7 @@
 						zero.Y = 12f;
 				}
 
+				NPCLoader.DrawTownAttackSwing(n, ref value9, ref num11, ref scaleFactor, ref zero);
 				Tuple<Vector2, float> swingStats = n.GetSwingStats(NPCID.Sets.AttackTime[n.type] * 2, (int)n.ai[1], n.spriteDirection, num11, num11);
 				Vector2 vector4 = swingStats.Item1 + (swingStats.Item1 - n.Center) * scaleFactor + zero;
 				Vector2 origin4 = value9.Size() * new Vector2((n.spriteDirection != 1) ? 1 : 0, 1f);
@@ -21587,6 +_,11 @@
 			if (projectile.type == 14)
 				color29 = Microsoft.Xna.Framework.Color.White;
 
+			if (!ProjectileLoader.PreDraw(projectile, spriteBatch, color29)) {
+				ProjectileLoader.PostDraw(projectile, spriteBatch, color29);
+				return;
+			}
+
 			int num135 = 0;
 			int num136 = 0;
 			if (projectile.type == 175)
@@ -21928,15 +_,17 @@
 				num136 = 3;
 			}
 
+			//patch details
 			if (projectile.type == 397) {
 				num137 -= 1f;
 				num135 = -2;
 				num136 = -2;
 			}
 
 			if (projectile.type == 398)
 				num135 = 8;
 
+			ProjectileLoader.DrawOffset(projectile, ref num136, ref num135, ref num137);
 			SpriteEffects spriteEffects = SpriteEffects.None;
 			if (projectile.spriteDirection == -1)
 				spriteEffects = SpriteEffects.FlipHorizontally;
@@ -24446,6 +_,8 @@
 				}
 			}
 
+			ProjectileLoader.PostDraw(projectile, spriteBatch, color25);
+
 			if (projectile.type != 525 || (gamePaused && !gameMenu))
 				return;
 
@@ -25129,15 +_,22 @@
 		}
 
 		protected void DrawPlayerHead(Player drawPlayer, float X, float Y, float Alpha = 1f, float Scale = 1f) {
+			//prepare for lots of ugly code
+			PlayerHeadDrawInfo drawInfo = new PlayerHeadDrawInfo();
+			drawInfo.spriteBatch = spriteBatch;
+			drawInfo.drawPlayer = drawPlayer;
+			drawInfo.alpha = Alpha;
+			drawInfo.scale = Scale;
 			int shaderId = 0;
 			int skinVariant = drawPlayer.skinVariant;
 			short num = drawPlayer.hairDye;
 			if (drawPlayer.head == 0 && num == 0)
 				num = 1;
 
+			drawInfo.hairShader = num;
 			for (int i = 0; i < 16 + drawPlayer.extraAccessorySlots * 2; i++) {
 				int num2 = i % 10;
-				if (drawPlayer.dye[num2] != null && drawPlayer.armor[i].type > 0 && drawPlayer.armor[i].stack > 0 && drawPlayer.armor[i].faceSlot > 0 && drawPlayer.armor[i].faceSlot < 9)
+				if (drawPlayer.dye[num2] != null && drawPlayer.armor[i].type > 0 && drawPlayer.armor[i].stack > 0 && drawPlayer.armor[i].faceSlot > 0)
 					_ = drawPlayer.dye[num2].dye;
 			}
 
@@ -25130,8 +_,8 @@
 					}
 				}
 
 				if (projectile.bobber) {
-					if (projectile.ai[1] > 0f && projectile.ai[1] < 5045f && projectile.ai[0] == 1f) {
+					if (projectile.ai[1] > 0f && projectile.ai[0] == 1f) {
 						int num385 = (int)projectile.ai[1];
 						Vector2 center5 = projectile.Center;
 						float rotation30 = projectile.rotation;
@@ -25147,17 +_,25 @@
 			if (drawPlayer.dye[0] != null)
 				shaderId = drawPlayer.dye[0].dye;
 
+			drawInfo.armorShader = shaderId;
 			LoadHair(drawPlayer.hair);
 			Microsoft.Xna.Framework.Color color = quickAlpha(Microsoft.Xna.Framework.Color.White, Alpha);
+			drawInfo.eyeWhiteColor = color;
 			Microsoft.Xna.Framework.Color color2 = quickAlpha(drawPlayer.eyeColor, Alpha);
+			drawInfo.eyeColor = color2;
 			Microsoft.Xna.Framework.Color color3 = quickAlpha(drawPlayer.GetHairColor(useLighting: false), Alpha);
+			drawInfo.hairColor = color3;
 			Microsoft.Xna.Framework.Color color4 = quickAlpha(drawPlayer.skinColor, Alpha);
+			drawInfo.skinColor = color4;
 			Microsoft.Xna.Framework.Color color5 = quickAlpha(Microsoft.Xna.Framework.Color.White, Alpha);
+			drawInfo.armorColor = color5;
 			SpriteEffects spriteEffects = SpriteEffects.None;
 			if (drawPlayer.direction < 0)
 				spriteEffects = SpriteEffects.FlipHorizontally;
 
+			drawInfo.spriteEffects = spriteEffects;
 			Vector2 vector = new Vector2((float)drawPlayer.legFrame.Width * 0.5f, (float)drawPlayer.legFrame.Height * 0.4f);
+			drawInfo.drawOrigin = vector;
 			Vector2 position = drawPlayer.position;
 			Microsoft.Xna.Framework.Rectangle bodyFrame = drawPlayer.bodyFrame;
 			drawPlayer.bodyFrame.Y = 0;
@@ -25175,5 +_,9 @@
 
 					if (projectile.type == 473)
 						EntitySpriteDraw(TextureAssets.Projectile[projectile.type].Value, new Vector2(projectile.position.X - screenPosition.X + num137 + (float)num136, projectile.position.Y - screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Projectile[projectile.type].Width(), TextureAssets.Projectile[projectile.type].Height()), new Microsoft.Xna.Framework.Color(255, 255, 0, 0), projectile.rotation, new Vector2(num137, projectile.height / 2 + num135), projectile.scale, spriteEffects, 0);
+
+					ModProjectile modProjectile = projectile.modProjectile;
+					if (modProjectile != null && ModContent.TryGetTexture(modProjectile.GlowTexture, out var glowTexture))
+						spriteBatch.Draw(glowTexture, new Vector2(projectile.position.X - screenPosition.X + num137 + num136, projectile.position.Y - screenPosition.Y + projectile.height / 2 + projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Projectile[projectile.type].Width(), TextureAssets.Projectile[projectile.type].Height())), new Microsoft.Xna.Framework.Color(250, 250, 250, projectile.alpha), projectile.rotation, new Vector2(num137, projectile.height / 2 + num135), projectile.scale, spriteEffects, 0f);
 
 					if (projectile.type == 312) {
@@ -25182,12 +_,43 @@
 			if (drawPlayer.head == 161 || drawPlayer.head == 14 || drawPlayer.head == 15 || drawPlayer.head == 16 || drawPlayer.head == 18 || drawPlayer.head == 21 || drawPlayer.head == 24 || drawPlayer.head == 25 || drawPlayer.head == 26 || drawPlayer.head == 40 || drawPlayer.head == 44 || drawPlayer.head == 51 || drawPlayer.head == 56 || drawPlayer.head == 59 || drawPlayer.head == 60 || drawPlayer.head == 67 || drawPlayer.head == 68 || drawPlayer.head == 69 || drawPlayer.head == 114 || drawPlayer.head == 121 || drawPlayer.head == 126 || drawPlayer.head == 130 || drawPlayer.head == 136 || drawPlayer.head == 140 || drawPlayer.head == 145 || drawPlayer.head == 158 || drawPlayer.head == 159 || drawPlayer.head == 184 || drawPlayer.head == 190 || (double)drawPlayer.head == 92.0 || drawPlayer.head == 195)
 				flag2 = true;
 
-			if (drawPlayer.head != 38 && drawPlayer.head != 135) {
+			ItemLoader.DrawHair(drawPlayer, ref flag, ref flag2);
+			drawInfo.drawHair = flag;
+			drawInfo.drawAltHair = flag2;
+			List<PlayerHeadLayer> drawLayers = PlayerHooks.GetDrawHeadLayers(drawPlayer);
+			int layerIndex = -1;
+		layerLoopContinue:
+			layerIndex++;
+
+			if (layerIndex >= drawLayers.Count)
+				goto postDraw;
+
+			if (!drawLayers[layerIndex].ShouldDraw(drawLayers))
+				goto layerLoopContinue;
+
+			if (drawLayers[layerIndex] == PlayerHeadLayer.Head)
+				goto headLayer;
+			else if (drawLayers[layerIndex] == PlayerHeadLayer.Hair)
+				goto hairLayer;
+			else if (drawLayers[layerIndex] == PlayerHeadLayer.AltHair)
+				goto altHairLayer;
+			else if (drawLayers[layerIndex] == PlayerHeadLayer.Armor)
+				goto armorLayer;
+			else if (drawLayers[layerIndex] == PlayerHeadLayer.FaceAcc)
+				goto faceLayer;
+			else
+				drawLayers[layerIndex].Draw(ref drawInfo);
+
+			goto layerLoopContinue;
+		headLayer:
+			if (drawPlayer.head != 38 && drawPlayer.head != 135 && ItemLoader.DrawHead(drawPlayer)) {
 				spriteBatch.Draw(playerTextures[skinVariant, 0], new Vector2(drawPlayer.position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f) + drawPlayer.headPosition + vector, drawPlayer.bodyFrame, color4, drawPlayer.headRotation, vector, Scale, spriteEffects, 0f);
 				spriteBatch.Draw(playerTextures[skinVariant, 1], new Vector2(drawPlayer.position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f) + drawPlayer.headPosition + vector, drawPlayer.bodyFrame, color, drawPlayer.headRotation, vector, Scale, spriteEffects, 0f);
 				spriteBatch.Draw(playerTextures[skinVariant, 2], new Vector2(drawPlayer.position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f) + drawPlayer.headPosition + vector, drawPlayer.bodyFrame, color2, drawPlayer.headRotation, vector, Scale, spriteEffects, 0f);
 			}
 
+			goto layerLoopContinue;
+		hairLayer:
 			if (flag) {
 				DrawData value = new DrawData(armorHeadTexture[drawPlayer.head], new Vector2(drawPlayer.position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f) + drawPlayer.headPosition + vector, drawPlayer.bodyFrame, color5, drawPlayer.headRotation, vector, Scale, spriteEffects, 0);
 				GameShaders.Armor.Apply(shaderId, drawPlayer, value);
@@ -25206,6 +_,8 @@
 				}
 			}
 
+			goto layerLoopContinue;
+		altHairLayer:
 			if (flag2) {
 				Microsoft.Xna.Framework.Rectangle bodyFrame3 = drawPlayer.bodyFrame;
 				bodyFrame3.Y -= 336;
@@ -25220,6 +_,8 @@
 				}
 			}
 
+			goto layerLoopContinue;
+		armorLayer:
 			if (drawPlayer.head == 23) {
 				Microsoft.Xna.Framework.Rectangle bodyFrame4 = drawPlayer.bodyFrame;
 				bodyFrame4.Y -= 336;
@@ -25270,7 +_,7 @@
 				value4.Draw(spriteBatch);
 				pixelShader.CurrentTechnique.Passes[0].Apply();
 			}
-			else if (drawPlayer.head > 0 && drawPlayer.head < 216 && drawPlayer.head != 28) {
+			else if (drawPlayer.head > 0 && drawPlayer.head != 28) {
 				DrawData value5 = new DrawData(armorHeadTexture[drawPlayer.head], new Vector2(drawPlayer.position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f) + drawPlayer.headPosition + vector, drawPlayer.bodyFrame, color5, drawPlayer.headRotation, vector, Scale, spriteEffects, 0);
 				GameShaders.Armor.Apply(shaderId, drawPlayer, value5);
 				value5.Draw(spriteBatch);
@@ -25288,14 +_,19 @@
 				pixelShader.CurrentTechnique.Passes[0].Apply();
 			}
 
-			if (drawPlayer.face > 0 && drawPlayer.face < 9) {
+			goto layerLoopContinue;
+		faceLayer:
+			if (drawPlayer.face > 0) {
 				DrawData value7 = (drawPlayer.face == 7) ? new DrawData(accFaceTexture[drawPlayer.face], new Vector2((int)(drawPlayer.position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)), (int)(drawPlayer.position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f)) + drawPlayer.headPosition + vector, drawPlayer.bodyFrame, new Microsoft.Xna.Framework.Color(200, 200, 200, 150), drawPlayer.headRotation, vector, Scale, spriteEffects, 0) : new DrawData(accFaceTexture[drawPlayer.face], new Vector2((int)(drawPlayer.position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)), (int)(drawPlayer.position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f)) + drawPlayer.headPosition + vector, drawPlayer.bodyFrame, color5, drawPlayer.headRotation, vector, Scale, spriteEffects, 0);
 				GameShaders.Armor.Apply(shaderId, drawPlayer, value7);
 				value7.Draw(spriteBatch);
 				pixelShader.CurrentTechnique.Passes[0].Apply();
 			}
 
+			goto layerLoopContinue;
+		postDraw:
 			drawPlayer.position = position;
+
 			drawPlayer.bodyFrame.Y = bodyFrame.Y;
 		}
 
@@ -25308,6 +_,11 @@
 		}
 
 		public void DrawPlayer(Player drawPlayer, Vector2 Position, float rotation, Vector2 rotationOrigin, float shadow = 0f) {
+			//prepare for code more ugly than DrawPlayerHead
+			PlayerDrawInfo drawInfo = new PlayerDrawInfo();
+			drawInfo.drawPlayer = drawPlayer;
+			drawInfo.position = Position;
+			drawInfo.shadow = shadow;
 			_ = drawPlayer.controlDown;
 			float num = 0f;
 			DrawData value = default(DrawData);
@@ -25316,6 +_,7 @@
 			playerDrawDust.Clear();
 			playerDrawGore.Clear();
 			Vector2 value2 = Position + (drawPlayer.itemLocation - drawPlayer.position);
+			drawInfo.itemLocation = value2;
 			int num2 = 0;
 			bool flag = false;
 			bool flag2 = false;
@@ -25327,12 +_,18 @@
 			if (drawPlayer.body == 99 || drawPlayer.body == 98 || drawPlayer.body == 100 || drawPlayer.body == 167 || drawPlayer.body == 171 || drawPlayer.body == 183 || drawPlayer.body == 191 || drawPlayer.body == 192 || drawPlayer.body == 198 || drawPlayer.body == 199 || drawPlayer.body == 202 || drawPlayer.body == 201 || drawPlayer.body == 203 || drawPlayer.body == 197 || drawPlayer.body == 182 || drawPlayer.body == 87)
 				flag2 = true;
 
+			ItemLoader.DrawHands(drawPlayer, ref flag, ref flag2);
+			drawInfo.drawHands = flag;
+			drawInfo.drawArms = flag2;
 			if (drawPlayer.heldProj >= 0 && shadow == 0f) {
 				int type = projectile[drawPlayer.heldProj].type;
 				if (type == 460 || type == 535 || type == 600)
 					flag3 = true;
+
+				ProjectileLoader.DrawHeldProjInFrontOfHeldItemAndArms(projectile[drawPlayer.heldProj], ref flag3);
 			}
 
+			drawInfo.drawHeldProjInFrontOfHeldItemAndBody = flag3;
 			bool flag4 = false;
 			if (drawPlayer.head == 10 || drawPlayer.head == 12 || drawPlayer.head == 28 || drawPlayer.head == 62 || drawPlayer.head == 97 || drawPlayer.head == 106 || drawPlayer.head == 113 || drawPlayer.head == 116 || drawPlayer.head == 119 || drawPlayer.head == 133 || drawPlayer.head == 138 || drawPlayer.head == 139 || drawPlayer.head == 163 || drawPlayer.head == 178 || drawPlayer.head == 181 || drawPlayer.head == 191 || drawPlayer.head == 198)
 				flag4 = true;
@@ -25341,6 +_,9 @@
 			if (drawPlayer.head == 161 || drawPlayer.head == 14 || drawPlayer.head == 15 || drawPlayer.head == 16 || drawPlayer.head == 18 || drawPlayer.head == 21 || drawPlayer.head == 24 || drawPlayer.head == 25 || drawPlayer.head == 26 || drawPlayer.head == 40 || drawPlayer.head == 44 || drawPlayer.head == 51 || drawPlayer.head == 56 || drawPlayer.head == 59 || drawPlayer.head == 60 || drawPlayer.head == 67 || drawPlayer.head == 68 || drawPlayer.head == 69 || drawPlayer.head == 114 || drawPlayer.head == 121 || drawPlayer.head == 126 || drawPlayer.head == 130 || drawPlayer.head == 136 || drawPlayer.head == 140 || drawPlayer.head == 145 || drawPlayer.head == 158 || drawPlayer.head == 159 || drawPlayer.head == 184 || drawPlayer.head == 190 || drawPlayer.head == 92 || drawPlayer.head == 195 || drawPlayer.head == 215)
 				flag5 = true;
 
+			ItemLoader.DrawHair(drawPlayer, ref flag4, ref flag5);
+			drawInfo.drawHair = flag4;
+			drawInfo.drawAltHair = flag5;
 			bool flag6 = false;
 			if (drawPlayer.face == 4 || drawPlayer.face == 3 || drawPlayer.face == 2)
 				flag6 = true;
@@ -25349,16 +_,20 @@
 			if (drawPlayer.head == 0 && num3 == 0)
 				num3 = 1;
 
+			drawInfo.hairShader = num3;
 			float num4 = drawPlayer.mount.PlayerOffset;
 			Position.Y -= num4;
+			drawInfo.position = Position;
 			int num5 = 0;
 			if (drawPlayer.dye[0] != null)
 				num5 = drawPlayer.dye[0].dye;
 
+			drawInfo.headArmorShader = num5;
 			int num6 = 0;
 			if (drawPlayer.dye[1] != null)
 				num6 = drawPlayer.dye[1].dye;
 
+			drawInfo.bodyArmorShader = num6;
 			int shader = 0;
 			if (drawPlayer.dye[2] != null)
 				shader = drawPlayer.dye[2].dye;
@@ -25366,6 +_,7 @@
 			if (drawPlayer.wearsRobe)
 				shader = num6;
 
+			drawInfo.legArmorShader = shader;
 			int shader2 = 0;
 			int shader3 = 0;
 			int shader4 = 0;
@@ -25381,41 +_,65 @@
 			for (int i = 0; i < 20; i++) {
 				int num7 = i % 10;
 				if (drawPlayer.dye[num7] != null && drawPlayer.armor[i].type > 0 && drawPlayer.armor[i].stack > 0 && (i / 10 >= 1 || !drawPlayer.hideVisual[num7] || drawPlayer.armor[i].wingSlot > 0 || drawPlayer.armor[i].type == 934)) {
-					if (drawPlayer.armor[i].handOnSlot > 0 && drawPlayer.armor[i].handOnSlot < 20)
+					if (drawPlayer.armor[i].handOnSlot > 0) {
 						shader2 = drawPlayer.dye[num7].dye;
+						drawInfo.handOnShader = shader2;
+					}
 
-					if (drawPlayer.armor[i].handOffSlot > 0 && drawPlayer.armor[i].handOffSlot < 12)
+					if (drawPlayer.armor[i].handOffSlot > 0) {
 						shader3 = drawPlayer.dye[num7].dye;
+						drawInfo.handOffShader = shader3;
+					}
 
-					if (drawPlayer.armor[i].backSlot > 0 && drawPlayer.armor[i].backSlot < 14)
+					if (drawPlayer.armor[i].backSlot > 0) {
 						shader4 = drawPlayer.dye[num7].dye;
+						drawInfo.backShader = shader4;
+					}
 
-					if (drawPlayer.armor[i].frontSlot > 0 && drawPlayer.armor[i].frontSlot < 5)
+					if (drawPlayer.armor[i].frontSlot > 0) {
 						shader5 = drawPlayer.dye[num7].dye;
+						drawInfo.frontShader = shader5;
+					}
 
-					if (drawPlayer.armor[i].shoeSlot > 0 && drawPlayer.armor[i].shoeSlot < 18)
+					if (drawPlayer.armor[i].shoeSlot > 0) {
 						shader6 = drawPlayer.dye[num7].dye;
+						drawInfo.shoeShader = shader6;
+					}
 
-					if (drawPlayer.armor[i].waistSlot > 0 && drawPlayer.armor[i].waistSlot < 13)
+					if (drawPlayer.armor[i].waistSlot > 0) {
 						shader7 = drawPlayer.dye[num7].dye;
+						drawInfo.waistShader = shader7;
+					}
 
-					if (drawPlayer.armor[i].shieldSlot > 0 && drawPlayer.armor[i].shieldSlot < 7)
+					if (drawPlayer.armor[i].shieldSlot > 0) {
 						shader8 = drawPlayer.dye[num7].dye;
+						drawInfo.shieldShader = shader8;
+					}
 
-					if (drawPlayer.armor[i].neckSlot > 0 && drawPlayer.armor[i].neckSlot < 10)
+					if (drawPlayer.armor[i].neckSlot > 0) {
 						shader9 = drawPlayer.dye[num7].dye;
+						drawInfo.neckShader = shader9;
+					}
 
-					if (drawPlayer.armor[i].faceSlot > 0 && drawPlayer.armor[i].faceSlot < 9)
+					if (drawPlayer.armor[i].faceSlot > 0) {
 						shader10 = drawPlayer.dye[num7].dye;
+						drawInfo.faceShader = shader10;
+					}
 
-					if (drawPlayer.armor[i].balloonSlot > 0 && drawPlayer.armor[i].balloonSlot < 18)
+					if (drawPlayer.armor[i].balloonSlot > 0) {
 						shader11 = drawPlayer.dye[num7].dye;
+						drawInfo.balloonShader = shader11;
+					}
 
-					if (drawPlayer.armor[i].wingSlot > 0 && drawPlayer.armor[i].wingSlot < 40)
+					if (drawPlayer.armor[i].wingSlot > 0) {
 						shader12 = drawPlayer.dye[num7].dye;
+						drawInfo.wingShader = shader12;
+					}
 
-					if (drawPlayer.armor[i].type == 934)
+					if (drawPlayer.armor[i].type == 934) {
 						shader13 = drawPlayer.dye[num7].dye;
+						drawInfo.carpetShader = shader13;
+					}
 				}
 			}
 
@@ -25427,32 +_,54 @@
 			SpriteEffects spriteEffects = SpriteEffects.None;
 			SpriteEffects spriteEffects2 = SpriteEffects.FlipHorizontally;
 			Microsoft.Xna.Framework.Color color = drawPlayer.GetImmuneAlpha(drawPlayer.GetHairColor(), shadow);
+			drawInfo.hairColor = color;
 			Microsoft.Xna.Framework.Color color2 = drawPlayer.GetImmuneAlpha(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.25) / 16.0), Microsoft.Xna.Framework.Color.White), shadow);
+			drawInfo.eyeWhiteColor = color2;
 			Microsoft.Xna.Framework.Color color3 = drawPlayer.GetImmuneAlpha(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.25) / 16.0), drawPlayer.eyeColor), shadow);
+			drawInfo.eyeColor = color3;
 			Microsoft.Xna.Framework.Color color4 = drawPlayer.GetImmuneAlpha(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.25) / 16.0), drawPlayer.skinColor), shadow);
+			drawInfo.faceColor = color4;
 			Microsoft.Xna.Framework.Color color5 = drawPlayer.GetImmuneAlpha(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.5) / 16.0), drawPlayer.skinColor), shadow);
+			drawInfo.bodyColor = color5;
 			Microsoft.Xna.Framework.Color color6 = drawPlayer.GetImmuneAlpha(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.75) / 16.0), drawPlayer.skinColor), shadow);
+			drawInfo.legColor = color6;
 			Microsoft.Xna.Framework.Color color7 = drawPlayer.GetImmuneAlphaPure(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.5) / 16.0), drawPlayer.shirtColor), shadow);
+			drawInfo.shirtColor = color7;
 			Microsoft.Xna.Framework.Color color8 = drawPlayer.GetImmuneAlphaPure(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.5) / 16.0), drawPlayer.underShirtColor), shadow);
+			drawInfo.underShirtColor = color8;
 			Microsoft.Xna.Framework.Color color9 = drawPlayer.GetImmuneAlphaPure(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.75) / 16.0), drawPlayer.pantsColor), shadow);
+			drawInfo.pantsColor = color9;
 			Microsoft.Xna.Framework.Color color10 = drawPlayer.GetImmuneAlphaPure(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.75) / 16.0), drawPlayer.shoeColor), shadow);
+			drawInfo.shoeColor = color10;
 			Microsoft.Xna.Framework.Color color11 = drawPlayer.GetImmuneAlphaPure(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)((double)Position.Y + (double)drawPlayer.height * 0.25) / 16, Microsoft.Xna.Framework.Color.White), shadow);
+			drawInfo.upperArmorColor = color11;
 			Microsoft.Xna.Framework.Color color12 = drawPlayer.GetImmuneAlphaPure(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)((double)Position.Y + (double)drawPlayer.height * 0.5) / 16, Microsoft.Xna.Framework.Color.White), shadow);
+			drawInfo.middleArmorColor = color12;
 			Microsoft.Xna.Framework.Color color13 = color12;
+			drawInfo.mountColor = color13;
 			Microsoft.Xna.Framework.Color color14 = drawPlayer.GetImmuneAlphaPure(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)((double)Position.Y + (double)drawPlayer.height * 0.75) / 16, Microsoft.Xna.Framework.Color.White), shadow);
+			drawInfo.lowerArmorColor = color14;
 			Microsoft.Xna.Framework.Color color15 = new Microsoft.Xna.Framework.Color(255, 255, 255, 100);
 			int num8 = 0;
 			int num9 = 0;
 			int num10 = 0;
 			int num11 = 0;
 			int num12 = -1;
+			drawInfo.headGlowMask = num12;
 			int num13 = -1;
+			drawInfo.bodyGlowMask = num13;
 			int num14 = -1;
+			drawInfo.armGlowMask = num14;
 			int num15 = -1;
+			drawInfo.legGlowMask = num15;
 			Microsoft.Xna.Framework.Color newColor = Microsoft.Xna.Framework.Color.Transparent;
+			drawInfo.headGlowMaskColor = newColor;
 			Microsoft.Xna.Framework.Color newColor2 = Microsoft.Xna.Framework.Color.Transparent;
+			drawInfo.bodyGlowMaskColor = newColor2;
 			Microsoft.Xna.Framework.Color newColor3 = Microsoft.Xna.Framework.Color.Transparent;
+			drawInfo.armGlowMaskColor = newColor3;
 			Microsoft.Xna.Framework.Color newColor4 = Microsoft.Xna.Framework.Color.Transparent;
+			drawInfo.legGlowMaskColor = newColor4;
 			switch (drawPlayer.head) {
 				case 169:
 					num8++;
@@ -25501,6 +_,7 @@
 			Microsoft.Xna.Framework.Color underShirtColor = drawPlayer.underShirtColor;
 			underShirtColor.A = 180;
 			if (drawPlayer.head == 169) {
+				//patch file: num12
 				num12 = 15;
 				byte b = (byte)(62.5f * (float)(1 + num8));
 				newColor = new Microsoft.Xna.Framework.Color(b, b, b, 0);
@@ -25547,6 +_,7 @@
 			}
 
 			if (drawPlayer.body == 175) {
+				//patch file: num13
 				num13 = ((!drawPlayer.Male) ? 18 : 13);
 				byte b6 = (byte)(62.5f * (float)(1 + num8));
 				newColor2 = new Microsoft.Xna.Framework.Color(b6, b6, b6, 0);
@@ -25560,6 +_,7 @@
 			else if (drawPlayer.body == 190) {
 				num13 = ((!drawPlayer.Male) ? 186 : 185);
 				num14 = 188;
+				//patch file: num14
 				byte b7 = (byte)(62.5f * (float)(1 + num11));
 				newColor2 = new Microsoft.Xna.Framework.Color(b7, b7, b7, 0);
 				newColor3 = new Microsoft.Xna.Framework.Color(b7, b7, b7, 0);
@@ -25590,6 +_,7 @@
 			}
 
 			if (drawPlayer.legs == 111) {
+				//patch file: num15
 				num15 = 17;
 				byte b10 = (byte)(62.5f * (float)(1 + num9));
 				newColor4 = new Microsoft.Xna.Framework.Color(b10, b10, b10, 0);
@@ -25622,6 +_,10 @@
 				color14 = drawPlayer.GetImmuneAlphaPure(new Microsoft.Xna.Framework.Color(b13, b13, b13, 255), shadow);
 			}
 
+			ItemLoader.DrawArmorColor(EquipType.Head, drawPlayer.head, drawPlayer, shadow, ref color11, ref num12, ref newColor);
+			ItemLoader.DrawArmorColor(EquipType.Body, drawPlayer.body, drawPlayer, shadow, ref color12, ref num13, ref newColor2);
+			ItemLoader.ArmorArmGlowMask(drawPlayer.body, drawPlayer, shadow, ref num14, ref newColor3);
+			ItemLoader.DrawArmorColor(EquipType.Legs, drawPlayer.legs, drawPlayer, shadow, ref color14, ref num15, ref newColor4);
 			newColor = drawPlayer.GetImmuneAlphaPure(newColor, shadow);
 			newColor2 = drawPlayer.GetImmuneAlphaPure(newColor2, shadow);
 			newColor3 = drawPlayer.GetImmuneAlphaPure(newColor3, shadow);
@@ -26020,8 +_,10 @@
 				playerDrawDust.Add(num43);
 			}
 
+			bool fullBright = false;
+			PlayerHooks.DrawEffects(drawInfo, ref num18, ref num19, ref num20, ref num21, ref fullBright);
 			if (num18 != 1f || num19 != 1f || num20 != 1f || num21 != 1f) {
-				if (drawPlayer.onFire || drawPlayer.onFire2 || drawPlayer.onFrostBurn) {
+				if (drawPlayer.onFire || drawPlayer.onFire2 || drawPlayer.onFrostBurn || fullBright) {
 					color2 = drawPlayer.GetImmuneAlpha(Microsoft.Xna.Framework.Color.White, shadow);
 					color3 = drawPlayer.GetImmuneAlpha(drawPlayer.eyeColor, shadow);
 					color = drawPlayer.GetImmuneAlpha(drawPlayer.GetHairColor(), shadow);
@@ -26189,6 +_,27 @@
 				newColor4 = Microsoft.Xna.Framework.Color.Multiply(newColor4, num49);
 			}
 
+			drawInfo.hairColor = color;
+			drawInfo.eyeWhiteColor = color2;
+			drawInfo.eyeColor = color3;
+			drawInfo.faceColor = color4;
+			drawInfo.bodyColor = color5;
+			drawInfo.legColor = color6;
+			drawInfo.shirtColor = color7;
+			drawInfo.underShirtColor = color8;
+			drawInfo.pantsColor = color9;
+			drawInfo.shoeColor = color10;
+			drawInfo.upperArmorColor = color11;
+			drawInfo.middleArmorColor = color12;
+			drawInfo.lowerArmorColor = color14;
+			drawInfo.headGlowMask = num12;
+			drawInfo.bodyGlowMask = num13;
+			drawInfo.armGlowMask = num14;
+			drawInfo.legGlowMask = num15;
+			drawInfo.headGlowMaskColor = newColor;
+			drawInfo.bodyGlowMaskColor = newColor2;
+			drawInfo.armGlowMaskColor = newColor3;
+			drawInfo.legGlowMaskColor = newColor4;
 			if (drawPlayer.gravDir == 1f) {
 				if (drawPlayer.direction == 1) {
 					spriteEffects = SpriteEffects.None;
@@ -26222,9 +_,13 @@
 				}
 			}
 
+			drawInfo.spriteEffects = spriteEffects;
 			Vector2 vector2 = new Vector2((float)drawPlayer.legFrame.Width * 0.5f, (float)drawPlayer.legFrame.Height * 0.75f);
+			drawInfo.legOrigin = vector2;
 			Vector2 origin = new Vector2((float)drawPlayer.legFrame.Width * 0.5f, (float)drawPlayer.legFrame.Height * 0.5f);
+			drawInfo.bodyOrigin = origin;
 			Vector2 vector3 = new Vector2((float)drawPlayer.legFrame.Width * 0.5f, (float)drawPlayer.legFrame.Height * 0.4f);
+			drawInfo.headOrigin = vector3;
 			if ((drawPlayer.merman || drawPlayer.forceMerman) && !drawPlayer.hideMerman) {
 				drawPlayer.headRotation = drawPlayer.velocity.Y * (float)drawPlayer.direction * 0.1f;
 				if ((double)drawPlayer.headRotation < -0.3)
@@ -26248,6 +_,130 @@
 			if (hair == 133)
 				flag7 = true;
 
+			goto heldItemColor;
+		postSetupVars:
+			PlayerHooks.ModifyDrawInfo(ref drawInfo);
+
+			List<PlayerLayer> drawLayers = PlayerHooks.GetDrawLayers(drawPlayer);
+			int layerIndex = -1;
+		layerLoopContinue:
+			layerIndex++;
+
+			Position = drawInfo.position;
+			shadow = drawInfo.shadow;
+			value2 = drawInfo.itemLocation;
+			flag = drawInfo.drawHands;
+			flag2 = drawInfo.drawArms;
+			flag3 = drawInfo.drawHeldProjInFrontOfHeldItemAndBody;
+			flag4 = drawInfo.drawHair;
+			flag5 = drawInfo.drawAltHair;
+			num3 = drawInfo.hairShader;
+			num5 = drawInfo.headArmorShader;
+			num6 = drawInfo.bodyArmorShader;
+			shader = drawInfo.legArmorShader;
+			shader2 = drawInfo.handOnShader;
+			shader3 = drawInfo.handOffShader;
+			shader4 = drawInfo.backShader;
+			shader5 = drawInfo.frontShader;
+			shader6 = drawInfo.shoeShader;
+			shader7 = drawInfo.waistShader;
+			shader8 = drawInfo.shieldShader;
+			shader9 = drawInfo.neckShader;
+			shader10 = drawInfo.faceShader;
+			shader11 = drawInfo.balloonShader;
+			shader12 = drawInfo.wingShader;
+			shader13 = drawInfo.carpetShader;
+			color = drawInfo.hairColor;
+			color2 = drawInfo.eyeWhiteColor;
+			color3 = drawInfo.eyeColor;
+			color4 = drawInfo.faceColor;
+			color5 = drawInfo.bodyColor;
+			color6 = drawInfo.legColor;
+			color7 = drawInfo.shirtColor;
+			color8 = drawInfo.underShirtColor;
+			color9 = drawInfo.pantsColor;
+			color10 = drawInfo.shoeColor;
+			color11 = drawInfo.upperArmorColor;
+			color12 = drawInfo.middleArmorColor;
+			color13 = drawInfo.mountColor;
+			color14 = drawInfo.lowerArmorColor;
+			num12 = drawInfo.headGlowMask;
+			num13 = drawInfo.bodyGlowMask;
+			num14 = drawInfo.armGlowMask;
+			num15 = drawInfo.legGlowMask;
+			newColor = drawInfo.headGlowMaskColor;
+			newColor2 = drawInfo.bodyGlowMaskColor;
+			newColor3 = drawInfo.armGlowMaskColor;
+			newColor4 = drawInfo.legGlowMaskColor;
+			spriteEffects = drawInfo.spriteEffects;
+			vector2 = drawInfo.legOrigin;
+			origin = drawInfo.bodyOrigin;
+			vector3 = drawInfo.headOrigin;
+			if (layerIndex >= drawLayers.Count)
+				goto postDraw;
+
+			if (!drawLayers[layerIndex].ShouldDraw(drawLayers))
+				goto layerLoopContinue;
+
+			if (drawLayers[layerIndex] == PlayerLayer.HairBack)
+				goto hairBackLayer;
+			else if (drawLayers[layerIndex] == PlayerLayer.MountBack)
+				goto mountBackLayer;
+			else if (drawLayers[layerIndex] == PlayerLayer.MiscEffectsBack)
+				goto miscEffectsBackLayer;
+			else if (drawLayers[layerIndex] == PlayerLayer.BackAcc)
+				goto backAccLayer;
+			else if (drawLayers[layerIndex] == PlayerLayer.Wings)
+				goto wingsLayer;
+			else if (drawLayers[layerIndex] == PlayerLayer.BalloonAcc)
+				goto balloonAccLayer;
+			else if (drawLayers[layerIndex] == PlayerLayer.Skin)
+				goto skinLayer;
+			else if (drawLayers[layerIndex] == PlayerLayer.Legs)
+				goto legsLayer;
+			else if (drawLayers[layerIndex] == PlayerLayer.ShoeAcc)
+				goto shoeAccLayer;
+			else if (drawLayers[layerIndex] == PlayerLayer.Body)
+				goto bodyLayer;
+			else if (drawLayers[layerIndex] == PlayerLayer.HandOffAcc)
+				goto handOffAccLayer;
+			else if (drawLayers[layerIndex] == PlayerLayer.WaistAcc)
+				goto waistAccLayer;
+			else if (drawLayers[layerIndex] == PlayerLayer.NeckAcc)
+				goto neckAccLayer;
+			else if (drawLayers[layerIndex] == PlayerLayer.Face)
+				goto faceLayer;
+			else if (drawLayers[layerIndex] == PlayerLayer.Hair)
+				goto hairLayer;
+			else if (drawLayers[layerIndex] == PlayerLayer.Head)
+				goto headLayer;
+			else if (drawLayers[layerIndex] == PlayerLayer.FaceAcc)
+				goto faceAccLayer;
+			else if (drawLayers[layerIndex] == PlayerLayer.MountFront)
+				goto mountFrontLayer;
+			else if (drawLayers[layerIndex] == PlayerLayer.ShieldAcc)
+				goto shieldAccLayer;
+			else if (drawLayers[layerIndex] == PlayerLayer.SolarShield)
+				goto solarShieldLayer;
+			else if (drawLayers[layerIndex] == PlayerLayer.HeldProjBack)
+				goto heldProjBackLayer;
+			else if (drawLayers[layerIndex] == PlayerLayer.HeldItem)
+				goto heldItemLayer;
+			else if (drawLayers[layerIndex] == PlayerLayer.Arms)
+				goto armsLayer;
+			else if (drawLayers[layerIndex] == PlayerLayer.HandOnAcc)
+				goto handOnAccLayer;
+			else if (drawLayers[layerIndex] == PlayerLayer.HeldProjFront)
+				goto heldProjFrontLayer;
+			else if (drawLayers[layerIndex] == PlayerLayer.FrontAcc)
+				goto frontAccLayer;
+			else if (drawLayers[layerIndex] == PlayerLayer.MiscEffectsFront)
+				goto miscEffectsFrontLayer;
+			else
+				drawLayers[layerIndex].Draw(ref drawInfo);
+
+			goto layerLoopContinue;
+		hairBackLayer:
 			if (flag6) {
 				bodyFrame.Height = 0;
 			}
@@ -26267,6 +_,8 @@
 					bodyFrame.Height = height;
 			}
 
+			goto layerLoopContinue;
+		mountBackLayer:
 			if (drawPlayer.mount.Active) {
 				drawPlayer.mount.Draw(playerDrawData, 0, drawPlayer, Position, color13, spriteEffects, shadow);
 				drawPlayer.mount.Draw(playerDrawData, 1, drawPlayer, Position, color13, spriteEffects, shadow);
@@ -26284,6 +_,8 @@
 			}
 
 			Position.Y += num;
+			goto layerLoopContinue;
+		miscEffectsBackLayer:
 			if (drawPlayer.electrified && shadow == 0f) {
 				Texture2D texture2D = glowMaskTexture[25];
 				int num51 = drawPlayer.miscCounter / 5;
@@ -26302,6 +_,7 @@
 				Microsoft.Xna.Framework.Color color17 = Microsoft.Xna.Framework.Color.Lerp(color12, Microsoft.Xna.Framework.Color.White, 0.7f);
 				Texture2D texture2D2 = extraTexture[74];
 				Texture2D texture = glowMaskTexture[217];
+				// TODO do we need num52
 				bool num52 = !drawPlayer.setForbiddenCooldownLocked;
 				int num53 = 0;
 				num53 = (int)(((float)drawPlayer.miscCounter / 300f * ((float)Math.PI * 2f)).ToRotationVector2().Y * 6f);
@@ -26361,7 +_,10 @@
 			}
 
 			Position.Y -= num;
+			goto layerLoopContinue;
+		backAccLayer:
 			bool flag8 = false;
+
 			if ((drawPlayer.wings == 0 || drawPlayer.velocity.Y == 0f) && (drawPlayer.inventory[drawPlayer.selectedItem].type == 1178 || drawPlayer.inventory[drawPlayer.selectedItem].type == 779 || drawPlayer.inventory[drawPlayer.selectedItem].type == 1295 || drawPlayer.inventory[drawPlayer.selectedItem].type == 1910 || drawPlayer.turtleArmor || drawPlayer.body == 106 || drawPlayer.body == 170)) {
 				flag8 = true;
 				int type4 = drawPlayer.inventory[drawPlayer.selectedItem].type;
@@ -26418,8 +_,8 @@
 				}
 			}
 
-			if (!flag8 && drawPlayer.back > 0 && drawPlayer.back < 14 && !drawPlayer.mount.Active) {
-				if (drawPlayer.front >= 1 && drawPlayer.front <= 4) {
+			if (!flag8 && drawPlayer.back > 0 && !drawPlayer.mount.Active) {
+				if (drawPlayer.front >= 1) {
 					int num62 = drawPlayer.bodyFrame.Y / 56;
 					if (num62 < 1 || num62 > 5) {
 						num2 = 10;
@@ -26444,6 +_,10 @@
 				playerDrawData.Add(value);
 			}
 
+			goto layerLoopContinue;
+		wingsLayer:
+			flag8 = (drawPlayer.wings == 0 || drawPlayer.velocity.Y == 0f) && (drawPlayer.inventory[drawPlayer.selectedItem].type == 1178 || drawPlayer.inventory[drawPlayer.selectedItem].type == 779 || drawPlayer.inventory[drawPlayer.selectedItem].type == 1295 || drawPlayer.inventory[drawPlayer.selectedItem].type == 1910 || drawPlayer.turtleArmor || drawPlayer.body == 106 || drawPlayer.body == 170);
+
 			Position.Y += (int)num4 / 2;
 			if (!flag8 && drawPlayer.wings > 0) {
 				LoadWings(drawPlayer.wings);
@@ -26635,6 +_,11 @@
 				}
 			}
 
+			Position.Y -= (int)num4 / 2;
+			goto layerLoopContinue;
+		balloonAccLayer:
+			Position.Y += (int)num4 / 2;
+
 			if (drawPlayer.balloon > 0) {
 				int num70 = DateTime.Now.Millisecond % 800 / 200;
 				Vector2 vector5 = OffsetsPlayerOffhand[drawPlayer.bodyFrame.Y / 56];
@@ -26650,30 +_,35 @@
 			}
 
 			Position.Y -= (int)num4 / 2;
+			goto layerLoopContinue;
+		skinLayer:
 			bool num71 = drawPlayer.body == 82 || drawPlayer.body == 83 || drawPlayer.body == 93 || drawPlayer.body == 21 || drawPlayer.body == 22;
 			bool flag9 = drawPlayer.body == 93 || drawPlayer.legs == 20 || drawPlayer.legs == 21;
-			if (!num71) {
+			if (!num71 && ItemLoader.DrawBody(drawPlayer)) {// TODO this might be wrong, the logic changed
 				Position.Y += num;
 				value = new DrawData(playerTextures[skinVariant, 3], new Vector2((int)(Position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)), (int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f)) + drawPlayer.bodyPosition + new Vector2(drawPlayer.bodyFrame.Width / 2, drawPlayer.bodyFrame.Height / 2), drawPlayer.bodyFrame, color5, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
 				playerDrawData.Add(value);
 				Position.Y -= num;
 			}
 
-			if (!flag9 && drawPlayer.legs != 67 && drawPlayer.legs != 106 && drawPlayer.legs != 140 && drawPlayer.legs != 138 && drawPlayer.shoe != 15 && drawPlayer.legs != 143) {
+			if (!flag9 && drawPlayer.legs != 67 && drawPlayer.legs != 106 && drawPlayer.legs != 140 && drawPlayer.legs != 138 && drawPlayer.shoe != 15 && drawPlayer.legs != 143 && ItemLoader.DrawLegs(drawPlayer)) {
 				value = new DrawData(playerTextures[skinVariant, 10], new Vector2((int)(Position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)), (int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f)) + drawPlayer.bodyPosition + new Vector2(drawPlayer.bodyFrame.Width / 2, drawPlayer.bodyFrame.Height / 2), drawPlayer.legFrame, color6, drawPlayer.legRotation, origin, 1f, spriteEffects, 0);
 				playerDrawData.Add(value);
 			}
 
+			goto layerLoopContinue;
 			if (!drawPlayer.wearsRobe)
 				goto IL_68ff;
 
 			goto IL_6dc5;
 		IL_6dc5:
+		shoeAccLayer:
 			if (drawPlayer.shoe > 0 && drawPlayer.shoe < 18) {
 				value = new DrawData(accShoesTexture[drawPlayer.shoe], new Vector2((int)(Position.X - screenPosition.X - (float)(drawPlayer.legFrame.Width / 2) + (float)(drawPlayer.width / 2)), (int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.legFrame.Height + 4f)) + drawPlayer.legPosition + vector2, drawPlayer.legFrame, color14, drawPlayer.legRotation, vector2, 1f, spriteEffects, 0);
 				value.shader = shader6;
 				playerDrawData.Add(value);
 			}
+			goto layerLoopContinue;
 
 			if (drawPlayer.wearsRobe)
 				goto IL_68ff;
@@ -26681,7 +_,7 @@
 			goto IL_6e9e;
 		IL_6e9e:
 			Position.Y += num;
-
+		bodyLayer:
 			if ((skinVariant == 3 || skinVariant == 8 || skinVariant == 7) && (drawPlayer.body <= 0 || drawPlayer.body >= 210) && !drawPlayer.invis) {
 				value = new DrawData(playerTextures[skinVariant, 14], new Vector2((int)(Position.X - screenPosition.X - (float)(drawPlayer.legFrame.Width / 2) + (float)(drawPlayer.width / 2)), (int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.legFrame.Height + 4f)) + drawPlayer.legPosition + vector2, drawPlayer.legFrame, color7, drawPlayer.legRotation, vector2, 1f, spriteEffects, 0);
 				playerDrawData.Add(value);
@@ -26710,7 +_,7 @@
 				playerDrawData.Add(value);
 			}
 
-			if (drawPlayer.body > 0 && drawPlayer.body < 210) {
+			if (drawPlayer.body > 0) {
 				Microsoft.Xna.Framework.Rectangle bodyFrame2 = drawPlayer.bodyFrame;
 				int num73 = num2;
 				bodyFrame2.X += num73;
@@ -26753,13 +_,17 @@
 				playerDrawData.Add(value);
 			}
 
-			if (drawPlayer.handoff > 0 && drawPlayer.handoff < 12) {
+			goto layerLoopContinue;
+		handOffAccLayer:
+			if (drawPlayer.handoff > 0) {
 				value = new DrawData(accHandsOffTexture[drawPlayer.handoff], new Vector2((int)(Position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)), (int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f)) + drawPlayer.bodyPosition + new Vector2(drawPlayer.bodyFrame.Width / 2, drawPlayer.bodyFrame.Height / 2), drawPlayer.bodyFrame, color12, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
 				value.shader = shader3;
 				playerDrawData.Add(value);
 			}
 
-			if (drawPlayer.waist > 0 && drawPlayer.waist < 13) {
+			goto layerLoopContinue;
+		waistAccLayer:
+			if (drawPlayer.waist > 0) {
 				Microsoft.Xna.Framework.Rectangle legFrame = drawPlayer.legFrame;
 				if (legFrame.Y >= 1064)
 					legFrame.Y = 0;
@@ -26769,13 +_,17 @@
 				playerDrawData.Add(value);
 			}
 
-			if (drawPlayer.neck > 0 && drawPlayer.neck < 10) {
+			goto layerLoopContinue;
+		neckAccLayer:
+			if (drawPlayer.neck > 0) {
 				value = new DrawData(accNeckTexture[drawPlayer.neck], new Vector2((int)(Position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)), (int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f)) + drawPlayer.bodyPosition + new Vector2(drawPlayer.bodyFrame.Width / 2, drawPlayer.bodyFrame.Height / 2), drawPlayer.bodyFrame, color12, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
 				value.shader = shader9;
 				playerDrawData.Add(value);
 			}
 
+			goto layerLoopContinue;
+		faceLayer:
-			if (!drawPlayer.invis && drawPlayer.head != 38 && drawPlayer.head != 135) {
+			if (!drawPlayer.invis && drawPlayer.head != 38 && drawPlayer.head != 135 && ItemLoader.DrawHead(drawPlayer)) {
 				value = new DrawData(playerTextures[skinVariant, 0], new Vector2((int)(Position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)), (int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f)) + drawPlayer.headPosition + vector3, drawPlayer.bodyFrame, color4, drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
 				playerDrawData.Add(value);
 				value = new DrawData(playerTextures[skinVariant, 1], new Vector2((int)(Position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)), (int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f)) + drawPlayer.headPosition + vector3, drawPlayer.bodyFrame, color2, drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
@@ -26788,6 +_,8 @@
 				}
 			}
 
+			goto layerLoopContinue;
+		hairLayer:
 			if (flag4) {
 				value = new DrawData(armorHeadTexture[drawPlayer.head], new Vector2((int)(Position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)), (int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f)) + drawPlayer.headPosition + vector3, drawPlayer.bodyFrame, color11, drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
 				value.shader = num5;
@@ -26805,6 +_,8 @@
 				playerDrawData.Add(value);
 			}
 
+			goto layerLoopContinue;
+		headLayer:
 			if (drawPlayer.head == 23) {
 				if (!drawPlayer.invis) {
 					value = new DrawData(playerHairTexture[drawPlayer.hair], new Vector2((int)(Position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)), (int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f)) + drawPlayer.headPosition + vector3, bodyFrame, color, drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
@@ -26836,7 +_,7 @@
 				value.shader = num5;
 				playerDrawData.Add(value);
 			}
-			else if (drawPlayer.head > 0 && drawPlayer.head < 216 && drawPlayer.head != 28) {
+			else if (drawPlayer.head > 0 && drawPlayer.head != 28) {
 				if (!drawPlayer.invis || (drawPlayer.head != 39 && drawPlayer.head != 38)) {
 					if (drawPlayer.head == 13) {
 						int num74 = 0;
@@ -26925,7 +_,9 @@
 				}
 			}
 
-			if (drawPlayer.face > 0 && drawPlayer.face < 9) {
+			goto layerLoopContinue;
+		faceAccLayer:
+			if (drawPlayer.face > 0) {
 				if (drawPlayer.face == 7) {
 					value = new DrawData(accFaceTexture[drawPlayer.face], new Vector2((int)(Position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)), (int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f)) + drawPlayer.headPosition + vector3, drawPlayer.bodyFrame, new Microsoft.Xna.Framework.Color(200, 200, 200, 150), drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
 					value.shader = shader10;
@@ -26938,6 +_,8 @@
 				}
 			}
 
+			goto layerLoopContinue;
+		mountFrontLayer:
 			if (drawPlayer.mount.Active) {
 				drawPlayer.mount.Draw(playerDrawData, 2, drawPlayer, Position, color13, spriteEffects, shadow);
 				drawPlayer.mount.Draw(playerDrawData, 3, drawPlayer, Position, color13, spriteEffects, shadow);
@@ -26960,7 +_,9 @@
 				}
 			}
 
-			if (drawPlayer.shield > 0 && drawPlayer.shield < 7) {
+			goto layerLoopContinue;
+		shieldAccLayer:
+			if (drawPlayer.shield > 0) {
 				Vector2 zero = Vector2.Zero;
 				if (drawPlayer.shieldRaised)
 					zero.Y -= 4f;
@@ -27007,11 +_,14 @@
 					playerDrawData.Add(value);
 				}
 
+				goto layerLoopContinue;
 				if (drawPlayer.mount.Cart)
 					playerDrawData.Reverse(playerDrawData.Count - 2, 2);
 			}
 
+		solarShieldLayer:
 			Position.Y += (int)num4 / 2;
+
 			if (drawPlayer.solarShields > 0 && shadow == 0f && !drawPlayer.dead) {
 				Texture2D texture2D7 = extraTexture[61 + drawPlayer.solarShields - 1];
 				Microsoft.Xna.Framework.Color color34 = new Microsoft.Xna.Framework.Color(255, 255, 255, 127);
@@ -27026,10 +_,15 @@
 			}
 
 			Position.Y -= (int)num4 / 2;
+			goto layerLoopContinue;
+		heldProjBackLayer:
 			if (drawPlayer.heldProj >= 0 && shadow == 0f && !flag3)
 				projectileDrawPosition = playerDrawData.Count;
 
+			goto layerLoopContinue;
+		heldItemColor:
 			Microsoft.Xna.Framework.Color currentColor = Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.5) / 16.0));
+
 			if (drawPlayer.inventory[drawPlayer.selectedItem].type == 678)
 				currentColor = Microsoft.Xna.Framework.Color.White;
 
@@ -27051,6 +_,8 @@
 				currentColor = currentColor.MultiplyRGBA(new Microsoft.Xna.Framework.Color(Vector4.Lerp(Vector4.One, new Vector4(0f, 0.12f, 0.16f, 0f), 1f - num99)));
 			}
 
+			goto postSetupVars;
+		heldItemLayer:
 			if (shadow == 0f && !drawPlayer.frozen && ((drawPlayer.itemAnimation > 0 && drawPlayer.inventory[drawPlayer.selectedItem].useStyle != 0) || (drawPlayer.inventory[drawPlayer.selectedItem].holdStyle > 0 && !drawPlayer.pulley)) && drawPlayer.inventory[drawPlayer.selectedItem].type > 0 && !drawPlayer.dead && !drawPlayer.inventory[drawPlayer.selectedItem].noUseGraphic && (!drawPlayer.wet || !drawPlayer.inventory[drawPlayer.selectedItem].noWet)) {
 				_ = drawPlayer.name;
 				Microsoft.Xna.Framework.Color color35 = new Microsoft.Xna.Framework.Color(250, 250, 250, drawPlayer.inventory[drawPlayer.selectedItem].alpha);
@@ -27128,7 +_,9 @@
 							num103 -= itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width;
 						}
 
+						Vector2 holdoutOrigin = Vector2.Zero;
+						ItemLoader.HoldoutOrigin(drawPlayer, ref holdoutOrigin);
-						value = new DrawData(itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type], new Vector2((int)(value2.X - screenPosition.X + origin5.X + (float)num103), (int)(value2.Y - screenPosition.Y + (float)num104)), new Microsoft.Xna.Framework.Rectangle(0, 0, itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width, itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Height), drawPlayer.inventory[drawPlayer.selectedItem].GetAlpha(currentColor), num102, origin5, drawPlayer.inventory[drawPlayer.selectedItem].scale, spriteEffects2, 0);
+						value = new DrawData(itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type], new Vector2((int)(value2.X - screenPosition.X + origin5.X + (float)num103), (int)(value2.Y - screenPosition.Y + (float)num104)), new Microsoft.Xna.Framework.Rectangle(0, 0, itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width, itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Height), drawPlayer.inventory[drawPlayer.selectedItem].GetAlpha(currentColor), num102, origin5 + holdoutOrigin, drawPlayer.inventory[drawPlayer.selectedItem].scale, spriteEffects2, 0);
 						playerDrawData.Add(value);
 						if (drawPlayer.inventory[drawPlayer.selectedItem].type == 3870) {
 							value = new DrawData(glowMaskTexture[238], new Vector2((int)(value2.X - screenPosition.X + origin5.X + (float)num103), (int)(value2.Y - screenPosition.Y + (float)num104)), new Microsoft.Xna.Framework.Rectangle(0, 0, itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width, itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Height), new Microsoft.Xna.Framework.Color(255, 255, 255, 127), num102, origin5, drawPlayer.inventory[drawPlayer.selectedItem].scale, spriteEffects2, 0);
@@ -27219,7 +_,9 @@
 				}
 			}
 
-			if (drawPlayer.body > 0 && drawPlayer.body < 210) {
+			goto layerLoopContinue;
+		armsLayer:
+			if (drawPlayer.body > 0) {
 				Microsoft.Xna.Framework.Rectangle bodyFrame5 = drawPlayer.bodyFrame;
 				int num109 = num2;
 				bodyFrame5.X += num109;
@@ -27271,7 +_,9 @@
 				playerDrawData.Add(value);
 			}
 
-			if (drawPlayer.handon > 0 && drawPlayer.handon < 20) {
+			goto layerLoopContinue;
+		handOnAccLayer:
+			if (drawPlayer.handon > 0) {
 				value = new DrawData(accHandsOnTexture[drawPlayer.handon], new Vector2((int)(Position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)), (int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f)) + drawPlayer.bodyPosition + new Vector2(drawPlayer.bodyFrame.Width / 2, drawPlayer.bodyFrame.Height / 2), drawPlayer.bodyFrame, color12, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
 				value.shader = shader2;
 				playerDrawData.Add(value);
@@ -27289,16 +_,24 @@
 				}
 			}
 
+			goto layerLoopContinue;
+		heldProjFrontLayer:
 			if (drawPlayer.heldProj >= 0 && shadow == 0f && flag3)
 				projectileDrawPosition = playerDrawData.Count;
 
+			goto layerLoopContinue;
+		frontAccLayer:
 			Position.Y -= num;
-			if (!flag8 && drawPlayer.front > 0 && drawPlayer.front < 5 && !drawPlayer.mount.Active) {
+
+			flag8 = (drawPlayer.wings == 0 || drawPlayer.velocity.Y == 0f) && (drawPlayer.inventory[drawPlayer.selectedItem].type == 1178 || drawPlayer.inventory[drawPlayer.selectedItem].type == 779 || drawPlayer.inventory[drawPlayer.selectedItem].type == 1295 || drawPlayer.inventory[drawPlayer.selectedItem].type == 1910 || drawPlayer.turtleArmor || drawPlayer.body == 106 || drawPlayer.body == 170);
+			if (!flag8 && drawPlayer.front > 0 && !drawPlayer.mount.Active) {
 				value = new DrawData(accFrontTexture[drawPlayer.front], new Vector2((int)(Position.X - screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)), (int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f)) + drawPlayer.bodyPosition + new Vector2(drawPlayer.bodyFrame.Width / 2, drawPlayer.bodyFrame.Height / 2), drawPlayer.bodyFrame, color12, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
 				value.shader = shader5;
 				playerDrawData.Add(value);
 			}
 
+			goto layerLoopContinue;
+		miscEffectsFrontLayer:
 			if (drawPlayer.frozen && shadow == 0f) {
 				Microsoft.Xna.Framework.Color color40 = color12;
 				color40.R = (byte)((double)(int)color40.R * 0.55);
@@ -27291,6 +_,7 @@
 				else if (npc[i].type == 548) {
 					DrawCacheNPCsBehindNonSolidTiles.Add(i);
 				}
+				NPCLoader.DrawBehind(Main.npc[i], i);
 			}
 		}
 
@@ -27324,7 +_,7 @@
 					DrawCacheProjsBehindNPCs.Add(i);
 
 				if (projectile[i].type != 636 && projectile[i].type != 598)
-					continue;
+					goto postProjDrawCache;
 
 				bool flag = true;
 				if (projectile[i].ai[0] == 1f) {
@@ -27341,6 +_,9 @@
 
 				if (flag)
 					DrawCacheProjsBehindProjectiles.Add(i);
+				
+			postProjDrawCache:
+				ProjectileLoader.DrawBehind(projectile[i], i, DrawCacheProjsBehindNPCsAndTiles, DrawCacheProjsBehindNPCs, DrawCacheProjsBehindProjectiles, DrawCacheProjsOverWiresUI);
 			}
 		}
 
@@ -27421,6 +_,8 @@
 				}
 			}
 
+			goto layerLoopContinue;
+		postDraw:
 			if (rotation != 0f) {
 				Vector2 value23 = Position - screenPosition + rotationOrigin;
 				Vector2 value24 = drawPlayer.position + rotationOrigin;
@@ -27461,6 +_,7 @@
 
 			return;
 		IL_68ff:
+		legsLayer:
 			if (drawPlayer.legs == 140) {
 				if (!drawPlayer.invis && !drawPlayer.mount.Active) {
 					Texture2D texture3 = extraTexture[73];
@@ -27484,7 +_,7 @@
 					playerDrawData.Add(value);
 				}
 			}
-			else if (drawPlayer.legs > 0 && drawPlayer.legs < 161 && (drawPlayer.shoe != 15 || drawPlayer.wearsRobe)) {
+			else if (drawPlayer.legs > 0 && (drawPlayer.shoe != 15 || drawPlayer.wearsRobe)) {
 				if (!drawPlayer.invis) {
 					value = new DrawData(armorLegTexture[drawPlayer.legs], new Vector2((int)(Position.X - screenPosition.X - (float)(drawPlayer.legFrame.Width / 2) + (float)(drawPlayer.width / 2)), (int)(Position.Y - screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.legFrame.Height + 4f)) + drawPlayer.legPosition + vector2, drawPlayer.legFrame, color14, drawPlayer.legRotation, vector2, 1f, spriteEffects, 0);
 					value.shader = shader;
@@ -27552,7 +_,7 @@
 			}
 		}
 
-		protected void DrawItem(Item item, int whoami) {
+		public void DrawItem(Item item, int whoami) {
 			_ = (int)((double)item.position.X + (double)item.width * 0.5) / 16;
 			_ = firstTileX;
 			_ = Lighting.offScreenTiles;
@@ -27578,6 +_,11 @@
 			float scale = 1f;
 			Microsoft.Xna.Framework.Color currentColor = item.GetAlpha(color);
 			ItemSlot.GetItemLight(ref currentColor, ref scale, item);
+			if (!ItemLoader.PreDrawInWorld(item, spriteBatch, color, currentColor, ref num4, ref scale, whoami)) {
+				ItemLoader.PostDrawInWorld(item, spriteBatch, color, currentColor, num4, scale, whoami);
+				return;
+			}
+
 			float num5 = item.height - itemTexture[item.type].Height;
 			float num6 = item.width / 2 - itemTexture[item.type].Width / 2;
 			if (item.type >= 71 && item.type <= 74) {
@@ -27661,6 +_,9 @@
 			else if (item.type == 3779) {
 				spriteBatch.Draw(itemTexture[item.type], new Vector2(item.position.X - screenPosition.X + (float)(itemTexture[item.type].Width / 2) + num6, item.position.Y - screenPosition.Y + (float)(itemTexture[item.type].Height / 2) + num5 + 2f), new Microsoft.Xna.Framework.Rectangle(0, 0, itemTexture[item.type].Width, itemTexture[item.type].Height), currentColor, num4, new Vector2(itemTexture[item.type].Width / 2, itemTexture[item.type].Height / 2), scale, SpriteEffects.None, 0f);
 			}
+			else if (ItemLoader.animations.Contains(item.type)) {
+				ItemLoader.DrawAnimatedItem(item, whoami, color, currentColor, num4, scale);
+			}
 			else {
 				spriteBatch.Draw(itemTexture[item.type], new Vector2(item.position.X - screenPosition.X + (float)(itemTexture[item.type].Width / 2) + num6, item.position.Y - screenPosition.Y + (float)(itemTexture[item.type].Height / 2) + num5 + 2f), new Microsoft.Xna.Framework.Rectangle(0, 0, itemTexture[item.type].Width, itemTexture[item.type].Height), currentColor, num4, new Vector2(itemTexture[item.type].Width / 2, itemTexture[item.type].Height / 2), scale, SpriteEffects.None, 0f);
 				if (item.color != default(Microsoft.Xna.Framework.Color))
@@ -27669,6 +_,8 @@
 				if (item.glowMask != -1)
 					spriteBatch.Draw(glowMaskTexture[item.glowMask], new Vector2(item.position.X - screenPosition.X + (float)(itemTexture[item.type].Width / 2) + num6, item.position.Y - screenPosition.Y + (float)(itemTexture[item.type].Height / 2) + num5 + 2f), new Microsoft.Xna.Framework.Rectangle(0, 0, itemTexture[item.type].Width, itemTexture[item.type].Height), new Microsoft.Xna.Framework.Color(250, 250, 250, item.alpha), num4, new Vector2(itemTexture[item.type].Width / 2, itemTexture[item.type].Height / 2), scale, SpriteEffects.None, 0f);
 			}
+
+			ItemLoader.PostDrawInWorld(item, spriteBatch, color, currentColor, num4, scale, whoami);
 		}
 
 		protected void DrawRain() {
@@ -27785,13 +_,19 @@
 					}
 
 					Microsoft.Xna.Framework.Color newColor = Lighting.GetColor((int)((double)dust.position.X + 4.0) / 16, (int)((double)dust.position.Y + 4.0) / 16);
-					if (dust.type == 6 || dust.type == 15 || (dust.noLight && dust.type < 86 && dust.type > 91) || (dust.type >= 59 && dust.type <= 64))
+					if (dust.type == 6 || dust.type == 15 || dust.type >= 59 && dust.type <= 64)//TODO: why this?
 						newColor = Microsoft.Xna.Framework.Color.White;
 
 					newColor = dust.GetAlpha(newColor);
 					if (dust.type == 213)
 						scale = 1f;
 
+						ModDust modDust = ModDust.GetDust(dust.type);
+						if (modDust != null) {
+							modDust.Draw(dust, newColor, scale);
+							continue;
+						}
+
 					spriteBatch.Draw(dustTexture, dust.position - screenPosition, dust.frame, newColor, dust.rotation, new Vector2(4f, 4f), scale, SpriteEffects.None, 0f);
 					if (dust.color != default(Microsoft.Xna.Framework.Color))
 						spriteBatch.Draw(dustTexture, dust.position - screenPosition, dust.frame, dust.GetColor(newColor), dust.rotation, new Vector2(4f, 4f), scale, SpriteEffects.None, 0f);
@@ -28188,7 +_,11 @@
 			Microsoft.Xna.Framework.Color textColor = new Microsoft.Xna.Framework.Color(num, num, num, num);
 			bool flag = InGameUI.CurrentState is UIVirtualKeyboard && PlayerInput.UsingGamepad;
 			int lineAmount;
+			/*
 			string[] array = Utils.WordwrapString(npcChatText, fontMouseText, 460, 10, out lineAmount);
+			*/
+			var snippets = Utils.WordwrapStringSmart(npcChatText, Microsoft.Xna.Framework.Color.White, fontMouseText, 460, 10);
+			lineAmount = snippets.Count;
 			if (editSign) {
 				textBlinkerCount++;
 				if (textBlinkerCount >= 20) {
@@ -28201,17 +_,35 @@
 				}
 
 				if (textBlinkerState == 1)
+					/*
 					array[lineAmount] += "|";
+					*/
+					snippets[lineAmount - 1].Add(new TextSnippet("|", Microsoft.Xna.Framework.Color.White, 1f));
 
 				instance.DrawWindowsIMEPanel(new Vector2(screenWidth / 2, 90f), 0.5f);
 			}
 
+			/*
 			lineAmount++;
+			*/
 			spriteBatch.Draw(chatBackTexture, new Vector2(screenWidth / 2 - chatBackTexture.Width / 2, 100f), new Microsoft.Xna.Framework.Rectangle(0, 0, chatBackTexture.Width, (lineAmount + 1) * 30), color, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 			spriteBatch.Draw(chatBackTexture, new Vector2(screenWidth / 2 - chatBackTexture.Width / 2, 100 + (lineAmount + 1) * 30), new Microsoft.Xna.Framework.Rectangle(0, chatBackTexture.Height - 30, chatBackTexture.Width, 30), color, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
+			TextSnippet hoveredTextSnippet = null;
 			for (int i = 0; i < lineAmount; i++) {
+				/*
 				if (array[i] != null)
 					Utils.DrawBorderStringFourWay(spriteBatch, fontMouseText, array[i], 170 + (screenWidth - 800) / 2, 120 + i * 30, textColor, Microsoft.Xna.Framework.Color.Black, Vector2.Zero);
+				*/
+				int hoveredSnippet;
+				ChatManager.DrawColorCodedStringWithShadow(spriteBatch, fontMouseText, snippets[i].ToArray(), new Vector2((float)(170 + (screenWidth - 800) / 2), (float)(120 + i * 30)), 0, Vector2.Zero, Vector2.One, out hoveredSnippet, -1);
+				if (hoveredSnippet > -1)
+					hoveredTextSnippet = snippets[i][hoveredSnippet];
+			}
+
+			if (hoveredTextSnippet != null) {
+				hoveredTextSnippet.OnHover();
+				if (mouseLeft && mouseLeftRelease)
+					hoveredTextSnippet.OnClick();
 			}
 
 			Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle(screenWidth / 2 - chatBackTexture.Width / 2, 100, chatBackTexture.Width, (lineAmount + 2) * 30);
@@ -28368,6 +_,9 @@
 						num16 = 1;
 				}
 
+				reason = Language.GetTextValue("tModLoader.DefaultNurseCantHealChat");
+				canHeal = PlayerHooks.ModifyNurseHeal(player[myPlayer], npc[player[myPlayer].talkNPC], ref health, ref removeDebuffs, ref reason);
+				PlayerHooks.ModifyNursePrice(player[myPlayer], npc[player[myPlayer].talkNPC], health, removeDebuffs, ref num16);
 				if (num16 < 0)
 					num16 = 0;
 
@@ -28699,9 +_,13 @@
 			string focusText = "";
 			string focusText2 = "";
 			int num4 = player[myPlayer].statLifeMax2 - player[myPlayer].statLife;
-			for (int j = 0; j < 22; j++) {
+			for (int j = 0; j < Player.MaxBuffs; j++) {
 				int num5 = player[myPlayer].buffType[j];
-				if (debuff[num5] && player[myPlayer].buffTime[j] > 60 && num5 != 28 && num5 != 34 && num5 != 87 && num5 != 89 && num5 != 21 && num5 != 86 && num5 != 199)
+				if (debuff[num5] && player[myPlayer].buffTime[j] > 60 && BuffLoader.CanBeCleared(num5))
 					num4 += 100;
 			}
 
+			int health = LocalPlayer.statLifeMax2 - LocalPlayer.statLife;
+			bool removeDebuffs = true;
+			string reason = "";
+			bool canHeal = true;
@@ -28847,5 +_,6 @@
 				}
 			}
 
+			NPCLoader.SetChatButtons(ref focusText, ref focusText2);
 			if (!flag) {
 				DrawNPCChatButtons(num, textColor, lineAmount, focusText, focusText2);
@@ -28882,10 +_,15 @@
 					else
 						IngameFancyUI.OpenVirtualKeyboard(1);
 				}
 				else if (NPCID.Sets.IsTownPet[npc[player[myPlayer].talkNPC].type]) {
 					player[myPlayer].PetAnimal(player[myPlayer].talkNPC);
 				}
+
+				if (!NPCLoader.PreChatButtonClicked(true))
+					return;
+
+				NPCLoader.OnChatButtonClicked(true);
-				else if (npc[player[myPlayer].talkNPC].type == 369) {
+				if (npc[player[myPlayer].talkNPC].type == 369) {
 					npcChatCornerItem = 0;
 					SoundEngine.PlaySound(12);
 					bool flag2 = false;
@@ -29125,10 +_,14 @@
 
 					SoundEngine.PlaySound(12);
 					if (num4 > 0) {
+						if (!canHeal) {
+							npcChatText = reason;
+							return;
+						}
 						if (player[myPlayer].BuyItem(num4)) {
 							AchievementsHelper.HandleNurseService(num4);
 							SoundEngine.PlaySound(SoundID.Item4);
-							player[myPlayer].HealEffect(player[myPlayer].statLifeMax2 - player[myPlayer].statLife);
+							player[myPlayer].HealEffect(health, true);
 							if ((double)player[myPlayer].statLife < (double)player[myPlayer].statLifeMax2 * 0.25)
 								npcChatText = Lang.dialog(227);
 							else if ((double)player[myPlayer].statLife < (double)player[myPlayer].statLifeMax2 * 0.5)
@@ -29138,14 +_,18 @@
 							else
 								npcChatText = Lang.dialog(230);
 
-							player[myPlayer].statLife = player[myPlayer].statLifeMax2;
-							for (int l = 0; l < 22; l++) {
+							player[myPlayer].statLife += health;
+							if (!removeDebuffs) // no indent for better patching
+								goto skipDebuffRemoval;
+							for (int k = 0; k < Player.MaxBuffs; k++) {
 								int num24 = player[myPlayer].buffType[l];
-								if (debuff[num24] && player[myPlayer].buffTime[l] > 0 && num24 != 28 && num24 != 34 && num24 != 87 && num24 != 89 && num24 != 21 && num24 != 86 && num24 != 199) {
+								if (debuff[num24] && player[myPlayer].buffTime[l] > 0 && BuffLoader.CanBeCleared(num24)) {
 									player[myPlayer].DelBuff(l);
 									l = -1;
 								}
 							}
+						skipDebuffRemoval:
+							PlayerHooks.PostNurseHeal(LocalPlayer, npc[LocalPlayer.talkNPC], health, removeDebuffs, num4);
 						}
 						else {
 							int num25 = rand.Next(3);
@@ -29187,6 +_,10 @@
 				if (!npcChatFocus3 || player[myPlayer].talkNPC < 0)
 					return;
 
+				if (!NPCLoader.PreChatButtonClicked(false))
+					return;
+
+				NPCLoader.OnChatButtonClicked(false);
 				if (npc[player[myPlayer].talkNPC].type == 20) {
 					SoundEngine.PlaySound(12);
 					npcChatText = Lang.GetDryadWorldStatusDialog();
@@ -29678,7 +_,7 @@
 					num22++;
 
 				int num24 = 46;
-				for (int n = 0; n < 22; n++) {
+				for (int n = 0; n < Player.MaxBuffs; n++) {
 					int num25 = Main.player[myPlayer].buffType[n];
 					if (num25 != 0) {
 						int num26 = num21 / num22;
@@ -29937,10 +_,12 @@
 						if (num34 == 147)
 							bannerMouseOver = true;
 
+						int rare = 0;
 						if (meleeBuff[num34])
-							MouseTextHackZoom(buffName, -10, 0, buffTooltip);
-						else
-							MouseTextHackZoom(buffName, buffTooltip);
+							rare = -10;
+
+						BuffLoader.ModifyBuffTip(num34, ref buffTooltip, ref rare);
+						MouseTextHackZoom(buffName, rare, 0);
 					}
 				}
 			}
@@ -30079,13 +_,23 @@
 
 							mouseReforge = true;
 							Main.player[myPlayer].mouseInterface = true;
-							if (mouseLeftRelease && mouseLeft && Main.player[myPlayer].BuyItem(num60)) {
+							if (mouseLeftRelease && mouseLeft && player[myPlayer].CanBuyItem(num60) && ItemLoader.PreReforge(reforgeItem)) {
+								player[myPlayer].BuyItem(num60);
 								bool favorited = reforgeItem.favorited;
-								reforgeItem.netDefaults(reforgeItem.netID);
-								reforgeItem.Prefix(-2);
+								int stack = reforgeItem.stack; // keep the stack, stacked weps support (i.e. light discs)
+																	//vanilla doesnt have a good way of resetting prefix, so it creates a new item entirely
+																	//before we roll te prefix, we simply copy over the old mod data before doing so
+								Item r = new Item();
+								r.netDefaults(reforgeItem.netID);
+								//TODO: method only used here, probably a poor implementation - noted by CB
+								r = r.CloneWithModdedDataFrom(reforgeItem);
+								r.Prefix(-2);
+								reforgeItem = r.Clone();
 								reforgeItem.position.X = Main.player[myPlayer].position.X + (float)(Main.player[myPlayer].width / 2) - (float)(reforgeItem.width / 2);
 								reforgeItem.position.Y = Main.player[myPlayer].position.Y + (float)(Main.player[myPlayer].height / 2) - (float)(reforgeItem.height / 2);
 								reforgeItem.favorited = favorited;
+								reforgeItem.stack = stack;
+								ItemLoader.PostReforge(reforgeItem);
 								ItemText.NewText(reforgeItem, reforgeItem.stack, noStack: true);
 								PlaySound(SoundID.Item37);
 							}
@@ -30143,6 +_,7 @@
 
 							num72++;
 							spriteBatch.DrawString(fontMouseText, Lang.GetMapObjectName(MapHelper.TileToLookup(recipe[availableRecipe[num71]].requiredTile[num73], 0)), new Vector2(num69, num70 + 118 + num74), color4, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
+							// TODO: investigate this new thing: Main.spriteBatch.DrawString(Main.fontMouseText, Lang.mapLegend.FromType(Main.recipe[Main.availableRecipe[num72]].requiredTile[num74]), new Vector2((float)num70, (float)(num71 + 118 + num75)), color3, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 						}
 
 						if (recipe[availableRecipe[num71]].needWater) {
@@ -30160,11 +_,17 @@
 					string text = Lang.inter[46].Value + ": ";
 					if (reforgeItem.type > 0) {
 						int num58 = reforgeItem.value;
-						if (player[myPlayer].discount)
+						bool canApplyDiscount = true;
+						if (!ItemLoader.ReforgePrice(reforgeItem, ref num58, ref canApplyDiscount))
+							goto skipVanillaPricing;
+						
+						if (canApplyDiscount && LocalPlayer.discount)
 							num58 = (int)((double)num58 * 0.8);
 
 						num58 = (int)((double)num58 * player[myPlayer].currentShoppingSettings.PriceAdjustment);
 						num58 /= 3;
+						
+					skipVanillaPricing:
 						string text2 = "";
 						int num59 = 0;
 						int num60 = 0;
@@ -30189,7 +_,7 @@
 				}
 			}
 
-			if (!InReforgeMenu) {
+			if (!InReforgeMenu && !HidePlayerCraftingMenu) {
 				UILinkPointNavigator.Shortcuts.CRAFT_CurrentRecipeBig = -1;
 				UILinkPointNavigator.Shortcuts.CRAFT_CurrentRecipeSmall = -1;
 				if (numAvailableRecipes > 0)
@@ -30387,6 +_,7 @@
 				}
 			}
 
+			HidePlayerCraftingMenu = false;
 			if (recBigList) {
 				UILinkPointNavigator.Shortcuts.CRAFT_CurrentRecipeBig = -1;
 				UILinkPointNavigator.Shortcuts.CRAFT_CurrentRecipeSmall = -1;
@@ -30823,7 +_,8 @@
 					if (!item[i].active)
 						continue;
 
-					Microsoft.Xna.Framework.Rectangle value = new Microsoft.Xna.Framework.Rectangle((int)((double)item[i].position.X + (double)item[i].width * 0.5 - (double)itemTexture[item[i].type].Width * 0.5), (int)(item[i].position.Y + (float)item[i].height - (float)itemTexture[item[i].type].Height), itemTexture[item[i].type].Width, itemTexture[item[i].type].Height);
+					Microsoft.Xna.Framework.Rectangle value = itemAnimations[item[i].type]?.GetFrame(itemTexture[item[i].type]) ?? itemTexture[item[i].type].Bounds;
+					value.Location = new Microsoft.Xna.Framework.Point((int)(item[i].position.X + item[i].width * 0.5 - value.Width * 0.5), (int)(item[i].position.Y + item[i].height - value.Height));
 					if (rectangle.Intersects(value)) {
 						player[myPlayer].showItemIcon = false;
 						string text = item[i].AffixName();
@@ -31014,6 +_,11 @@
 				inventoryScale = 0.755f;
 				num += 5;
 			}
+			else if ((player[myPlayer].chest == -1 || npcShop == -1) && trashSlotOffset != Point16.Zero) {
+				num += trashSlotOffset.X;
+				num2 += trashSlotOffset.Y;
+				inventoryScale = 0.755f;
+			}
 
 			new Microsoft.Xna.Framework.Color(150, 150, 150, 150);
 			if (mouseX >= num && (float)mouseX <= (float)num + (float)TextureAssets.InventoryBack.Width() * inventoryScale && mouseY >= num2 && (float)mouseY <= (float)num2 + (float)TextureAssets.InventoryBack.Height() * inventoryScale && !PlayerInput.IgnoreMouseInterface) {
@@ -31250,8 +_,11 @@
 			mouseItem.position.Y = player[myPlayer].position.Y + (float)(player[myPlayer].height / 2) - (float)(mouseItem.height / 2);
 			PopupText.NewText(PopupTextContext.ItemCraft, mouseItem, r.createItem.stack);
 			r.Create();
-			if (mouseItem.type > 0 || r.createItem.type > 0)
+			if (mouseItem.type > 0 || r.createItem.type > 0) {
+				RecipeHooks.OnCraft(mouseItem, r);
+				ItemLoader.OnCraft(mouseItem, r);
 				SoundEngine.PlaySound(7);
+			}
 		}
 
 		private static void DrawPVPIcons() {
@@ -31474,7 +_,7 @@
 					bool flag2 = flag || (SmartInteractShowingGenuine && SmartInteractNPC == k);
 					if (flag2 && ((npc[k].type != 85 && npc[k].type != 341 && npc[k].type != 629 && npc[k].aiStyle != 87) || npc[k].ai[0] != 0f) && npc[k].type != 488) {
 						bool flag3 = SmartInteractShowingGenuine && SmartInteractNPC == k;
-						if (npc[k].townNPC || npc[k].type == 105 || npc[k].type == 106 || npc[k].type == 123 || npc[k].type == 354 || npc[k].type == 376 || npc[k].type == 579 || npc[k].type == 453 || npc[k].type == 589) {
+						if (NPCLoader.CanChat(npc[k], npc[k].townNPC || npc[k].type == 105 || npc[k].type == 106 || npc[k].type == 123 || npc[k].type == 354 || npc[k].type == 376 || npc[k].type == 579 || npc[k].type == 453 || npc[k].type == 589)) {
 							Microsoft.Xna.Framework.Rectangle rectangle2 = new Microsoft.Xna.Framework.Rectangle((int)(player[myPlayer].position.X + (float)(player[myPlayer].width / 2) - (float)(Player.tileRangeX * 16)), (int)(player[myPlayer].position.Y + (float)(player[myPlayer].height / 2) - (float)(Player.tileRangeY * 16)), Player.tileRangeX * 16 * 2, Player.tileRangeY * 16 * 2);
 							Microsoft.Xna.Framework.Rectangle value4 = new Microsoft.Xna.Framework.Rectangle((int)npc[k].position.X, (int)npc[k].position.Y, npc[k].width, npc[k].height);
 							if (rectangle2.Intersects(value4))
@@ -31650,14 +_,14 @@
 			recBigList = false;
 			int num = -1;
 			int num2 = 11;
-			for (int i = 0; i < 22; i++) {
+			for (int i = 0; i < Player.MaxBuffs; i++) {
 				if (player[myPlayer].buffType[i] > 0) {
 					_ = player[myPlayer].buffType[i];
 					int x = 32 + i * 38;
 					int num3 = 76;
 					if (i >= num2) {
-						x = 32 + (i - num2) * 38;
-						num3 += 50;
+						x = 32 + Math.Abs(i % 11) * 38;
+						num3 += 50 * (i / 11);
 					}
 
 					num = DrawBuffIcon(num, i, x, num3);
@@ -31677,10 +_,11 @@
 				if (num4 == 147)
 					bannerMouseOver = true;
 
+				int rare = 0;
 				if (meleeBuff[num4])
+					rare = -10;
-					MouseTextHackZoom(buffName, -10, 0, buffTooltip);
-				else
-					MouseTextHackZoom(buffName, buffTooltip);
+				BuffLoader.ModifyBuffTip(num4, ref buffTooltip, ref rare);
+				MouseTextHackZoom(buffName, rare, 0, buffTooltip);
 			}
 		}
 
@@ -32733,7 +_,9 @@
 				if (InGuideCraftMenu)
 					InGuideCraftMenu = false;
 
+				if (wasOpen)
-				Recipe.FindRecipes();
+					Recipe.FindRecipes();
+
 				InReforgeMenu = false;
 			}
 
@@ -33018,7 +_,9 @@
 				SetupDrawInterfaceLayers();
 
 			PlayerInput.SetZoom_UI();
+			List<GameInterfaceLayer> interfaceLayers = new List<GameInterfaceLayer>(_gameInterfaceLayers);
+			ModHooks.ModifyInterfaceLayers(interfaceLayers);
-			using (List<GameInterfaceLayer>.Enumerator enumerator = _gameInterfaceLayers.GetEnumerator()) {
+			using (List<GameInterfaceLayer>.Enumerator enumerator = interfaceLayers.GetEnumerator()) {
 				while (enumerator.MoveNext() && enumerator.Current.Draw()) {
 				}
 			}
@@ -33064,6 +_,8 @@
 				num3 += 70;
 				text2 = $"{txDataType[j]:0,0}";
 				spriteBatch.DrawString(fontMouseText, text2, new Vector2(num3, num4), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), scale, SpriteEffects.None, 0f);
+
+				ModNet.DrawModDiagnoseNet();
 			}
 		}
 
@@ -33323,6 +_,8 @@
 		}
 
 		private void DrawInterface_33_MouseText() {
+			// TODO - UI Sorting and selective disable support -  move this to new one between 32 and 33
+			ModHooks.PostDrawInterface(spriteBatch);
 			if (mouseItem.stack <= 0)
 				mouseItem.type = 0;
 
@@ -33471,7 +_,8 @@
 		}
 
 		private static void DrawInterface_26_InterfaceLogic3() {
 			bool flag = playerInventory;
+			bool wasOpen = playerInventory;
 			if (player[myPlayer].dead)
 				playerInventory = false;
 
@@ -33804,6 +_,11 @@
 						if (type == 439 || type == 370)
 							scale = 1.5f;
 
+						if (!NPCLoader.DrawHealthBar(npc[num2], ref scale)) {
+							npc[num2].position -= npc[num2].visualOffset;
+							continue;
+						}
+
 						if ((!expertMode || type != 266) && ((type != 439 && type != 440) || npc[num2].ai[0] != 5f)) {
 							if (type >= 134 && type <= 136) {
 								scale = 1.5f;
@@ -35149,8 +_,8 @@
 
 			Microsoft.Xna.Framework.Color color2 = new Microsoft.Xna.Framework.Color((byte)((float)(int)color.R * ((float)LogoA / 255f)), (byte)((float)(int)color.G * ((float)LogoA / 255f)), (byte)((float)(int)color.B * ((float)LogoA / 255f)), (byte)((float)(int)color.A * ((float)LogoA / 255f)));
 			Microsoft.Xna.Framework.Color color3 = new Microsoft.Xna.Framework.Color((byte)((float)(int)color.R * ((float)LogoB / 255f)), (byte)((float)(int)color.G * ((float)LogoB / 255f)), (byte)((float)(int)color.B * ((float)LogoB / 255f)), (byte)((float)(int)color.A * ((float)LogoB / 255f)));
-			spriteBatch.Draw(logoTexture, new Vector2(screenWidth / 2, 100f), new Microsoft.Xna.Framework.Rectangle(0, 0, logoTexture.Width, logoTexture.Height), color2, logoRotation, new Vector2(logoTexture.Width / 2, logoTexture.Height / 2), logoScale, SpriteEffects.None, 0f);
+			spriteBatch.Draw(logoTexture, new Vector2(screenWidth / 2, 120f), new Microsoft.Xna.Framework.Rectangle(0, 0, logoTexture.Width, logoTexture.Height), color2, logoRotation, new Vector2(logoTexture.Width / 2, logoTexture.Height / 2), logoScale, SpriteEffects.None, 0f);
-			spriteBatch.Draw(logo2Texture, new Vector2(screenWidth / 2, 100f), new Microsoft.Xna.Framework.Rectangle(0, 0, logoTexture.Width, logoTexture.Height), color3, logoRotation, new Vector2(logoTexture.Width / 2, logoTexture.Height / 2), logoScale, SpriteEffects.None, 0f);
+			spriteBatch.Draw(logo2Texture, new Vector2(screenWidth / 2, 120f), new Microsoft.Xna.Framework.Rectangle(0, 0, logoTexture.Width, logoTexture.Height), color3, logoRotation, new Vector2(logoTexture.Width / 2, logoTexture.Height / 2), logoScale, SpriteEffects.None, 0f);
 			if (dayTime) {
 				LogoA += 2;
 				if (LogoA > 255)
@@ -35211,8 +_,16 @@
 
 			if (!loadedEverything) {
 				array[0] = true;
-				array9[0] = string.Format("   {0}  {1,-10}", Language.GetTextValue("UI.LoadingCode"), Program.LoadedPercentage.ToString("P0"));
+				array9[0] = string.Format("{0}  {1}", Language.GetTextValue("UI.LoadingCode"), Program.LoadedPercentage.ToString("P0"));
 				num5 = 1;
+				if (!ModLoader.ModLoader.skipLoad) {
+					array9[1] = "Click to skip loading mods";
+					array7[1] = 0.5f;
+					num5 = 2;
+					if(selectedMenu == 1) {
+						ModLoader.ModLoader.skipLoad = true;
+					}
+				}
 			}
 			else if (menuMode == 1212) {
 				array9[0] = Lang.menu[102].Value;
@@ -35718,6 +_,9 @@
 				if (SkyManager.Instance["Slime"].IsActive())
 					SkyManager.Instance["Slime"].Deactivate();
 
+				// tmod added.
+				Filters.Scene.DeactivateAll();
+				SkyManager.Instance.DeactivateAll();
 				int num12 = 0;
 				num5 = 5;
 				num4 = 60;
@@ -35967,7 +_,7 @@
 				if (selectedMenu >= 1) {
 					changeTheTitle = true;
 					LanguageManager.Instance.SetLanguage(selectedMenu);
-					menuMode = 0;
+					menuMode = Interface.loadModsID;
 					SoundEngine.PlaySound(10);
 					SaveSettings();
 				}
@@ -36073,11 +_,15 @@
 					str += IntPtr.Size == 8 ? " -x64": " -x86";
 #endif
 					str = ((!ActiveWorldFileData.IsCloudSave) ? (str + " -world \"" + worldPathName + "\"") : (str + " -cloudworld \"" + worldPathName + "\""));
+					str += " -modpath \"" + ModOrganizer.modPath + "\"";
+					if (showServerConsole)
+						str += " -showserverconsole";
+
 					tServer = new Process();
 #if WINDOWS
-					tServer.StartInfo.FileName = "TerrariaServer.exe";
+					tServer.StartInfo.FileName = "tModLoaderServer.exe";
 #else
-					tServer.StartInfo.FileName = "TerrariaServer";
+					tServer.StartInfo.FileName = "tModLoaderServer";
 #endif
 					tServer.StartInfo.Arguments = str;
 					if (libPath != "") {
@@ -36105,7 +_,7 @@
 					menuMode = 14;
 				}
 			}
-			else if (netMode == 1 || menuMode == 14) {
+			else if (netMode == 1 && menuMode < 10000 && menuMode != 888 || menuMode == 14) {
 				num5 = 2;
 				array9[0] = statusText;
 				array[0] = true;
@@ -36188,15 +_,22 @@
 			else if (menuMode == 200) {
 				num5 = 3;
 				array9[0] = Lang.menu[9].Value;
+				if (WorldIO.customDataFail != null)
+					array9[0] = WorldIO.customDataFail.modName + ": " + array9[0];
+
 				array[0] = true;
 				num2 -= 30;
 				array4[1] = 70;
 				array4[2] = 50;
 				array9[1] = Lang.menu[10].Value;
 				array9[2] = Lang.menu[6].Value;
+				if (WorldIO.customDataFail != null)
+					array9[2] = Language.GetTextValue("tModLoader.OpenLogs");
+
 				if (selectedMenu == 1) {
 					if (FileUtilities.Exists(worldPathName + ".bak", ActiveWorldFileData.IsCloudSave)) {
 						FileUtilities.Move(worldPathName + ".bak", worldPathName, ActiveWorldFileData.IsCloudSave);
+						WorldIO.LoadBackup(worldPathName, ActiveWorldFileData.IsCloudSave);
 						SoundEngine.PlaySound(10);
 						WorldGen.playWorld();
 						menuMode = 10;
@@ -36220,7 +_,7 @@
 					}
 
 					tServer.StartInfo.UseShellExecute = false;
-					tServer.StartInfo.CreateNoWindow = true;
+					tServer.StartInfo.CreateNoWindow = !showServerConsole;
 					if (SocialAPI.Network != null)
 						SocialAPI.Network.LaunchLocalServer(tServer, MenuServerMode);
 					else
@@ -36241,7 +_,10 @@
 				array4[3] = 30;
 				array4[4] = 70;
 				array4[5] = 70;
+				array4[6] = 70;
-				num5 = 6;
+				num5 = 7;
+				array9[6] = Language.GetTextValue(showServerConsole ? "tModLoader.MPShowServerConsoleYes" : "tModLoader.MPShowServerConsoleNo");
+				array7[6] = 0.5f;
 				array9[0] = Lang.menu[135].Value;
 				array9[4] = Lang.menu[144].Value;
 				array9[5] = Lang.menu[5].Value;
@@ -36302,6 +_,10 @@
 						menuMode = 6;
 						SoundEngine.PlaySound(11);
 						break;
+					case 6:
+						showServerConsole = !showServerConsole;
+						SoundEngine.PlaySound(12, -1, -1, 1, 1f, 0f);
+						break;
 				}
 			}
 			else if (menuMode == 15) {
@@ -36346,13 +_,23 @@
 				if (selectedMenu == 2 || flag5) {
 					flag5 = false;
 					SoundEngine.PlaySound(11);
+					if (WorldIO.customDataFail == null)
-					menuMode = 0;
+						menuMode = 0;
+					else {
+						Logging.tML.Error(Language.GetTextValue("tModLoader.WorldIODataException"), WorldIO.customDataFail.InnerException);
+						SoundEngine.PlaySound(SoundID.MenuOpen);
+						Process.Start(Logging.LogPath);
+					}
+
 					netMode = 0;
 				}
 			}
 			else if (menuMode == 201) {
 				num5 = 3;
 				array9[0] = Lang.menu[9].Value;
+				if (WorldIO.customDataFail != null)
+					array9[0] = WorldIO.customDataFail.modName + ": " + array9[0];
+
 				array[0] = true;
 				array[1] = true;
 				num2 -= 30;
@@ -36360,9 +_,21 @@
 				array4[2] = 50;
 				array9[1] = Lang.menu[11].Value;
 				array9[2] = Lang.menu[5].Value;
+				if (WorldIO.customDataFail != null)
+					array9[2] = Language.GetTextValue("tModLoader.OpenLogs");
+
 				if (selectedMenu == 2 || flag5) {
 					flag5 = false;
 					SoundEngine.PlaySound(11);
+					if (WorldIO.customDataFail == null) {
+						menuMode = 0;
+					}
+					else {
+						Logging.tML.Error(Language.GetTextValue("tModLoader.WorldIODataException"), WorldIO.customDataFail.InnerException);
+						SoundEngine.PlaySound(SoundID.MenuOpen);
+						Process.Start(Logging.LogPath);
+					}
+
 					menuMode = 0;
 					netMode = 0;
 				}
@@ -36410,15 +_,18 @@
 					menuMode = 12;
 				}
 
+				if (!Steam.IsSteamApp) {
 				num11++;
 				array9[num11] = Lang.menu[131].Value;
 				if (selectedMenu == num11) {
 					SoundEngine.PlaySound(10);
 					MenuUI.SetState(AchievementsMenu);
 					menuMode = 888;
+					}
 				}
 
 				num11++;
+				Interface.AddMenuButtons(this, selectedMenu, array9, array7, ref num2, ref num4, ref num12, ref num5);
 				array9[num11] = Language.GetText("UI.ResourcePacks").Value;
 				if (selectedMenu == num11) {
 					SoundEngine.PlaySound(10);
@@ -37036,6 +_,7 @@
 					num2 = 210;
 					num4 = 37;
 					num5 = 8;
+					num5++; // Room for tModLoader settings option.
 					array4[num5 - 1] = 8;
 					for (int num19 = 0; num19 < num5; num19++) {
 						array7[num19] = 0.75f;
@@ -37091,6 +_,13 @@
 					}
 
 					num20++;
+					array9[num20] = Language.GetTextValue("tModLoader.tModLoaderSettings");
+					if (selectedMenu == num20) {
+						SoundEngine.PlaySound(SoundID.MenuOpen);
+						menuMode = Interface.tModLoaderSettingsID;
+					}
+
+					num20++;
 					array9[num20] = Lang.menu[5].Value;
 					if (selectedMenu == num20 || flag5) {
 						flag5 = false;
@@ -38124,6 +_,9 @@
 						netMode = 0;
 					}
 				}
+				else {
+					Interface.ModLoaderMenus(this, selectedMenu, array9, array7, array4, ref num2, ref num4, ref num5, ref flag5);
+				}
 			}
 
 			if (menuMode == 888) {
@@ -38647,6 +_,7 @@
 
 			bool flag11 = false;
 			for (int num95 = 0; num95 < num5; num95++) {
+				//patch file: num5, array9, num95
 				if (array9[num95] == null)
 					continue;
 
@@ -38744,6 +_,7 @@
 
 					num104 *= array7[num95];
 					if (!array8[num95])
+						//patch file: array9, array7, array4, num2, num4
 						spriteBatch.DrawString(FontAssets.DeathText.Value, array9[num95], new Vector2(num3 + num102 + array5[num95], (float)(num2 + num4 * num95 + num103) + origin.Y * array7[num95] + (float)array4[num95]), color11, 0f, origin, num104, SpriteEffects.None, 0f);
 					else
 						spriteBatch.DrawString(FontAssets.DeathText.Value, array9[num95], new Vector2(num3 + num102 + array5[num95], (float)(num2 + num4 * num95 + num103) + origin.Y * array7[num95] + (float)array4[num95]), color11, 0f, new Vector2(0f, origin.Y), num104, SpriteEffects.None, 0f);
@@ -38855,9 +_,25 @@
 					if (num107 == 3)
 						num109 = 2;
 
+					string supportMessage = Language.GetTextValue("tModLoader.PatreonSupport");
+					string patreonShortURL = @"patreon.com/tModLoader";
+					bool showPatreon = !Steam.IsSteamApp;
+					string drawVersion = versionNumber + Environment.NewLine + ModLoader.ModLoader.versionedName + (showPatreon ? Environment.NewLine + supportMessage : "");
-					Vector2 origin2 = FontAssets.MouseText.Value.MeasureString(versionNumber);
+					Vector2 origin2 = FontAssets.MouseText.Value.MeasureString(drawVersion);
 					origin2.X *= 0.5f;
 					origin2.Y *= 0.5f;
-					spriteBatch.DrawString(FontAssets.MouseText.Value, versionNumber, new Vector2(origin2.X + (float)num108 + 10f, (float)screenHeight - origin2.Y + (float)num109 - 2f), color12, 0f, origin2, 1f, SpriteEffects.None, 0f);
+					spriteBatch.DrawString(FontAssets.MouseText.Value, drawVersion, new Vector2(origin2.X + num108 + 10f, screenHeight - origin2.Y + num109 - 2f), color12, 0f, origin2, 1f, SpriteEffects.None, 0f);
+					if (num107 == 4)
+						color12 = new Microsoft.Xna.Framework.Color(127, 191, 191, 76);
+
+					if (showPatreon) {
+						origin2 = fontMouseText.MeasureString(supportMessage);
+						Vector2 urlSize = fontMouseText.MeasureString(patreonShortURL);
+						spriteBatch.DrawString(fontMouseText, patreonShortURL, new Vector2(origin2.X + num108 + 10f, screenHeight - origin2.Y + num109 - 2f), color12, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
+						if (num107 == 4 && mouseLeftRelease && mouseLeft && new Microsoft.Xna.Framework.Rectangle((int)origin2.X + 10, screenHeight - (int)urlSize.Y - 2, (int)urlSize.X, (int)origin2.Y).Contains(new Microsoft.Xna.Framework.Point(mouseX, mouseY)) && hasFocus) {
+							PlaySound(SoundID.MenuOpen);
+							Process.Start("https://www.patreon.com/tModLoader");
+						}
+					}
 				}
 			}
@@ -38890,6 +_,21 @@
 			else
 				mouseRightRelease = true;
 
+			if (mouseMiddle)
+				mouseMiddleRelease = false;
+			else
+				mouseMiddleRelease = true;
+
+			if (mouseXButton1)
+				mouseXButton1Release = false;
+			else
+				mouseXButton1Release = true;
+
+			if (mouseXButton2)
+				mouseXButton2Release = false;
+			else
+				mouseXButton2Release = true;
+
 			if (menuMode == num)
 				GamepadMainMenuHandler.LastDrew = num;
 		}
@@ -39479,6 +_,7 @@
 			if (SceneMetrics.MushroomTileCount > SceneMetrics.MushroomTileMax)
 				num8 = 2;
 
+			UgBgStyleLoader.ChooseStyle(ref num8);
 			if (num8 != undergroundBackground) {
 				oldUndergroundBackground = undergroundBackground;
 				undergroundBackground = num8;
@@ -39684,6 +_,7 @@
 					array3[5] = 127;
 
 				array3[6] = 185 + hellBackStyle;
+				UgBgStyleLoader.FillTextureArray(num9, array3);
 				LoadBackground(array3[0]);
 				LoadBackground(array3[1]);
 				LoadBackground(array3[2]);
@@ -41907,15 +_,29 @@
 				DrawMapFullscreenBackground(screenPosition, screenWidth, screenHeight);
+				/* Map texture drawing replaced by an adaptive drawing below, as mod worlds sometimes aren't regular sizes.
 				Microsoft.Xna.Framework.Rectangle destinationRectangle = new Microsoft.Xna.Framework.Rectangle((int)num27, (int)num28, (int)num29, (int)num30);
 				spriteBatch.Draw(TextureAssets.Map.Value, destinationRectangle, Microsoft.Xna.Framework.Color.White);
+				*/
+				int x = (int)(num + mapFullscreenScale * 10);
+				int y = (int)(num2 + mapFullscreenScale * 10);
+				int width = (int)((maxTilesX - 40) * mapFullscreenScale);
+				int height = (int)((maxTilesY - 40) * mapFullscreenScale);
+				var destinationRectangle = new Microsoft.Xna.Framework.Rectangle(x, y, width, height);
+				spriteBatch.Draw(mapTexture, destinationRectangle, new Microsoft.Xna.Framework.Rectangle(40, 4, 848, 240), Microsoft.Xna.Framework.Color.White);
+				int edgeWidth = (int)(40 * mapFullscreenScale * 5);
+				int edgeHeight = (int)(4 * mapFullscreenScale * 5);
+				destinationRectangle = new Microsoft.Xna.Framework.Rectangle(x - edgeWidth, y - edgeHeight, edgeWidth, height + 2 * edgeHeight);
+				spriteBatch.Draw(mapTexture, destinationRectangle, new Microsoft.Xna.Framework.Rectangle(0, 0, 40, 248), Microsoft.Xna.Framework.Color.White);
+				destinationRectangle = new Microsoft.Xna.Framework.Rectangle(x + width, y - edgeHeight, edgeWidth, height + 2 * edgeHeight);
+				spriteBatch.Draw(mapTexture, destinationRectangle, new Microsoft.Xna.Framework.Rectangle(888, 0, 40, 248), Microsoft.Xna.Framework.Color.White);
 				if (mouseLeft && mouseLeftRelease) {
 					double totalSeconds = gameTime.TotalGameTime.TotalSeconds;
 					if (totalSeconds - _lastPingMouseDownTime < 0.5 && Vector2.Distance(MouseScreen, _lastPingMousePosition) < 2f)
 						TriggerPing((MouseScreen - new Vector2(num - 10f * num5, num2 - 10f * num5)) / num5);
 
 					_lastPingMouseDownTime = totalSeconds;
 					_lastPingMousePosition = MouseScreen;
 				}
 
 				if (num5 < 1f) {
 					spriteBatch.End();
 					spriteBatch.Begin();
@@ -42020,7 +_,7 @@
 			float num40 = (float)textureMaxHeight * num5;
 			float num41 = num;
 			float num42 = 0f;
-			for (int k = 0; k <= 4; k++) {
+			for (int k = 0; k <= mapTargetX - 1; k++) {
 				if (!((float)((k + 1) * textureMaxWidth) > num7) || !((float)(k * textureMaxWidth) < num7 + num9))
 					continue;
 
@@ -42409,6 +_,7 @@
 						}
 					}
 					else if (type >= num99 && type < num99 + num100) {
+						//patch file: num91, num92
 						Tile tile5 = Main.tile[num91, num92];
 						if (tile5 != null) {
 							int num109 = num92;
@@ -42422,6 +_,7 @@
 					}
 					else {
 						text = Lang.GetMapObjectName(type);
+						text = Lang._mapLegendCache.FromTile(Map[num91, num92], num91, num92);
 					}
 				}
 
@@ -42587,6 +_,7 @@
 				}
 
 				spriteBatch.Draw(TextureAssets.MapIcon[num138].Value, new Vector2(num136, num137), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.MapIcon[num138].Width(), TextureAssets.MapIcon[num138].Height()), new Microsoft.Xna.Framework.Color(num139, num139, num139, num139), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
+				ModHooks.PostDrawFullscreenMap(ref text);
 				DrawCursor(DrawThickCursor());
 			}
 
@@ -42621,11 +_,16 @@
 		private static void DrawMapFullscreenBackground(Vector2 screenPosition, int screenWidth, int screenHeight) {
+			Texture2D modTexture = PlayerHooks.GetMapBackgroundImage(LocalPlayer);
+			if (modTexture != null) {
+				spriteBatch.Draw(modTexture, new Microsoft.Xna.Framework.Rectangle(0, 0, screenWidth, screenHeight), Microsoft.Xna.Framework.Color.White);
+				return;
+			}
 			Asset<Texture2D> asset = TextureAssets.MapBGs[0];
 			int num = -1;
 			Microsoft.Xna.Framework.Color color = Microsoft.Xna.Framework.Color.White;
 			int wall = tile[(int)(player[myPlayer].Center.X / 16f), (int)(player[myPlayer].Center.Y / 16f)].wall;
 			if (screenPosition.Y > (float)((maxTilesY - 232) * 16)) {
 				num = 2;
 			}
 			else if (player[myPlayer].ZoneDungeon) {
 				num = 4;
 			}
@@ -42678,8 +_,8 @@
 					return;
 				}
 
-				for (int i = 0; i < 11; i++) {
+				for (int i = 0; i < WaterStyleLoader.WaterStyleCount; i++) {
-					if (i != 1 && liquidAlpha[i] > 0f)
+					if (i != 1 && i != 11 && liquidAlpha[i] > 0f)
 						DrawWater(bg, i, liquidAlpha[i]);
 				}
 
@@ -42795,7 +_,7 @@
 			}
 
 			if (!(liquidAlpha[10] > 0f))
-				return;
+				goto postWaterDraw;
 
 			if (bg) {
 				if (waterStyle < 10)
@@ -43283,6 +_,11 @@
 
 					LoadWall(wall);
 					int num9 = wallFrame[wall] * 180;
+					if (!WallLoader.PreDraw(j, i, wall, spriteBatch)) {
+						WallLoader.PostDraw(j, i, wall, spriteBatch);
+						continue;
+					}
+					
 					if (Lighting.NotRetro && !wallLight[wall] && (tile.wall < 88 || tile.wall > 93) && !WorldGen.SolidTile(tile)) {
 						Texture2D texture = (!canDrawColorWall(j, i)) ? wallTexture[tile.wall] : wallAltTexture[tile.wall, tile.wallColor()];
 						if (tile.wall == 44)
@@ -43325,9 +_,12 @@
 
 						if (flag3)
 							spriteBatch.Draw(wallOutlineTexture, new Vector2(j * 16 - (int)screenPosition.X, i * 16 - (int)screenPosition.Y + 14) + value, new Microsoft.Xna.Framework.Rectangle(0, 14, 16, 2), color, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
+
+						WallLoader.PostDraw(j, i, wall, spriteBatch);
 					}
 				}
 			}
+			// extra context
 
 			DrawTileCracks(2);
 			TimeLogger.DrawTime(2, stopwatch.Elapsed.TotalMilliseconds);
@@ -43347,4 +_,5 @@
 			if (!isBackground) {
 				waterStyle = CalculateWaterStyle();
+				WaterStyleLoader.ChooseWaterStyle(ref waterStyle);
 				for (int i = 0; i < 13; i++) {
 					if (IsLiquidStyleWater(waterStyle)) {
@@ -43349,8 +_,9 @@
 				for (int i = 0; i < 13; i++) {
 					if (IsLiquidStyleWater(waterStyle)) {
 						if (waterStyle != i)
 							liquidAlpha[i] = Math.Max(liquidAlpha[i] - 0.2f, 0f);
 						else
 							liquidAlpha[i] = Math.Min(liquidAlpha[i] + 0.2f, 1f);
 					}
 				}
+				WaterStyleLoader.UpdateLiquidAlphas();
@@ -43379,9 +_,12 @@
 			}
 
 			DrawWater(isBackground, waterStyle, flag ? liquidAlpha[waterStyle] : 1f);
+			
+		postWaterDraw:
+			WaterStyleLoader.DrawWatersToScreen(isBackground);
 		}
 
-		protected void DrawWater(bool bg = false, int Style = 0, float Alpha = 1f) {
+		protected internal void DrawWater(bool bg = false, int Style = 0, float Alpha = 1f) {
 			if (!Lighting.NotRetro) {
 				oldDrawWater(bg, Style, Alpha);
 				return;
@@ -44701,7 +_,9 @@
 		}
 
 		public void LoadBackground(int i) {
-			if (i >= 0 && TextureAssets.Background[i].State == AssetState.NotLoaded) {
+			// sometimes when updating GraphicsProfile from Reach to HiDef, the device is re-created rather than reset
+			// This happens early, and the background loading texture may be disposed
+			if (i >= 0 && (TextureAssets.Background[i].State == AssetState.NotLoaded || TextureAssets.Background[i].IsDisposed)) {
 				Assets.Request<Texture2D>(TextureAssets.Background[i].Name);
 				backgroundWidth[i] = TextureAssets.Background[i].Width();
 				backgroundHeight[i] = TextureAssets.Background[i].Height();
@@ -44927,12 +_,15 @@
 						backColor.G = (byte)((float)(int)backColor.G * bgAlpha2[5]);
 						backColor.B = (byte)((float)(int)backColor.B * bgAlpha2[5]);
 						backColor.A = (byte)((float)(int)backColor.A * bgAlpha2[5]);
+						// extra context
 						if (bgAlpha2[5] > 0f) {
 							LoadBackground(42);
 							for (int num17 = 0; num17 < bgLoops; num17++) {
 								spriteBatch.Draw(backgroundTexture[42], new Vector2(bgStart + bgW * num17, bgTop), new Microsoft.Xna.Framework.Rectangle(0, 0, backgroundWidth[42], backgroundHeight[42]), backColor, 0f, default(Vector2), bgScale, SpriteEffects.None, 0f);
 							}
 						}
+
+						SurfaceBgStyleLoader.DrawMiddleTexture();
 					}
 				}
 
@@ -45331,7 +_,8 @@
 				DrawSurfaceBG_DrawBackMountainsLayer(246);
 			}
 
+			SurfaceBgStyleLoader.DrawFarTexture();
 			SkyManager.Instance.DrawToDepth(spriteBatch, 5f);
 		}
 
 		private void DrawSurfaceBG_BackMountainsStep2(int pushBGTopHack) {
@@ -45550,8 +_,9 @@
 						}
 					}
 
+					//patch file: num21
 					if (!(bgAlpha[num21] > 0f) || num21 != 9)
-						continue;
+						goto finishDrawCloseBackground;
 
 					float num44 = (float)(int)backColor.A / 255f;
 					Microsoft.Xna.Framework.Color color2 = backColor;
@@ -45598,6 +_,8 @@
 					spriteBatch.Draw(TextureAssets.Background[bgTexIndexes[2]].Value, new Vector2(bgStartX + bgWidthScaled * k, bgTopY), GetBackgroundRect(bgTexIndexes[2]), colorOfSurfaceBackgroundsModified, 0f, default(Vector2), bgScale, SpriteEffects.None, 0f);
 				}
 			}
 
 			SkyManager.Instance.DrawToDepth(spriteBatch, 1f);
+		finishDrawCloseBackground:
+			SurfaceBgStyleLoader.DrawCloseBackground(num21);
 		}
@@ -46591,7 +_,7 @@
 
 				bool flag2 = false;
 				bool flag3 = false;
-				if (tile[x, y].type == 10) {
+				if (TileLoader.IsClosedDoor(tile[x, y])) {
 					flag2 = false;
 				}
 				else if (tileSolid[tile[x, y].type] && !tileSolidTop[tile[x, y].type]) {
@@ -46656,6 +_,7 @@
 		}
 
 		protected override void Draw(GameTime gameTime) {
+			try {
 			if (!_isDrawingOrUpdating && IsGraphicsDeviceAvailable) {
 				_isDrawingOrUpdating = true;
 				EnsureRenderTargetContent();
@@ -46665,7 +_,12 @@
 
 				Assets.TransferCompletedAssets();
 				_isDrawingOrUpdating = false;
 			}
+			}
+			catch (Exception e) {
+				Logging.Terraria.Error(e);
+				throw;
+			}
 		}
 
 		private void DoDraw(GameTime gameTime) {
@@ -46966,8 +_,8 @@
 			UpdateAtmosphereTransparencyToSkyColor();
 			base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Black);
 			base.Draw(gameTime);
-			float val = (float)screenWidth / MinimumZoomComparerX;
-			float val2 = (float)screenHeight / MinimumZoomComparerY;
 			ForcedMinimumZoom = Math.Max(Math.Max(1f, val), val2);
+			float val = screenWidth / (ModLoader.ModLoader.removeForcedMinimumZoom ? MinimumZoomComparerX : 8192f);
+			float val2 = screenHeight / (ModLoader.ModLoader.removeForcedMinimumZoom ? MinimumZoomComparerY : 8192f);
 			GameViewMatrix.Effects = ((!gameMenu && player[myPlayer].gravDir != 1f) ? SpriteEffects.FlipVertically : SpriteEffects.None);
 			BackgroundViewMatrix.Effects = GameViewMatrix.Effects;
@@ -46978,6 +_,7 @@
 			else
 				Rasterizer = RasterizerState.CullClockwise;
 
+			ModHooks.ModifyTransformMatrix(ref GameViewMatrix);
 			bool flag = !drawToScreen && netMode != 2 && !gameMenu && !mapFullscreen && Lighting.NotRetro && Terraria.Graphics.Effects.Filters.Scene.CanCapture();
 			if (flag)
 				Terraria.Graphics.Effects.Filters.Scene.BeginCapture(screenTarget, Microsoft.Xna.Framework.Color.Black);
@@ -47036,6 +_,6 @@
 			spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, Rasterizer, null, GameViewMatrix.TransformationMatrix);
 			DrawBackgroundBlackFill();
 			spriteBatch.End();
-			Overlays.Scene.Draw(spriteBatch, RenderLayers.Landscape);
+			Overlays.Scene.Draw(spriteBatch, RenderLayers.Landscape, true);
 			spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, Rasterizer, null, UIScaleMatrix);
 			if (gameMenu || netMode == 2) {
@@ -47132,8 +_,9 @@
 
 			TimeLogger.DetailedDrawReset();
 			spriteBatch.End();
+			WorldHooks.PostDrawTiles();
 			TimeLogger.DetailedDrawTime(35);
 			HasInteractibleObjectThatIsNotATile = false;
 			SortDrawCacheWorms();
 			DrawSuperSpecialProjectiles(DrawCacheFirstFractals);
 			DrawCachedProjs(DrawCacheProjsBehindProjectiles);
@@ -47203,7 +_,7 @@
 			ScreenObstruction.Draw(spriteBatch);
 			TimeLogger.DetailedDrawReset();
 			spriteBatch.End();
-			Overlays.Scene.Draw(spriteBatch, RenderLayers.All);
+			Overlays.Scene.Draw(spriteBatch, RenderLayers.All, true);
 			if (flag)
 				Terraria.Graphics.Effects.Filters.Scene.EndCapture(null, screenTarget, screenTargetSwap, Microsoft.Xna.Framework.Color.Black);
 
@@ -47426,6 +_,21 @@
 			else
 				mouseRightRelease = true;
 
+			if (mouseMiddle)
+				mouseMiddleRelease = false;
+			else
+				mouseMiddleRelease = true;
+
+			if (mouseXButton1)
+				mouseXButton1Release = false;
+			else
+				mouseXButton1Release = true;
+
+			if (mouseXButton2)
+				mouseXButton2Release = false;
+			else
+				mouseXButton2Release = true;
+
 			if (!PlayerInput.Triggers.Current.MouseRight && !PlayerInput.Triggers.Current.MouseLeft && !preventStackSplitReset)
 				stackSplit = 0;
 
@@ -47449,6 +_,7 @@
 			int num3 = bgStyle;
 			int num4 = (int)((screenPosition.X + (float)(screenWidth / 2)) / 16f);
 			num3 = (((double)(screenPosition.Y / 16f) < worldSurface + 10.0 && (num4 < 380 || num4 > maxTilesX - 380)) ? 4 : ((shroomTiles > 100) ? 9 : ((sandTiles > 1000) ? (player[myPlayer].ZoneCorrupt ? 5 : (player[myPlayer].ZoneCrimson ? 5 : ((!player[myPlayer].ZoneHoly) ? 2 : 5))) : (player[myPlayer].ZoneHoly ? 6 : (player[myPlayer].ZoneCorrupt ? 1 : (player[myPlayer].ZoneCrimson ? 8 : (player[myPlayer].ZoneJungle ? 3 : (player[myPlayer].ZoneSnow ? 7 : 0))))))));
+			SurfaceBgStyleLoader.ChooseStyle(ref num3);
 			int num5 = 30;
 			tranSpeed = 0.05f;
 			if (num3 == 0)
@@ -47502,6 +_,7 @@
 						else if (player.scope)
 							num5 = 0.5f;
 
+						PlayerHooks.ModifyZoom(LocalPlayer, ref num5);
 						Vector2 vector3 = (MouseScreen - new Vector2(screenWidth, screenHeight) / 2f) / (new Vector2(screenWidth, screenHeight) / 2f);
 						num4 = 48f;
 						if (vector3 != Vector2.Zero && num5 != -1f) {
@@ -47527,9 +_,11 @@
 					if (num7 < 0)
 						num7 = 0;
 
-					vector2.X = (float)(num6 - screenWidth / 2) / 1.25f;
-					vector2.Y = (float)(num7 - screenHeight / 2) / 1.25f;
+					float zoom = 0.8f;
+					PlayerHooks.ModifyZoom(LocalPlayer, ref zoom);
+					vector2.X = (num6 - screenWidth / 2) * zoom;
+					vector2.Y = (num7 - screenHeight / 2) * zoom;
 					flag = true;
 				}
 				else if (Main.player[myPlayer].inventory[Main.player[myPlayer].selectedItem].type == 1254 && mouseRight) {
 					int num8 = mouseX;
@@ -47546,9 +_,11 @@
 					if (num9 < 0)
 						num9 = 0;
 
-					vector2.X = (float)(num8 - screenWidth / 2) / 1.5f;
-					vector2.Y = (float)(num9 - screenHeight / 2) / 1.5f;
+					float zoom = 3f/2f;
+					PlayerHooks.ModifyZoom(LocalPlayer, ref zoom);
+					vector2.X = (num8 - screenWidth / 2) * zoom;
+					vector2.Y = (num9 - screenHeight / 2) * zoom;
 					flag = true;
 				}
 				else if (Main.player[myPlayer].inventory[Main.player[myPlayer].selectedItem].type == 1299 && Main.player[myPlayer].selectedItem != 58) {
 					int num10 = mouseX;
@@ -47565,9 +_,11 @@
 					if (num11 < 0)
 						num11 = 0;
 
-					vector2.X = (float)(num10 - screenWidth / 2) / 1.5f;
-					vector2.Y = (float)(num11 - screenHeight / 2) / 1.5f;
+					float zoom = 3f/2f;
+					PlayerHooks.ModifyZoom(LocalPlayer, ref zoom);
+					vector2.X = (num10 - screenWidth / 2) * zoom;
+					vector2.Y = (num11 - screenHeight / 2) * zoom;
 					flag = true;
 				}
 				else if (Main.player[myPlayer].scope && mouseRight) {
 					int num12 = mouseX;
@@ -47584,9 +_,33 @@
 					if (num13 < 0)
 						num13 = 0;
 
+					float zoom = 0.5f;
+					PlayerHooks.ModifyZoom(player[myPlayer], ref zoom);
-					vector2.X = (float)(num12 - screenWidth / 2) / 2f;
+					vector2.X = (num12 - screenWidth / 2) * zoom;
-					vector2.Y = (float)(num13 - screenHeight / 2) / 2f;
+					vector2.Y = (num13 - screenHeight / 2) * zoom;
+				}
+				else {
+					int mouseXClamped = mouseX;
+					int mouseYClamped = mouseY;
+					if (mouseXClamped > screenWidth)
+						mouseXClamped = screenWidth;
+
+					if (mouseXClamped < 0)
+						mouseXClamped = 0;
+
+					if (mouseYClamped > screenHeight)
+						mouseYClamped = screenHeight;
+
+					if (mouseYClamped < 0)
+						mouseYClamped = 0;
+
+					float zoom = -1f;
+					PlayerHooks.ModifyZoom(LocalPlayer, ref zoom);
+					if (zoom != -1f) {
+						vector2.X = (mouseXClamped - screenWidth / 2) * zoom;
+						vector2.Y = (mouseYClamped - screenHeight / 2) * zoom;
+					}
 					flag = true;
 				}
 			}
 
@@ -47631,6 +_,7 @@
 
 			screenPosition.X = (int)screenPosition.X;
 			screenPosition.Y = (int)screenPosition.Y;
+			PlayerHooks.ModifyScreenPosition(LocalPlayer);
 			ClampScreenPositionToWorld();
 		}
 
@@ -47660,7 +_,7 @@
 				if (bgAlpha2[6] > 1f)
 					bgAlpha2[6] = 1f;
 			}
-			else {
+			else if (bgStyle == 0 || bgStyle == 3) {
 				bgAlpha2[0] += tranSpeed;
 				if (bgAlpha2[0] > 1f)
 					bgAlpha2[0] = 1f;
@@ -47834,9 +_,11 @@
 			tileColor.G = (byte)((colorOfTheSkies.R + colorOfTheSkies.G + colorOfTheSkies.B + colorOfTheSkies.G * 7) / 10);
 			tileColor.B = (byte)((colorOfTheSkies.R + colorOfTheSkies.G + colorOfTheSkies.B + colorOfTheSkies.B * 7) / 10);
 			tileColor = SkyManager.Instance.ProcessTileColor(tileColor);
+			// TODO: Add in white and white2 as sunColor and moonColor
+			ModHooks.ModifySunLight(ref tileColor, ref colorOfTheSkies);
 		}
 
 		private static void UpdateAtmosphereTransparencyToSkyColor() {
 			float num = maxTilesX / 4200;
 			num *= num;
 			atmo = (float)((double)((screenPosition.Y + (float)(screenHeight / 2)) / 16f - (65f + 10f * num)) / (worldSurface / 5.0));
@@ -48573,4 +_,13 @@
 			UpdateBGVisibility_BackLayer(null, null);
 			UpdateBGVisibility_FrontLayer(null, null);
+			if (bgStyle < SurfaceBgStyleLoader.vanillaSurfaceBgStyleCount) {
+				for (int i = SurfaceBgStyleLoader.vanillaSurfaceBgStyleCount; i < bgAlphaFrontLayer.Length /*SurfaceBackgroundStyleLoader.SurfaceStyleCount*/; i++) {
+					bgAlphaFrontLayer[i] -= tranSpeed;
+					if (bgAlphaFrontLayer[i] < 0f)
+						bgAlphaFrontLayer[i] = 0f;
+				}
+			}
+
+			SurfaceBgStyleLoader.ModifyFarFades(bgStyle, bgAlphaFrontLayer, tranSpeed);
 			try {
 				DrawSurfaceBG();
@@ -48994,5 +_,13 @@
 			}
 		}
 
+		public static void NewText(string newText, Microsoft.Xna.Framework.Color color) {
+			NewText(newText, color.R, color.G, color.B);
+		}
+
+		public static void NewText(object o, Microsoft.Xna.Framework.Color color = default) {
+			NewText(o.ToString(), color.R, color.G, color.B);
+		}
+
 		public static void NewText(string newText, byte R = byte.MaxValue, byte G = byte.MaxValue, byte B = byte.MaxValue) {
 			chatMonitor.NewText(newText, R, G, B);
@@ -49005,6 +_,9 @@
 		}
 
 		public static SoundEffectInstance PlaySound(int type, int x = -1, int y = -1, int Style = 1, float volumeScale = 1f, float pitchOffset = 0f) {
+			if (waveBank == null) //supress extra exceptions from audio engine failing to load
+				return null;
+
 #if !WINDOWS
 			// lock statement without creating a block. Formatter wants to indent the whole method if we wrap it with another block.
 			// could create another method _PlaySound or do_PlaySound, but we try to avoid annoying people who want to hook methods
@@ -49068,6 +_,9 @@
 
 					SoundEffectInstance soundEffectInstance = null;
 					switch (type) {
+						case int _ when SoundLoader.PlayModSound(type, num, num2, num3, ref soundEffectInstance):
+							// Modders can return null to not play anything (prevent overlap), return the original sound effect (restarts sound), or return a new sound effect instance to allow overlapping sound.
+							break;
 						case 0: {
 								int num16 = rand.Next(3);
 								soundInstanceDig[num16].Stop();
@@ -49570,18 +_,49 @@
 							soundEffectInstance.Pan = num3;
 							trackableSoundInstances[num] = soundEffectInstance;
 							break;
+						// TODO, trackable sounds? verify working. return soundEffectInstance
+						case SoundLoader.customSoundType:
+							SoundLoader.customSoundInstances[num].Stop();
+							SoundLoader.customSoundInstances[num] = SoundLoader.customSounds[num].CreateInstance();
+							SoundLoader.customSoundInstances[num].Volume = num2;
+							SoundLoader.customSoundInstances[num].Pan = num3;
+							//Main.PlaySoundInstance(SoundLoader.customSoundInstances[num]);
+							soundEffectInstance = SoundLoader.customSoundInstances[num];
+							break;
 					}
 
 					if (soundEffectInstance != null) {
-						soundEffectInstance.Pitch += pitchOffset;
-						soundEffectInstance.Volume *= volumeScale;
+						soundEffectInstance.Pitch = Utils.Clamp(soundEffectInstance.Pitch + pitchOffset, -1, 1);
+						soundEffectInstance.Volume = Utils.Clamp(soundEffectInstance.Volume * volumeScale, 0, 1);
 						PlaySoundInstance(soundEffectInstance);
 					}
 
+					if (type >= 30 && type <= 35 || type == 39) {
+						if (ambientError > 0)
+							ambientError--;
+					}
+					else {
+						if (soundError > 0)
+							soundError--;
+					}
 					return soundEffectInstance;
 				}
 			}
 			catch {
+				if (type >= 30 && type <= 35 || type == 39) {
+					ambientError++;
+					if (ambientError >= 100) {
+						ambientError = 0;
+						ambientVolume = 0f;
+					}
+				}
+				else {
+					soundError++;
+					if (soundError >= 100) {
+						soundError = 0;
+						soundVolume = 0f;
+					}
+				}
 			}
 #if !WINDOWS
 			finally {
@@ -49621,7 +_,7 @@
 					num++;
 			}
 
-			for (int j = 0; j < 663; j++) {
+			for (int j = 0; j < townNPCCanSpawn.Length; j++) {
 				townNPCCanSpawn[j] = false;
 			}
 
@@ -49771,6 +_,7 @@
 						continue;
 
 					if (num32 < 2000000000) {
+						//patch file: num27
 						if (player[l].inventory[m].type == 71)
 							num32 += player[l].inventory[m].stack;
 
@@ -49990,4 +_,7 @@
 
 			WorldGen.prioritizedTownNPCType = num36;
+
+			// TODO, see what changed and see if we need to do anything to integrate mod npc
+			NPCLoader.CanTownNPCSpawn(num26, num27);
 		}
 
@@ -50174,7 +_,9 @@
 			}
 
 #if WINDOWS
+			// appears redundant. Just causes the window to fight the user when attempting to resize too small
+			// with this disabled, the window will just snap back to minimum size when released
-			if (!fullscreen && !flag2) {
+			/*if (!fullscreen && !flag2) {
 				if (form.ClientSize.Width < graphics.PreferredBackBufferWidth) {
 					width = form.ClientSize.Width;
 					flag2 = true;
@@ -50184,10 +_,11 @@
 					height = form.ClientSize.Height;
 					flag2 = true;
 				}
-			}
+			}*/
 #endif
 
-			width &= 0x7FFFFFFE;
-			height &= 0x7FFFFFFE;
+			// unknown justification for preventing odd window sizes. Causes excessive device resets.
+			// width &= 2147483646;
+			// height &= 2147483646;
 			width = Math.Max(width, minScreenW);
 			height = Math.Max(height, minScreenH);
@@ -50207,7 +_,9 @@
 				screenHeight = height;
 				graphics.PreferredBackBufferWidth = screenWidth;
 				graphics.PreferredBackBufferHeight = screenHeight;
+				if (width != num3 || height != num4) //avoid resetting the device when it doesn't need resizing
-				graphics.ApplyChanges();
+					graphics.ApplyChanges();
+
 				PlayerInput.CacheOriginalScreenDimensions();
 				FixUIScale();
 				if (Main.OnResolutionChanged != null)
