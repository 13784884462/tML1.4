--- src/Terraria/Terraria/Main.cs
+++ src/tModLoader/Terraria/Main.cs
@@ -33,6 +_,7 @@
 using System.Threading;
 using System.Threading.Tasks;
 using System.Windows.Forms;
+using Steamworks;
 using Terraria.Achievements;
 using Terraria.Audio;
 using Terraria.Chat;
@@ -67,6 +_,12 @@
 using Terraria.IO;
 using Terraria.Localization;
 using Terraria.Map;
+using Terraria.ModLoader;
+using Terraria.ModLoader.Audio;
+using Terraria.ModLoader.Core;
+using Terraria.ModLoader.Engine;
+using Terraria.ModLoader.IO;
+using Terraria.ModLoader.UI;
 using Terraria.Net;
 using Terraria.ObjectData;
 using Terraria.Social;
@@ -205,7 +_,7 @@
 		public static NPCHeadRenderer BossNPCHeadRenderer = null;
 		public static string versionNumber = "v1.4.0.3";
 		public static string versionNumber2 = "v1.4.0.3";
-		public static string SavePath = Program.LaunchParameters.ContainsKey("-savedirectory") ? Program.LaunchParameters["-savedirectory"] : Platform.Get<IPathService>().GetStoragePath("Terraria");
+		public static string SavePath = Program.SavePath;
 		public static bool AnnouncementBoxDisabled;
 		public static int AnnouncementBoxRange = -1;
 		public static string AutogenSeedName;
@@ -221,7 +_,7 @@
 		public static bool getGoodWorld = false;
 		public static Vector2 destroyerHB = new Vector2(0f, 0f);
 		public static FavoritesFile LocalFavoriteData = new FavoritesFile(SavePath + "/favorites.json", isCloud: false);
-		public static FavoritesFile CloudFavoritesData = new FavoritesFile("/favorites.json", isCloud: true);
+		public static FavoritesFile CloudFavoritesData = new FavoritesFile("/ModLoader/favorites.json", true);
 		public static FileMetadata WorldFileMetadata;
 		public static FileMetadata MapFileMetadata;
 		public static PingMapLayer Pings = new PingMapLayer();
@@ -238,6 +_,7 @@
 		public static bool drawBackGore;
 		public static ulong LobbyId = 0uL;
 		private static Microsoft.Xna.Framework.Color[] _mapColorCacheArray = new Microsoft.Xna.Framework.Color[30000];
+		public static bool playerLoaded => ActivePlayersCount > 0;
 		public WaterfallManager waterfallManager;
 		public static WorldSections sectionManager;
 		public static bool ServerSideCharacter;
@@ -250,6 +_,7 @@
 		public static ulong TileFrameSeed = (ulong)Guid.NewGuid().GetHashCode();
 		private static ulong _drawCycleCounter;
 		public static ContentManager ShaderContentManager;
+		internal static TMLContentManager AlternateContentManager;
 		public static Ref<Effect> ScreenShaderRef = new Ref<Effect>();
 		public static Ref<Effect> PixelShaderRef = new Ref<Effect>();
 		public static Ref<Effect> TileShaderRef = new Ref<Effect>();
@@ -259,6 +_,8 @@
 		public static bool UseHeatDistortion = true;
 		public static int npcStreamSpeed = 30;
 		public static int musicError;
+		public static int soundError;
+		public static int ambientError;
 		public static bool dedServFPS;
 		public static int dedServCount1;
 		public static int dedServCount2;
@@ -404,6 +_,9 @@
 		private static ConcurrentQueue<Action> _mainThreadActions = new ConcurrentQueue<Action>();
 		public static bool mouseLeft;
 		public static bool mouseRight;
+		public static bool mouseMiddle;
+		public static bool mouseXButton1;
+		public static bool mouseXButton2;
 		public static bool isMouseLeftConsumedByUI = false;
 		public static float essScale = 1f;
 		public static int essDir = -1;
@@ -517,13 +_,13 @@
 		public static int wofDrawAreaBottom;
 		public static int wofDrawFrameIndex;
 		public static int offScreenRange = 200;
-		private RenderTarget2D backWaterTarget;
+		public RenderTarget2D backWaterTarget;
 		public static RenderTarget2D waterTarget;
-		private RenderTarget2D tileTarget;
+		public RenderTarget2D tileTarget;
-		private RenderTarget2D blackTarget;
+		public RenderTarget2D blackTarget;
-		private RenderTarget2D tile2Target;
+		public RenderTarget2D tile2Target;
-		private RenderTarget2D wallTarget;
+		public RenderTarget2D wallTarget;
-		private RenderTarget2D backgroundTarget;
+		public RenderTarget2D backgroundTarget;
 		public static RenderTarget2D screenTarget;
 		public static RenderTarget2D screenTargetSwap;
 		public static int maxMapUpdates = 250000;
@@ -544,8 +_,8 @@
 		public static bool clearMap;
 		public static int mapTargetX = 5;
 		public static int mapTargetY = 2;
-		private RenderTarget2D[,] mapTarget = new RenderTarget2D[mapTargetX, mapTargetY];
+		public RenderTarget2D[,] mapTarget = new RenderTarget2D[mapTargetX, mapTargetY];
-		private RenderTarget2D mapSectionTexture;
+		public RenderTarget2D mapSectionTexture;
 		public static bool[,] initMap = new bool[mapTargetX, mapTargetY];
 		public static bool[,] mapWasContentLost = new bool[mapTargetX, mapTargetY];
 		public const int numInfoIcons = 13;
@@ -576,12 +_,12 @@
 		private int lastTileX;
 		private int firstTileY;
 		private int lastTileY;
-		private double bgParallax;
+		internal double bgParallax;
-		private int bgStartX;
+		internal int bgStartX;
-		private int bgLoops;
+		internal int bgLoops;
 		private int bgStartY;
 		private int bgLoopsY;
-		private int bgTopY;
+		internal int bgTopY;
 		public static int renderCount = 99;
 		private const int MF_BYPOSITION = 1024;
 		public static GraphicsDeviceManager graphics;
@@ -622,6 +_,7 @@
 		public static bool maxQ = true;
 		public static float gfxQuality = 1f;
 		public static float gfxRate = 0.01f;
+		public static Microsoft.Xna.Framework.Color DiscoColor => new Microsoft.Xna.Framework.Color(DiscoR, DiscoG, DiscoB);
 		public int DiscoStyle;
 		public static int DiscoR = 255;
 		public static int DiscoB;
@@ -665,7 +_,7 @@
 		public const int maxItems = 400;
 		public const int maxProjectiles = 1000;
 		public const int maxNPCs = 200;
-		private static UICharacterSelect _characterSelectMenu = new UICharacterSelect();
+		internal static UICharacterSelect _characterSelectMenu = new UICharacterSelect();
 		private static UIWorldSelect _worldSelectMenu = new UIWorldSelect();
 		public static UIManageControls ManageControlsMenu = new UIManageControls();
 		public static UIAchievementsMenu AchievementsMenu = new UIAchievementsMenu();
@@ -719,7 +_,14 @@
 		public static int LogoA = 255;
 		public static int LogoB;
 		public static bool LogoT;
-		public static string statusText = "";
+		private static string _statusText = "";
+		public static string statusText {
+			get => _statusText;
+			set {
+				Logging.LogStatusChange(_statusText, value);
+				_statusText = value;
+			}
+		}
 		public static string worldName = "";
 		public static int worldID;
 		public static int background;
@@ -802,7 +_,7 @@
 		public static AudioEngine engine;
 		public static SoundBank soundBank;
 		public static WaveBank waveBank;
-		public static Cue[] music = new Cue[89];
+		public static Music[] music = new Music[89];
 		public static bool[] musicNoCrossFade = new bool[89];
 		public static float[] musicFade = new float[89];
 		public static float musicVolume = 1f;
@@ -979,9 +_,14 @@
 			0.75f
 		};
 		public static byte mouseTextColor;
+		public static Microsoft.Xna.Framework.Color mouseTextColorReal
+			=> new Microsoft.Xna.Framework.Color(mouseTextColor / 255f, mouseTextColor / 255f, mouseTextColor / 255f, mouseTextColor / 255f);
 		public static int mouseTextColorChange = 1;
 		public static bool mouseLeftRelease;
 		public static bool mouseRightRelease;
+		public static bool mouseMiddleRelease = false;
+		public static bool mouseXButton1Release = false;
+		public static bool mouseXButton2Release = false;
 		public static bool playerInventory;
 		public static int stackSplit;
 		public static bool preventStackSplitReset;
@@ -997,6 +_,7 @@
 		public static bool recFastScroll;
 		public static bool recBigList;
 		public static int recStart;
+		public static Point16 trashSlotOffset = Point16.Zero;
 		public static Recipe[] recipe = new Recipe[Recipe.maxRecipes];
 		public static int[] availableRecipe = new int[Recipe.maxRecipes];
 		public static float[] availableRecipeY = new float[Recipe.maxRecipes];
@@ -1082,6 +_,7 @@
 		public static bool Support4K = true;
 		public static float MinimumZoomComparerX = 1920f;
 		public static float MinimumZoomComparerY = 1200f;
+		public static bool Support8K = true; // provide option to disable 8k (but leave 4k)
 		private static int _renderTargetMaxSize = 2048;
 		private static GraphicsProfile _selectedGraphicsProfile = GraphicsProfile.Reach;
 		private static GraphicsProfile _currentGraphicsProfile = GraphicsProfile.Reach;
@@ -1091,6 +_,7 @@
 		public static float temporaryGUIScaleSlider = -1f;
 		public static bool temporaryGUIScaleSliderUpdate = false;
 		public static bool InGuideCraftMenu;
+		public static bool HidePlayerCraftingMenu = false;
 		public static bool InReforgeMenu;
 		public static Item HoverItem = new Item();
 		private static int backSpaceCount;
@@ -1112,9 +_,9 @@
 		public static List<WorldFileData> WorldList = new List<WorldFileData>();
 		public static WorldFileData ActiveWorldFileData = new WorldFileData();
 		public static string WorldPath = Path.Combine(SavePath, "Worlds");
-		public static string CloudWorldPath = "worlds";
+		public static string CloudWorldPath = "ModLoader/worlds";
 		public static string PlayerPath = Path.Combine(SavePath, "Players");
-		public static string CloudPlayerPath = "players";
+		public static string CloudPlayerPath = "ModLoader/players";
 		public static Preferences Configuration = new Preferences(SavePath + Path.DirectorySeparatorChar + "config.json");
 		public static Preferences InputProfiles = new Preferences(SavePath + Path.DirectorySeparatorChar + "input profiles.json");
 		public static KeyboardState inputText;
@@ -1808,7 +_,7 @@
 		public static float exitScale = 0.8f;
 		public static bool mouseReforge;
 		public static float reforgeScale = 0.8f;
-		public static Player clientPlayer = new Player();
+		public static Player clientPlayer = new Player(false); // setup inventory is unnecessary
 		public static string getIP = defaultIP;
 		public static string getPort = Convert.ToString(Netplay.ListenPort);
 		public static bool menuMultiplayer;
@@ -1900,6 +_,7 @@
 		public static string oldStatusText = "";
 		public static string autoGenFileLocation = null;
 		public static bool autoShutdown;
+		public static bool showServerConsole = false;
 		private uint previousExecutionState;
 		public static int sundialCooldown;
 		public static bool fastForwardTime;
@@ -1946,16 +_,18 @@
 		private int selectedMenu2 = -1;
 		public static int selectedPlayer = 0;
 		public static int selectedWorld;
-		public static int menuMode;
+		public static int menuMode = Interface.loadModsID;
 		public static int menuSkip;
 		private static bool _needsLanguageSelect = true;
-		private static Item tooltipPrefixComparisonItem = new Item();
+		public static Item tooltipPrefixComparisonItem = new Item();
+		[Obsolete("Use Main.tooltipPrefixComparisonItem instead")]
+		public static ref Item cpItem => ref tooltipPrefixComparisonItem;
 		private MouseTextCache _mouseTextCache;
 		public int textBlinkerCount;
 		public int textBlinkerState;
 		public static string newWorldName = "";
-		private static int[] specX = new int[1000];
+		public static int[] specX = new int[1000];
-		private static int[] specY = new int[1000];
+		public static int[] specY = new int[1000];
 		public TilePaintSystemV2 TilePaintSystem;
 		public TileDrawing TilesRenderer;
 		public WallDrawing WallsRenderer;
@@ -1979,7 +_,7 @@
 		public static Microsoft.Xna.Framework.Color inventoryBack = new Microsoft.Xna.Framework.Color(220, 220, 220, 220);
 		public static bool mouseText;
 		private static int mH;
-		private static int rare;
+		public static int rare;
 		public static int hairStart;
 		private static int oldHairStyle;
 		private static Microsoft.Xna.Framework.Color oldHairColor;
@@ -1991,7 +_,7 @@
 		public static Player dresserInterfaceDummy;
 		private bool _needToSetupDrawInterfaceLayers = true;
 		private List<GameInterfaceLayer> _gameInterfaceLayers;
-		private static GameTime _drawInterfaceGameTime;
+		public static GameTime _drawInterfaceGameTime;
 		private static bool _settingsButtonIsPushedToSide;
 		private static bool _MouseOversCanClear;
 		private static Vector2 _itemIconCacheScreenPosition;
@@ -2047,13 +_,13 @@
 		};
 		private static float backgroundLayerTransitionSpeed = 0.05f;
 		public static float atmo;
-		private static float bgScale = 1f;
+		internal static float bgScale = 1f;
-		private static int bgWidthScaled = (int)(1024f * bgScale);
+		internal static int bgWidthScaled = (int)(1024f * bgScale);
 		public static Microsoft.Xna.Framework.Color ColorOfTheSkies;
-		private static Microsoft.Xna.Framework.Color ColorOfSurfaceBackgroundsBase = Microsoft.Xna.Framework.Color.White;
+		internal static Microsoft.Xna.Framework.Color ColorOfSurfaceBackgroundsBase = Microsoft.Xna.Framework.Color.White;
-		private static Microsoft.Xna.Framework.Color ColorOfSurfaceBackgroundsModified = Microsoft.Xna.Framework.Color.White;
+		internal static Microsoft.Xna.Framework.Color ColorOfSurfaceBackgroundsModified = Microsoft.Xna.Framework.Color.White;
-		private float screenOff;
+		internal float screenOff;
-		private float scAdj;
+		internal float scAdj;
 		private float cTop;
 		private bool _isDrawingOrUpdating;
 		public static List<INeedRenderTargetContent> ContentThatNeedsRenderTargets = new List<INeedRenderTargetContent>();
@@ -2169,6 +_,8 @@
 
 		public static Effect screenShader => ScreenShaderRef.Value;
 
+		public static ulong TileFrameSeed => _tileFrameSeed;
+
 		public static Effect pixelShader => PixelShaderRef.Value;
 
 		public static Effect vertexPixelShader => VertexPixelShaderRef.Value;
@@ -2677,6 +_,7 @@
 			}
 
 			result.X = num;
+			ItemLoader.HoldoutOffset(gravdir, itemtype, ref result);
 			return result;
 		}
 
@@ -2693,6 +_,8 @@
 				itemAnimationsRegistered.Add(index);
 
 			itemAnimations[index] = animation;
+			if (ItemLoader.IsModItem(index))
+				ItemLoader.animations.Add(index);
 		}
 
 		public static void InitializeItemAnimations() {
@@ -2734,11 +_,13 @@
 			}
 		}
 
-		public static void SetGraphicsProfile(GraphicsProfile profile) {
+		private static bool SetGraphicsProfile(GraphicsProfile profile) {
 			if (_currentGraphicsProfile != profile) {
 				_selectedGraphicsProfile = profile;
 				SetGraphicsProfileInternal();
+				return graphics.GraphicsDevice.GraphicsProfile == profile;
 			}
+			return false;
 		}
 
 		private static void SetGraphicsProfileInternal() {
@@ -2746,10 +_,14 @@
 			graphics.GraphicsProfile = _selectedGraphicsProfile;
 			switch (_selectedGraphicsProfile) {
 				case GraphicsProfile.HiDef:
+					// update resolution related variables alongside TrySupporting8K
+					Configuration.Get("Support8K", ref Support8K);
+					int hiRes = Support8K ? 8192 : 4096;
-					maxScreenW = 4096;
+					maxScreenW = hiRes;
-					maxScreenH = 4096;
+					maxScreenH = hiRes;
-					_renderTargetMaxSize = 4096;
+					_renderTargetMaxSize = hiRes;
+					if (Support8K)
-					TrySupporting8K();
+						TrySupporting8K();
 					break;
 				case GraphicsProfile.Reach:
 					maxScreenW = 1920;
@@ -2767,8 +_,8 @@
 					SetGraphicsProfileInternal();
 				}
 			}
-
-			instance.EnsureRenderTargetContent();
+			// Seems unnecessary as graphics profile is only changed very early on, before the first frame is rendered
+			// Main.instance.EnsureRenderTargetContent();
 		}
 
 		private static void TrySupporting8K() {
@@ -2797,6 +_,7 @@
 				flag2 = false;
 				anglerQuest = rand.Next(anglerQuestItemNetIDs.Length);
 				int num = anglerQuestItemNetIDs[anglerQuest];
+				//patch file: num, flag2
 				if (num == 2454 && (!hardMode || WorldGen.crimson))
 					flag2 = true;
 
@@ -2838,6 +_,8 @@
 
 				if ((num == 2476 || num == 2453 || num == 2473) && !flag)
 					flag2 = true;
+
+				ItemLoader.IsAnglerQuestAvailable(num, ref flag2);
 			}
 
 			NetMessage.SendAnglerQuest(-1);
@@ -2965,7 +_,8 @@
 		public static void SaveRecent() {
 			Utils.TryCreatingDirectory(SavePath);
 			try {
+				if (File.Exists(SavePath + Path.DirectorySeparatorChar + "servers.dat"))
-				File.SetAttributes(SavePath + Path.DirectorySeparatorChar + "servers.dat", FileAttributes.Normal);
+					File.SetAttributes(SavePath + Path.DirectorySeparatorChar + "servers.dat", FileAttributes.Normal);
 			}
 			catch {
 			}
@@ -3038,6 +_,7 @@
 			Configuration.Put("UseHeatDistortion", UseHeatDistortion);
 			Configuration.Put("WaveQuality", WaveQuality);
 			Configuration.Put("Support4K", Support4K);
+			Configuration.Put("Support8K", Support8K);
 			Configuration.Put("MouseColor", new Dictionary<string, byte> {
 				{ "R", mouseColor.R },
 				{ "G", mouseColor.G },
@@ -3063,6 +_,7 @@
 			Configuration.Put("DoorAutoOpeningMode", DoorOpeningHelper.PreferenceSettings);
 			Configuration.Put("WaterfallDrawLimit", instance.waterfallManager.maxWaterfallCount);
 			Configuration.Put("DisableIntenseVisualEffects", DisableIntenseVisualEffects);
+			ModLoader.ModLoader.SaveConfiguration();
 			if (Configuration.Save())
 				return PlayerInput.Save();
 
@@ -3127,6 +_,10 @@
 				TryPickingDefaultUIScale(currentValue3);
 			}
 
+#if SERVER
+			ModLoader.ModLoader.LoadConfiguration();
+			return;
+#endif
 			Configuration.Get("SmartCursorToggle", ref cSmartCursorModeIsToggleAndNotHold);
 			Configuration.Get("MapEnabled", ref mapEnabled);
 			Configuration.Get("InvasionBarMode", ref invasionProgressMode);
@@ -3420,6 +_,7 @@
 				};
 			}
 
+			ModLoader.ModLoader.LoadConfiguration();
 			PlayerInput.Load();
 			if (currentValue < 165) {
 				try {
@@ -3432,7 +_,7 @@
 			mouseColorSlider.SetHSL(mouseColor);
 			mouseBorderColorSlider.SetHSL(MouseBorderColor);
 			mouseBorderColorSlider.Alpha = (float)(int)MouseBorderColor.A / 255f;
-			if (currentValue != 227)
+			if (currentValue != 226 || ModLoader.ModLoader.LastLaunchedTModLoaderVersion != ModLoader.ModLoader.version)
 				SaveSettings();
 		}
 
@@ -3559,9 +_,11 @@
 				FileUtilities.Delete(PlayerList[i].Path, PlayerList[i].IsCloudSave);
 				FileUtilities.Delete(PlayerList[i].Path + ".bak", PlayerList[i].IsCloudSave);
 			}
+			//patch file
 			catch {
 			}
 
+			PlayerIO.ErasePlayer(PlayerList[i].Path, PlayerList[i].IsCloudSave);
 			try {
 				string path = PlayerList[i].Path.Substring(0, PlayerList[i].Path.Length - 4);
 				if (Directory.Exists(path))
@@ -3588,6 +_,7 @@
 					SocialAPI.Cloud.Delete(WorldList[i].Path);
 				}
 
+				WorldIO.EraseWorld(WorldList[i].Path, WorldList[i].IsCloudSave);
 				LoadWorlds();
 			}
 			catch {
@@ -3762,6 +_,12 @@
 						if (text.Length >= 10 && text.Substring(0, 10).ToLower() == "worldname=")
 							worldName = text.Substring(10);
 
+						if (text.Length >= 8 && text.Substring(0, 8).ToLower() == "modpath=")
+							ModOrganizer.modPath = text.Substring(8);
+
+						if (text.Length >= 8 && text.Substring(0, 8).ToLower() == "modpack=")
+							ModOrganizer.commandLineModPack = text.Substring(8);
+
 						if (text.Length >= 5 && text.Substring(0, 5).ToLower() == "seed=")
 							AutogenSeedName = text.Substring(5);
 
@@ -3890,7 +_,7 @@
 		public void DedServ() {
 			NeverSleep();
 			rand = new UnifiedRandom();
-			if (autoShutdown) {
+			if (autoShutdown && !showServerConsole) {
 				string lpWindowName = Console.Title = "terraria" + rand.Next(int.MaxValue);
 #if WINDOWS
 				IntPtr intPtr = FindWindow(null, lpWindowName);
@@ -3899,17 +_,18 @@
 #endif
 			}
 			else {
-				Console.Title = "Terraria Server " + versionNumber2;
+				Console.Title = "Terraria Server " + versionNumber2 + " - " + ModLoader.ModLoader.versionedName;
 			}
 
 			dedServ = true;
 			showSplash = false;
 			Initialize();
+			ModLoader.ModLoader.Reload();
 			while (worldPathName == null || worldPathName == "") {
 				bool flag = true;
 				while (flag) {
 					LoadWorlds();
-					Console.WriteLine(Language.GetTextValue("CLI.Server", versionNumber2));
+					Console.WriteLine(Language.GetTextValue("CLI.Server", versionNumber2) + " - " + ModLoader.ModLoader.versionedName);
 					Console.WriteLine("");
 					for (int i = 0; i < WorldList.Count; i++) {
 						Console.WriteLine(i + 1 + "\t\t" + WorldList[i].Name);
@@ -3922,6 +_,8 @@
 					textValue2 = textValue2 + new string('\t', num - textValue2.Length / 8) + Language.GetTextValue("CLI.DeleteWorld_Description");
 					Console.WriteLine(textValue);
 					Console.WriteLine(textValue2);
+					Console.WriteLine("m\t\tMods Menu");
+					Console.WriteLine("b\t\tMod Browser");
 					Console.WriteLine("");
 					Console.Write(Language.GetTextValue("CLI.ChooseWorld"));
 					string text2 = Console.ReadLine();
@@ -4148,6 +_,14 @@
 
 						continue;
 					}
+					else if (text2 == "m" || text2 == "M") {
+						Interface.ServerModMenu();
+						continue;
+					}
+					else if (text2 == "b" || text2 == "b") {
+						Interface.ServerModBrowserMenu();
+						continue;
+					}
 
 					try {
 						int num3 = Convert.ToInt32(text2);
@@ -4258,6 +_,7 @@
 			catch {
 			}
 
+			myPlayer = 255;
 			Task task2 = WorldGen.serverLoadWorld();
 			Console.WriteLine(Language.GetTextValue("CLI.Server", versionNumber));
 			Console.WriteLine("");
@@ -4271,36 +_,35 @@
 				}
 			}
 
+			//run one tick to JIT all the game content now rather than when a player connects
+			Logging.ServerConsoleLine("Running one update...");
+			Logging.tML.Info($"Server starting with AllowVanillaClients set to {ModNet.AllowVanillaClients}");
+			Update(new GameTime());
 			try {
 				Console.Clear();
+				Logging.ResetPastExceptions(); // "Running one update..." above.
 			}
 			catch {
 			}
 
 			Console.WriteLine(Language.GetTextValue("CLI.Server", versionNumber));
 			Console.WriteLine("");
-			Console.WriteLine(Language.GetTextValue("CLI.ListeningOnPort", Netplay.ListenPort));
+			Logging.ServerConsoleLine(Language.GetTextValue("CLI.ListeningOnPort", Netplay.ListenPort));
 			Console.WriteLine(Language.GetTextValue("CLI.HelpHint"));
 			Console.WriteLine("");
 			Console.Title = "Terraria Server: " + worldName;
 			Stopwatch stopwatch = new Stopwatch();
-			if (!autoShutdown)
+			if (!autoShutdown || showServerConsole)
 				startDedInput();
 
 			stopwatch.Start();
-			double num6 = 16.666666666666668;
-			double num7 = 0.0;
-			int num8 = 0;
-			new Stopwatch().Start();
 			Netplay.StartServer();
 			gameMenu = false;
+			double delta = 1000 / 60D;
+			double target = delta;
 			while (!Netplay.Disconnect) {
-				double totalMilliseconds = stopwatch.Elapsed.TotalMilliseconds;
-				if (totalMilliseconds + num7 >= num6) {
-					num8++;
-					num7 += totalMilliseconds - num6;
-					stopwatch.Reset();
-					stopwatch.Start();
+				ServerHangWatchdog.Checkin();
+				{
 					if (oldStatusText != statusText) {
 						oldStatusText = statusText;
 						Console.WriteLine(statusText);
@@ -4310,24 +_,20 @@
 						Update(new GameTime());
 					else if (saveTime.IsRunning)
 						saveTime.Stop();
+					else
+						Netplay.OnUpdate();
 
 					if (Main.OnTickForThirdPartySoftwareOnly != null)
 						Main.OnTickForThirdPartySoftwareOnly();
 
-					double num9 = stopwatch.Elapsed.TotalMilliseconds + num7;
-					if (num9 < num6) {
-						int num10 = (int)(num6 - num9) - 1;
-						if (num10 > 1) {
-							Thread.Sleep(num10 - 1);
-							if (!Netplay.HasClients) {
-								num7 = 0.0;
-								Thread.Sleep(10);
-							}
-						}
-					}
-				}
+					double now = stopwatch.ElapsedMilliseconds;
+					double remaining = target - now;
+					target += delta; //new target
+					if (target < now) //can't catch up, reset target
+						target = now + delta;
 
-				Thread.Sleep(0);
+					Thread.Sleep(Math.Max((int)remaining, 0));
+				}
 			}
 
 			YouCanSleepNow();
@@ -4342,8 +_,14 @@
 
 		public static void startDedInputCallBack() {
 			while (!Netplay.Disconnect) {
-				Console.Write(": ");
 				string text = Console.ReadLine();
+				ExecuteCommand(text, new ConsoleCommandCaller());
+			}
+		}
+
+		public static void ExecuteCommand(string text, CommandCaller commandCaller) {
+			do { // use a do {...} while (false); loop so we don't have to change all the continue; statements to return; when moving the loop body into a separate function
+				Console.Write(": ");
 				string text2 = text;
 				text = text.ToLower();
 				try {
@@ -4383,12 +_,21 @@
 								num = text3.Length;
 						}
 
+						var modHelpList = CommandManager.GetHelp(CommandType.Console);
+						foreach (var entry in modHelpList)
+							if (entry.Item1.Length > num)
+								num = entry.Item1.Length;
+
 						int num2 = (num + 1) / 8;
 						for (int j = 0; j < list.Count; j++) {
 							string text4 = Language.Exists("CLI." + list[j] + "_Example") ? Language.GetTextValue("CLI." + list[j] + "_Example") : Language.GetTextValue("CLI." + list[j] + "_Command");
 							Console.WriteLine(text4 + new string('\t', num2 - text4.Length / 8) + Language.GetTextValue("CLI." + list[j] + "_Description"));
 						}
+
+						foreach (var entry in modHelpList)
+							Console.WriteLine(entry.Item1 + new string('\t', num2 - entry.Item1.Length / 8) + entry.Item2);
 					}
+					else if (CommandManager.HandleCommand(text, commandCaller)) { }
 					else if (text == Language.GetTextValue("CLI.Settle_Command")) {
 						if (!Liquid.panicMode)
 							Liquid.StartPanic();
@@ -4473,11 +_,12 @@
 						Console.WriteLine(Language.GetTextValue("CLI.Port", Netplay.ListenPort));
 					}
 					else if (text == Language.GetTextValue("CLI.Version_Command")) {
-						Console.WriteLine(Language.GetTextValue("CLI.Server", versionNumber));
+						Console.WriteLine(Language.GetTextValue("CLI.Server", versionNumber) + " - " + ModLoader.ModLoader.versionedName);
 					}
 					else if (text == Language.GetTextValue("CLI.Clear_Command")) {
 						try {
 							Console.Clear();
+							Logging.ResetPastExceptions(); // "CLI.Clear_Command" above.
 						}
 						catch {
 						}
@@ -4599,7 +_,7 @@
 				catch {
 					Console.WriteLine(Language.GetTextValue("CLI.InvalidCommand"));
 				}
-			}
+			} while (false);
 		}
 
 		public static void Sundialing() {
@@ -4641,7 +_,35 @@
 			UnpausedUpdateSeed = (ulong)Guid.NewGuid().GetHashCode();
 			Configuration.Load();
 			graphics = new GraphicsDeviceManager(this as Game);
-			base.Content.RootDirectory = "Content";
+#endif
+		}
+
+		internal void PostSocialInitialize()
+		{
+#if CLIENT
+			string vanillaContentFolder = "../Terraria/Content"; // Side-by-Side Manual Install
+			if (!Directory.Exists(vanillaContentFolder)) {
+				vanillaContentFolder = "../Content"; // Nested Manual Install
+			}
+			if (SocialAPI.Mode == SocialMode.Steam && Steamworks.SteamAPI.Init()) {
+				var appID = new Steamworks.AppId_t(105600u);
+				bool appInstalled = Steamworks.SteamApps.BIsAppInstalled(appID);
+				if (appInstalled) { 
+					Steamworks.SteamApps.GetAppInstallDir(appID, out var steamInstallFolder, 1000);
+					Logging.Terraria.Info("Found Terraria steamapp install at: "+ steamInstallFolder);
+
+					vanillaContentFolder = Path.Combine(steamInstallFolder, "Content");
+					if (!Directory.Exists(vanillaContentFolder))
+						vanillaContentFolder = Path.Combine(steamInstallFolder, "Terraria.app/Contents/MacOS/Content");
+				}
+			}
+			if (!Directory.Exists(vanillaContentFolder)) {
+				Interface.MessageBoxShow("Terraria Content folder not found. If you installed tModLoader through Steam, make sure that Terraria is installed. If not, make sure to install tModLoader in a folder nested within the Terraria install directory or a folder next to the Terraria install directory.");
+				Environment.Exit(1);
+			}
+
+			AlternateContentManager = new TMLContentManager(Content.ServiceProvider, "Content", null);
+			base.Content = new TMLContentManager(Content.ServiceProvider, vanillaContentFolder, AlternateContentManager);
 		}
 
 		private static void SetDisplayMonitor() {
@@ -4658,6 +_,9 @@
 #if CLIENT
 			graphics.PreparingDeviceSettings -= SetMonitorOnce;
 #endif
+#if SERVER
+			this.OpenSettings();
+#endif
 		}
 
 		protected void SetTitle() {
@@ -4703,6 +_,13 @@
 		}
 
 		protected override void Initialize() {
+			DateTime date = DateTime.Now;
+			if (date.Month == 5 && date.Day == 17 || date.Month == 7 && date.Day == 8 || date.Month == 10 && date.Day == 24
+				|| date.Month == 6 && date.Day == 1 || date.Month == 4 || date.Day == 1 || new Random().Next(100) == 0) {
+				OurFavoriteColor.R = OurFavoriteColor.B;
+				OurFavoriteColor.B = 255;
+			}
+
 #if SERVER
 			netMode = 2;
 #endif
@@ -4897,7 +_,7 @@
 			}
 
 			for (int m = 0; m < 256; m++) {
-				player[m] = new Player();
+				player[num12] = new Player(false); // setup inventory is unnecessary
 			}
 
 			for (int n = 0; n < 1001; n++) {
@@ -8237,6 +_,9 @@
 			Minecart.Initialize();
 			CacheSupportedDisplaySizes();
 			ContentSamples.RebuildItemCreativeSortingIDsAfterRecipesAreSetUp();
+			// move instance creation from class constructor to main thread to avoid deadlocks from content loading on JIT thread with FNA
+			CaptureManager.Instance = new CaptureManager();
+			LiquidRenderer.Instance = new LiquidRenderer();
 		}
 
 		private void LoadMusic() {
@@ -8248,13 +_,15 @@
 					music[i] = soundBank.GetCue("Music_" + i);
 				}
 			}
+
+			UICommon.LoadTextures();
 		}
 
 		private IEnumerator LoadMusic_InSteps() {
-			engine = new AudioEngine("Content\\TerrariaMusic.xgs");
-			soundBank = new SoundBank(engine, "Content\\Sound Bank.xsb");
-			waveBank = new WaveBank(engine, "Content\\Wave Bank.xwb");
+			engine = new AudioEngine(Main.instance.Content.RootDirectory + Path.DirectorySeparatorChar + "TerrariaMusic.xgs");
+			soundBank = new SoundBank(engine, Main.instance.Content.RootDirectory + Path.DirectorySeparatorChar + "Sound Bank.xsb");
 			yield return null;
+			waveBank = new WaveBank(engine, Main.instance.Content.RootDirectory + Path.DirectorySeparatorChar + "Wave Bank.xwb");
 			for (int i = 1; i < 89; i++) {
 				music[i] = soundBank.GetCue("Music_" + i);
 				yield return null;
@@ -8667,6 +_,9 @@
 
 					if (SceneMetrics.ActiveMusicBox == 84)
 						newMusic = 88;
+
+					if (musicBox >= maxMusic)
+						newMusic = musicBox;
 				}
 
 				if (curMusic != newMusic)
@@ -8688,11 +_,14 @@
 						curMusic = 0;
 					}
 
-					if (NPC.MoonLordCountdown == 1 && curMusic >= 1 && curMusic < 89)
+					if (NPC.MoonLordCountdown == 1 && curMusic >= 1 && curMusic < music.Length)
 						musicFade[curMusic] = 0f;
 				}
 
-				for (int k = 1; k < 89; k++) {
+				for (int m = 1; m < music.Length; m++) {
+					if (music[m] == null)
+						continue; // Race condition, Music is resized during load.
+
 					float num2 = musicFade[k] * musicVolume * num;
 					if (k >= 62 && k <= 88) {
 						num2 *= 0.9f;
@@ -8723,7 +_,7 @@
 									}
 
 									if (!music[k].IsPlaying) {
-										music[k] = soundBank.GetCue("Music_" + k);
+								music[m].Reset();
 										music[k].Play();
 										music[k].SetVariable("Volume", musicFade[k] * ambientVolume * num7);
 										continue;
@@ -8809,6 +_,8 @@
 									musicFade[k] = 0f;
 								}
 
+								NPCLoader.PostDraw(npc[iNPCIndex], spriteBatch, color9);
+
 								continue;
 							}
 					}
@@ -8832,8 +_,10 @@
 
 							music[k].SetVariable("Volume", num2);
 						}
+						music[m].CheckBuffer();
 					}
 					else if (music[k].IsPlaying) {
+						music[m].CheckBuffer();
 						if (musicFade[curMusic] > 0.25f)
 							musicFade[k] -= 0.005f;
 						else if (curMusic == 0)
@@ -8883,6 +_,8 @@
 			if (!showSplash) {
 				Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle((int)screenPosition.X, (int)screenPosition.Y, screenWidth, screenHeight);
 				int num = 5000;
+				int modMusic = -1;
+				MusicPriority modPriority = MusicPriority.None;
 				for (int i = 0; i < 200; i++) {
 					if (!npc[i].active)
 						continue;
@@ -8984,17 +_,21 @@
 							break;
 					}
 
-					if (NPCID.Sets.BelongsToInvasionOldOnesArmy[npc[i].type])
+					if (npc[l].type < NPCID.Sets.BelongsToInvasionOldOnesArmy.Length && NPCID.Sets.BelongsToInvasionOldOnesArmy[npc[l].type])
 						num2 = 12;
 
 					if (num2 == 0 && npc[i].boss)
 						num2 = 1;
 
-					if (num2 == 0)
+					if (num2 == 0 && (npc[l].modNPC == null || npc[l].modNPC.music < 0))
 						continue;
 
 					Microsoft.Xna.Framework.Rectangle value = new Microsoft.Xna.Framework.Rectangle((int)(npc[i].position.X + (float)(npc[i].width / 2)) - num, (int)(npc[i].position.Y + (float)(npc[i].height / 2)) - num, num * 2, num * 2);
 					if (rectangle.Intersects(value)) {
+						if (npc[l].modNPC != null && npc[l].modNPC.music >= 0 && (modMusic < 0 || npc[l].modNPC.musicPriority > modPriority)) {
+							modMusic = npc[l].modNPC.music;
+							modPriority = npc[l].modNPC.musicPriority;
+						}
 						switch (num2) {
 							case 1:
 								flag = true;
@@ -9048,6 +_,7 @@
 				}
 			}
 
+				ModHooks.UpdateMusic(ref modMusic, ref modPriority);
 			_ = (screenPosition.X + (float)(screenWidth / 2)) / 16f;
 			if (musicVolume == 0f) {
 				newMusic = 0;
@@ -9411,12 +_,21 @@
 					if (WorldGen.drunkWorldGen) {
 						newMusic = 60;
 					}
+					else if (modPriority >= MusicPriority.Event) {
+						newMusic = modMusic;
+					}
 					else if (playOldTile) {
 						newMusic = 6;
 					}
+					else if (modPriority >= MusicPriority.BossLow) {
+						newMusic = modMusic;
+					}
 					else if (!_isAsyncLoadComplete) {
 						newMusic = 50;
 					}
+					else if (modPriority >= MusicPriority.Environment) {
+						newMusic = modMusic;
+					}
 					else if (!music[50].IsPlaying) {
 						newMusic = 51;
 						if (musicNoCrossFade[51])
@@ -9433,8 +_,14 @@
 			float num4 = maxTilesX / 4200;
 			num4 *= num4;
 			float num5 = (float)((double)((screenPosition.Y + (float)(screenHeight / 2)) / 16f - (65f + 10f * num4)) / (worldSurface / 5.0));
-			if (flag7) {
+					if (modPriority >= MusicPriority.BossHigh) {
+						newMusic = modMusic;
+					}
+					else if (flag8) {
 				newMusic = 38;
+					}
+					else if (modPriority >= MusicPriority.BossMedium) {
+						newMusic = modMusic;
 			}
 			else if (flag9) {
 				newMusic = 37;
@@ -11169,6 +_,7 @@
 
 						penguinCageFrameCounter[num14] = 0;
 					}
+					TileLoader.PostDraw(j, i, type, spriteBatch);
 				}
 			}
 
@@ -12189,6 +_,7 @@
 		}
 
 		protected override void Update(GameTime gameTime) {
+			FallbackSyncContext.Update();
 			if (!IsEnginePreloaded) {
 				IsEnginePreloaded = true;
 				if (Main.OnEnginePreload != null)
@@ -12197,6 +_,7 @@
 
 			if (!_isDrawingOrUpdating) {
 				_isDrawingOrUpdating = true;
+			try {
 				DoUpdate(gameTime);
 				CinematicManager.Instance.Update(gameTime);
 				if (netMode == 2) {
@@ -12273,6 +_,8 @@
 
 			CurrentInputTextTakerOverride = null;
 			AchievementAdvisor.Update();
+			ModHooks.UpdateUI(gameTime);
+			PlayerInput.ScrollWheelDeltaForUI = 0;
 			PlayerInput.SetZoom_Unscaled();
 			MouseOversTryToClear();
 			PlayerInput.ResetInputsOnActiveStateChange();
@@ -12286,6 +_,7 @@
 				_hasPendingNetmodeChange = false;
 			}
 
+			Netplay.OnUpdate(); // TODO, why do we add this?
 			if (CaptureManager.Instance.IsCapturing)
 				return;
 
@@ -12477,7 +_,9 @@
 
 				UpdateOldNPCShop();
 				hasFocus = base.IsActive;
+#if WINDOWS
 				hasFocus |= (Form.ActiveForm == Control.FromHandle(base.Window.Handle) as Form);
+#endif
 				if (!base.IsActive && netMode == 0) {
 					if (!Platform.IsOSX)
 						base.IsMouseVisible = true;
@@ -12487,6 +_,9 @@
 
 					mouseLeftRelease = false;
 					mouseRightRelease = false;
+					mouseMiddleRelease = false;
+					mouseXButton1Release = false;
+					mouseXButton2Release = false;
 					if (gameMenu)
 						UpdateMenu();
 
@@ -12581,9 +_,11 @@
 						throw;
 				}
 
+				PlayerHooks.UpdateAutopause(player[myPlayer]);
 				Sandstorm.EmitDust();
 			}
 
+			ModHooks.PreUpdateEntities();
 			if (!dedServ && (double)screenPosition.Y < worldSurface * 16.0 + 16.0 && netMode != 2) {
 				Star.UpdateStars();
 				Cloud.UpdateClouds();
@@ -12826,6 +_,9 @@
 			if ((byte)Main.player[myPlayer].zone4 != (byte)player.zone4)
 				flag2 = true;
 
+				if (!PlayerHooks.CustomBiomesMatch(player[myPlayer], clientPlayer))
+					flag = true;
+
 			if (flag2)
 				NetMessage.SendData(36, -1, -1, null, myPlayer);
 
@@ -12854,7 +_,7 @@
 			}
 
 			bool flag3 = false;
-			for (int num4 = 0; num4 < 22; num4++) {
+				for (int num4 = 0; num4 < Player.MaxBuffs; num4++) {
 				if (Main.player[myPlayer].buffType[num4] != player.buffType[num4])
 					flag3 = true;
 			}
@@ -12924,6 +_,7 @@
 
 			_gameUpdateCount++;
 			NPC.RevengeManager.Update();
+			ModHooks.MidUpdatePlayerNPC();
 			if (netMode != 1) {
 				try {
 					NPC.SpawnNPC();
@@ -12951,6 +_,7 @@
 				BestiaryTracker.Sights.ScanWorldForFinds();
 
 			bool anyActiveBossNPC = false;
+			ModHooks.MidUpdateProjectileItem();
 			for (int k = 0; k < 200; k++) {
 				if (ignoreErrors) {
 					try {
@@ -12968,6 +_,7 @@
 			}
 
 			CurrentFrameFlags.AnyActiveBossNPC = anyActiveBossNPC;
+			ModHooks.MidUpdateNPCGore();
 			for (int l = 0; l < 600; l++) {
 				if (ignoreErrors) {
 					try {
@@ -12982,6 +_,7 @@
 				}
 			}
 
+			ModHooks.MidUpdateGoreProjectile();
 			LockOnHelper.SetUP();
 			PreUpdateAllProjectiles();
 			for (int m = 0; m < 1000; m++) {
@@ -13002,6 +_,9 @@
 			ProjectileUpdateLoopIndex = -1;
 			PostUpdateAllProjectiles();
 			LockOnHelper.SetDOWN();
+			if (netMode == 1 && Netplay.syncingWorld) // skip updating entities while world is loading in multiplayer #340
+				goto skipEntityUpdates;
+
 			for (int n = 0; n < 400; n++) {
 				if (ignoreErrors) {
 					try {
@@ -13016,6 +_,7 @@
 				}
 			}
 
+			ModHooks.MidUpdateItemDust();
 			if (ignoreErrors) {
 				try {
 					Dust.UpdateDust();
@@ -13031,11 +_,16 @@
 				Dust.UpdateDust();
 			}
 
+			ModHooks.MidUpdateDustTime();
+
 			if (netMode != 2) {
 				CombatText.UpdateCombatText();
 				PopupText.UpdateItemText();
 			}
 
+			skipEntityUpdates:
+			ModHooks.MidUpdateInvasionNet();
+
 			if (ignoreErrors) {
 				try {
 					UpdateTime();
@@ -13048,6 +_,7 @@
 				UpdateTime();
 			}
 
+			ModHooks.MidUpdateTimeWorld();
 			tileSolid[379] = true;
 			if (gameMenu && netMode != 2)
 				return;
@@ -13067,6 +_,8 @@
 				}
 			}
 
+			ModHooks.PostUpdateEverything();
+
 			if (ignoreErrors) {
 				try {
 					if (netMode == 2)
@@ -13267,7 +_,8 @@
 			if (!inputTextEnter || !chatRelease)
 				return;
 
-			if (chatText != "") {
+			var handled = chatText.Length > 0 && chatText[0] == '/' && CommandManager.HandleCommand(chatText, new ChatCommandCaller());
+			if (chatText != "" && !handled) {
 				ChatMessage message = ChatManager.Commands.CreateOutgoingMessage(chatText);
 				if (netMode == 1)
 					ChatHelper.SendChatMessageFromClient(message);
@@ -13283,6 +_,7 @@
 
 		private void DoUpdate_HandleInput() {
 			PlayerInput.UpdateInput();
+			ModHooks.PostUpdateInput();
 			UpdateViewZoomKeys();
 			PlayerInput.SetZoom_Unscaled();
 			UILinkPointNavigator.Update();
@@ -13931,6 +_,7 @@
 			if (tileFrameCounter[493] < 0)
 				tileFrameCounter[493] += 120;
 
+			TileLoader.AnimateTiles();
 			AnimateTiles_CritterCages();
 		}
 
@@ -14115,6 +_,8 @@
 			wallFrame[144] = 0;
 			if (wallFrameCounter[144] > num3 * (16 + num4 * 2))
 				wallFrameCounter[144] = 0;
+
+			WallLoader.AnimateWalls();
 		}
 
 		private void DoUpdate_AnimateWaterfalls() {
@@ -14599,15 +_,15 @@
 				X += 34;
 
 			new Microsoft.Xna.Framework.Color(mouseTextColor, mouseTextColor, mouseTextColor, mouseTextColor);
+			Vector2 vector = fontMouseText.MeasureString(cursorText);
 			if (HoverItem.type > 0) {
 				MouseText_DrawItemTooltip(info, num, diff, X, Y);
 				return;
 			}
 
 			if (info.buffTooltip != null && info.buffTooltip != "")
-				MouseText_DrawBuffTooltip(info.buffTooltip, ref X, ref Y);
+				MouseText_DrawBuffString(ref X, ref Y, (int)vector.Y);
 
-			Vector2 vector = FontAssets.MouseText.Value.MeasureString(cursorText);
 			if (hackedScreenHeight != -1 && hackedScreenWidth != -1) {
 				if ((float)X + vector.X + 4f > (float)hackedScreenWidth)
 					X = (int)((float)hackedScreenWidth - vector.X - 4f);
@@ -14781,6 +_,7 @@
 					else
 						array[numLines] = Lang.tip[50].Value + " " + text;
 
+					tooltipNames[currentLine] = "Price";
 					numLines++;
 					if (num6 > 0)
 						color = new Microsoft.Xna.Framework.Color((byte)(220f * num4), (byte)(220f * num4), (byte)(198f * num4), a);
@@ -14793,19 +_,26 @@
 				}
 				else if (hoverItem.type != 3817) {
 					array[numLines] = Lang.tip[51].Value;
+					tooltipNames[currentLine] = "Price";
 					numLines++;
 					color = new Microsoft.Xna.Framework.Color((byte)(120f * num4), (byte)(120f * num4), (byte)(120f * num4), a);
 				}
 			}
 
 			Vector2 zero = Vector2.Zero;
-			int num12 = 0;
+			Microsoft.Xna.Framework.Color?[] overrideColor;
+			List<TooltipLine> lines = ItemLoader.ModifyTooltips(HoverItem, ref currentLine, tooltipNames, ref array, ref array2, ref array3, ref num, out overrideColor);
+			List<DrawableTooltipLine> drawableLines = lines.Select((x, i) => new DrawableTooltipLine(x, i, 0, 0, Microsoft.Xna.Framework.Color.White)).ToList();
+			int yOffset = 0; // num24
 			for (int j = 0; j < numLines; j++) {
+				/* Below fixes the calculated width for lines containing Chat tags
 				Vector2 stringSize = ChatManager.GetStringSize(FontAssets.MouseText.Value, array[j], Vector2.One);
+				*/
+				Vector2 vector = ChatManager.GetStringSize(fontMouseText, array[k], Vector2.One);
 				if (stringSize.X > zero.X)
 					zero.X = stringSize.X;
 
-				zero.Y += stringSize.Y + (float)num12;
+				zero.Y += vector.Y + yOffset;
 			}
 
 			if (yoyoLogo != -1)
@@ -14863,8 +_,11 @@
 								break;
 						}
 
-						spriteBatch.Draw(TextureAssets.OneDropLogo.Value, new Vector2(num21, num22), null, color2, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
+						drawColor = drawableLines[l].overrideColor ?? drawableLines[l].color;
+						spriteBatch.Draw(oneDropLogo, new Vector2(num28, num29), null, m != 4 ? color2 : drawColor, drawableLines[l].rotation, drawableLines[l].origin, (drawableLines[l].baseScale.X + drawableLines[l].baseScale.Y) / 2, SpriteEffects.None, 0f);
 					}
+					skipDraw:
+					ItemLoader.PostDrawTooltipLine(HoverItem, drawableLines[l]);
 				}
 				else {
 					Microsoft.Xna.Framework.Color black = Microsoft.Xna.Framework.Color.Black;
@@ -14924,20 +_,33 @@
 					else if (array2[k]) {
 						black = (array3[k] ? new Microsoft.Xna.Framework.Color((byte)(190f * num4), (byte)(120f * num4), (byte)(120f * num4), a) : new Microsoft.Xna.Framework.Color((byte)(120f * num4), (byte)(190f * num4), (byte)(120f * num4), a));
 					}
-					else if (k == numLines - 1) {
+					else if (drawableLines[l].mod.Equals("Terraria") && drawableLines[l].Name.Equals("Price")) {
 						black = color;
 					}
 
 					if (k == researchLine)
 						black = Colors.JourneyMode;
 
-					ChatManager.DrawColorCodedStringWithShadow(spriteBatch, FontAssets.MouseText.Value, array[k], new Vector2(X, Y + num16), black, 0f, Vector2.Zero, Vector2.One);
+					drawableLines[l].color = black;
+					drawColor = black;
+					if (overrideColor[l].HasValue) {
+						drawColor = overrideColor[l].Value * num18;
+						drawableLines[l].overrideColor = drawColor;
+					}
+
+					if (ItemLoader.PreDrawTooltipLine(HoverItem, drawableLines[l], ref yOffset) && globalCanDraw)
+						ChatManager.DrawColorCodedStringWithShadow(spriteBatch, drawableLines[l].font, drawableLines[l].text, new Vector2((float)drawableLines[l].X, (float)drawableLines[l].Y), drawColor, drawableLines[l].rotation, drawableLines[l].origin, drawableLines[l].baseScale, drawableLines[l].maxWidth, drawableLines[l].spread);
+
+					ItemLoader.PostDrawTooltipLine(HoverItem, drawableLines[l]);
 				}
 
-				num16 += (int)(FontAssets.MouseText.Value.MeasureString(array[k]).Y + (float)num12);
+				Y += (int)(fontMouseText.MeasureString(array[l]).Y + yOffset);
 			}
+
+			ItemLoader.PostDrawTooltip(HoverItem, drawableLines.AsReadOnly());
 		}
 
+		private void MouseText_DrawBuffString(ref int X, ref int Y, int buffNameHeight) {
 		public static void MouseText_DrawItemTooltip_GetLinesInfo(Item item, ref int yoyoLogo, ref int researchLine, float oldKB, ref int numLines, string[] toolTipLine, bool[] preFixLine, bool[] badPreFixLine) {
 			toolTipLine[0] = item.HoverName;
 			if (item.favorited) {
@@ -15011,6 +_,28 @@
 						toolTipLine[numLines] = num5 + Lang.tip[5].Value;
 						numLines++;
 					}
+					*/
+					tooltipNames[currentLine] = "Damage";
+					currentLine++;
+					if (!HoverItem.summon) {
+						int crit;
+						if (HoverItem.melee)
+							crit = player[myPlayer].meleeCrit - player[myPlayer].inventory[player[myPlayer].selectedItem].crit + HoverItem.crit;
+						else if (HoverItem.ranged)
+							crit = player[myPlayer].rangedCrit - player[myPlayer].inventory[player[myPlayer].selectedItem].crit + HoverItem.crit;
+						else if (HoverItem.magic)
+							crit = player[myPlayer].magicCrit - player[myPlayer].inventory[player[myPlayer].selectedItem].crit + HoverItem.crit;
+						else if (HoverItem.thrown)
+							crit = player[myPlayer].thrownCrit - player[myPlayer].inventory[player[myPlayer].selectedItem].crit + HoverItem.crit;
+						else // crit tooltip for fully custom classes
+							crit = HoverItem.crit;
+					
+						ItemLoader.GetWeaponCrit(HoverItem, player[myPlayer], ref crit);
+						PlayerHooks.GetWeaponCrit(player[myPlayer], HoverItem, ref crit);
+						array[currentLine] = crit + Lang.tip[5].Value;
+						tooltipNames[currentLine] = "CritChance";
+						currentLine++;
+					}
 
 					if (item.useStyle != 0 && !item.summon) {
 						if (item.useAnimation <= 8)
@@ -15030,6 +_,7 @@
 						else
 							toolTipLine[numLines] = Lang.tip[13].Value;
 
+						tooltipNames[currentLine] = "Speed";
 						numLines++;
 					}
 
@@ -15043,6 +_,8 @@
 					if (player[myPlayer].inventory[player[myPlayer].selectedItem].type == 3106 && item.type == 3106)
 						num6 += num6 * (1f - player[myPlayer].stealth);
 
+					ItemLoader.GetWeaponKnockback(HoverItem, player[myPlayer], ref num10);
+					PlayerHooks.GetWeaponKnockback(player[myPlayer], HoverItem, ref num10);
 					if (num6 == 0f)
 						toolTipLine[numLines] = Lang.tip[14].Value;
 					else if ((double)num6 <= 1.5)
@@ -15062,18 +_,22 @@
 					else
 						toolTipLine[numLines] = Lang.tip[22].Value;
 
+					tooltipNames[currentLine] = "Knockback";
 					numLines++;
 				}
 
 				if (item.fishingPole > 0) {
 					toolTipLine[numLines] = Language.GetTextValue("GameUI.PrecentFishingPower", item.fishingPole);
+					tooltipNames[currentLine] = "FishingPower";
 					numLines++;
 					toolTipLine[numLines] = Language.GetTextValue("GameUI.BaitRequired");
+					tooltipNames[currentLine] = "NeedsBait";
 					numLines++;
 				}
 
 				if (item.bait > 0) {
 					toolTipLine[numLines] = Language.GetTextValue("GameUI.BaitPower", item.bait);
+					tooltipNames[currentLine] = "BaitPower";
 					numLines++;
 				}
 
@@ -15083,41 +_,49 @@
 					else
 						toolTipLine[numLines] = Lang.tip[23].Value;
 
+					tooltipNames[currentLine] = "Equipable";
 					numLines++;
 				}
 
 				if (item.tileWand > 0) {
 					toolTipLine[numLines] = Lang.tip[52].Value + Lang.GetItemNameValue(item.tileWand);
+					tooltipNames[currentLine] = "WandConsumes";
 					numLines++;
 				}
 
 				if (item.questItem) {
 					toolTipLine[numLines] = Lang.inter[65].Value;
+					tooltipNames[currentLine] = "Quest";
 					numLines++;
 				}
 
 				if (item.vanity) {
 					toolTipLine[numLines] = Lang.tip[24].Value;
+					tooltipNames[currentLine] = "Vanity";
 					numLines++;
 				}
 
 				if (!item.vanity && item.FitsAccessoryVanitySlot) {
 					toolTipLine[numLines] = Language.GetText("Misc.CanBePlacedInVanity").Value;
+					tooltipNames[currentLine] = "Defense";
 					numLines++;
 				}
 
 				if (item.defense > 0) {
 					toolTipLine[numLines] = item.defense + Lang.tip[25].Value;
+					tooltipNames[currentLine] = "PickPower";
 					numLines++;
 				}
 
 				if (item.pick > 0) {
 					toolTipLine[numLines] = item.pick + Lang.tip[26].Value;
+					tooltipNames[currentLine] = "AxePower";
 					numLines++;
 				}
 
 				if (item.axe > 0) {
 					toolTipLine[numLines] = item.axe * 5 + Lang.tip[27].Value;
+					tooltipNames[currentLine] = "HammerPower";
 					numLines++;
 				}
 
@@ -15133,41 +_,49 @@
 					else
 						toolTipLine[numLines] = tileBoost + Lang.tip[54].Value;
 
+					tooltipNames[currentLine] = "TileBoost";
 					numLines++;
 				}
 
 				if (item.healLife > 0) {
-					toolTipLine[numLines] = Language.GetTextValue("CommonItemTooltip.RestoresLife", item.healLife);
+					array[currentLine] = Language.GetTextValue("CommonItemTooltip.RestoresLife", player[myPlayer].GetHealLife(HoverItem));
+					tooltipNames[currentLine] = "HealLife";
 					numLines++;
 				}
 
 				if (item.healMana > 0) {
-					toolTipLine[numLines] = Language.GetTextValue("CommonItemTooltip.RestoresMana", item.healMana);
+					array[currentLine] = Language.GetTextValue("CommonItemTooltip.RestoresMana", player[myPlayer].GetHealMana(HoverItem));
+					tooltipNames[currentLine] = "HealMana";
 					numLines++;
 				}
 
 				if (item.mana > 0 && (item.type != 127 || !player[myPlayer].spaceGun)) {
-					toolTipLine[numLines] = Language.GetTextValue("CommonItemTooltip.UsesMana", (int)((float)item.mana * player[myPlayer].manaCost));
+					array[currentLine] = Language.GetTextValue("CommonItemTooltip.UsesMana", player[myPlayer].GetManaCost(HoverItem));
+					tooltipNames[currentLine] = "UseMana";
 					numLines++;
 				}
 
 				if (item.createWall > 0 || item.createTile > -1) {
 					if (item.type != 213 && item.tileWand < 1) {
 						toolTipLine[numLines] = Lang.tip[33].Value;
+						tooltipNames[currentLine] = "Placeable";
 						numLines++;
 					}
 				}
 				else if (item.ammo > 0 && !item.notAmmo) {
 					toolTipLine[numLines] = Lang.tip[34].Value;
+					tooltipNames[currentLine] = "Ammo";
 					numLines++;
 				}
 				else if (item.consumable) {
 					toolTipLine[numLines] = Lang.tip[35].Value;
+					tooltipNames[currentLine] = "Consumable";
 					numLines++;
 				}
 
 				if (item.material) {
 					toolTipLine[numLines] = Lang.tip[36].Value;
+					tooltipNames[currentLine] = "Material";
 					numLines++;
 				}
 
@@ -15175,10 +_,12 @@
 					for (int i = 0; i < item.ToolTip.Lines; i++) {
 						if (i == 0 && ItemID.Sets.UsesCursedByPlanteraTooltip[item.type] && !NPC.downedPlantBoss) {
 							toolTipLine[numLines] = Lang.tip[59].Value;
+							tooltipNames[currentLine] = "Tooltip" + j;
 							numLines++;
 						}
 						else {
 							toolTipLine[numLines] = item.ToolTip.GetLine(i);
+							tooltipNames[currentLine] = "Tooltip" + j;
 							numLines++;
 						}
 					}
@@ -15186,23 +_,27 @@
 
 				if ((item.type == 3818 || item.type == 3819 || item.type == 3820 || item.type == 3824 || item.type == 3825 || item.type == 3826 || item.type == 3829 || item.type == 3830 || item.type == 3831 || item.type == 3832 || item.type == 3833 || item.type == 3834) && !player[myPlayer].downedDD2EventAnyDifficulty) {
 					toolTipLine[numLines] = Lang.misc[104].Value;
+					tooltipNames[currentLine] = "EtherianManaWarning";
 					numLines++;
 				}
 
 				if (item.buffType > 0 && BuffID.Sets.IsWellFed[item.buffType] && expertMode) {
 					toolTipLine[numLines] = Lang.misc[40].Value;
+					tooltipNames[currentLine] = "WellFedExpert";
 					numLines++;
 				}
 
 				if (item.buffTime > 0) {
 					string text = (item.buffTime / 60 < 60) ? Language.GetTextValue("CommonItemTooltip.SecondDuration", Math.Round((double)item.buffTime / 60.0)) : Language.GetTextValue("CommonItemTooltip.MinuteDuration", Math.Round((double)(item.buffTime / 60) / 60.0));
 					toolTipLine[numLines] = text;
+					tooltipNames[currentLine] = "BuffTime";
 					numLines++;
 				}
 
 				if (item.type == 3262 || item.type == 3282 || item.type == 3283 || item.type == 3284 || item.type == 3285 || item.type == 3286 || item.type == 3316 || item.type == 3315 || item.type == 3317 || item.type == 3291 || item.type == 3389) {
 					toolTipLine[numLines] = " ";
 					yoyoLogo = numLines;
+					tooltipNames[currentLine] = "OneDropLogo";
 					numLines++;
 				}
 
@@ -15226,6 +_,7 @@
 							badPreFixLine[numLines] = true;
 
 						preFixLine[numLines] = true;
+						tooltipNames[currentLine] = "PrefixDamage";
 						numLines++;
 					}
 
@@ -15243,6 +_,7 @@
 							badPreFixLine[numLines] = true;
 
 						preFixLine[numLines] = true;
+						tooltipNames[currentLine] = "PrefixSpeed";
 						numLines++;
 					}
 
@@ -15257,6 +_,7 @@
 							badPreFixLine[numLines] = true;
 
 						preFixLine[numLines] = true;
+						tooltipNames[currentLine] = "PrefixCritChance";
 						numLines++;
 					}
 
@@ -15273,6 +_,7 @@
 							badPreFixLine[numLines] = true;
 
 						preFixLine[numLines] = true;
+						tooltipNames[currentLine] = "PrefixUseMana";
 						numLines++;
 					}
 
@@ -15289,6 +_,7 @@
 							badPreFixLine[numLines] = true;
 
 						preFixLine[numLines] = true;
+						tooltipNames[currentLine] = "PrefixSize";
 						numLines++;
 					}
 
@@ -15305,6 +_,7 @@
 							badPreFixLine[numLines] = true;
 
 						preFixLine[numLines] = true;
+						tooltipNames[currentLine] = "PrefixShootSpeed";
 						numLines++;
 					}
 
@@ -15321,136 +_,160 @@
 							badPreFixLine[numLines] = true;
 
 						preFixLine[numLines] = true;
+						tooltipNames[currentLine] = "PrefixKnockback";
 						numLines++;
 					}
 
 					if (item.prefix == 62) {
 						toolTipLine[numLines] = "+1" + Lang.tip[25].Value;
 						preFixLine[numLines] = true;
+						tooltipNames[currentLine] = "PrefixAccDefense";
 						numLines++;
 					}
 
 					if (item.prefix == 63) {
 						toolTipLine[numLines] = "+2" + Lang.tip[25].Value;
 						preFixLine[numLines] = true;
+						tooltipNames[currentLine] = "PrefixAccDefense";
 						numLines++;
 					}
 
 					if (item.prefix == 64) {
 						toolTipLine[numLines] = "+3" + Lang.tip[25].Value;
 						preFixLine[numLines] = true;
+						tooltipNames[currentLine] = "PrefixAccDefense";
 						numLines++;
 					}
 
 					if (item.prefix == 65) {
 						toolTipLine[numLines] = "+4" + Lang.tip[25].Value;
 						preFixLine[numLines] = true;
+						tooltipNames[currentLine] = "PrefixAccDefense";
 						numLines++;
 					}
 
 					if (item.prefix == 66) {
 						toolTipLine[numLines] = "+20 " + Lang.tip[31].Value;
 						preFixLine[numLines] = true;
+						tooltipNames[currentLine] = "PrefixAccMaxMana";
 						numLines++;
 					}
 
 					if (item.prefix == 67) {
 						toolTipLine[numLines] = "+2" + Lang.tip[5].Value;
 						preFixLine[numLines] = true;
+						tooltipNames[currentLine] = "PrefixAccCritChance";
 						numLines++;
 					}
 
 					if (item.prefix == 68) {
 						toolTipLine[numLines] = "+4" + Lang.tip[5].Value;
 						preFixLine[numLines] = true;
+						tooltipNames[currentLine] = "PrefixAccCritChance";
 						numLines++;
 					}
 
 					if (item.prefix == 69) {
 						toolTipLine[numLines] = "+1" + Lang.tip[39].Value;
 						preFixLine[numLines] = true;
+						tooltipNames[currentLine] = "PrefixAccDamage";
 						numLines++;
 					}
 
 					if (item.prefix == 70) {
 						toolTipLine[numLines] = "+2" + Lang.tip[39].Value;
 						preFixLine[numLines] = true;
+						tooltipNames[currentLine] = "PrefixAccDamage";
 						numLines++;
 					}
 
 					if (item.prefix == 71) {
 						toolTipLine[numLines] = "+3" + Lang.tip[39].Value;
 						preFixLine[numLines] = true;
+						tooltipNames[currentLine] = "PrefixAccDamage";
 						numLines++;
 					}
 
 					if (item.prefix == 72) {
 						toolTipLine[numLines] = "+4" + Lang.tip[39].Value;
 						preFixLine[numLines] = true;
+						tooltipNames[currentLine] = "PrefixAccDamage";
 						numLines++;
 					}
 
 					if (item.prefix == 73) {
 						toolTipLine[numLines] = "+1" + Lang.tip[46].Value;
 						preFixLine[numLines] = true;
+						tooltipNames[currentLine] = "PrefixAccMoveSpeed";
 						numLines++;
 					}
 
 					if (item.prefix == 74) {
 						toolTipLine[numLines] = "+2" + Lang.tip[46].Value;
 						preFixLine[numLines] = true;
+						tooltipNames[currentLine] = "PrefixAccMoveSpeed";
 						numLines++;
 					}
 
 					if (item.prefix == 75) {
 						toolTipLine[numLines] = "+3" + Lang.tip[46].Value;
 						preFixLine[numLines] = true;
+						tooltipNames[currentLine] = "PrefixAccMoveSpeed";
 						numLines++;
 					}
 
 					if (item.prefix == 76) {
 						toolTipLine[numLines] = "+4" + Lang.tip[46].Value;
 						preFixLine[numLines] = true;
+						tooltipNames[currentLine] = "PrefixAccMoveSpeed";
 						numLines++;
 					}
 
 					if (item.prefix == 77) {
 						toolTipLine[numLines] = "+1" + Lang.tip[47].Value;
 						preFixLine[numLines] = true;
+						tooltipNames[currentLine] = "PrefixAccMeleeSpeed";
 						numLines++;
 					}
 
 					if (item.prefix == 78) {
 						toolTipLine[numLines] = "+2" + Lang.tip[47].Value;
 						preFixLine[numLines] = true;
+						tooltipNames[currentLine] = "PrefixAccMeleeSpeed";
 						numLines++;
 					}
 
 					if (item.prefix == 79) {
 						toolTipLine[numLines] = "+3" + Lang.tip[47].Value;
 						preFixLine[numLines] = true;
+						tooltipNames[currentLine] = "PrefixAccMeleeSpeed";
 						numLines++;
 					}
 
 					if (item.prefix == 80) {
 						toolTipLine[numLines] = "+4" + Lang.tip[47].Value;
 						preFixLine[numLines] = true;
+						tooltipNames[currentLine] = "PrefixAccMeleeSpeed";
 						numLines++;
 					}
 				}
 
 				if (item.wornArmor && player[myPlayer].setBonus != "") {
 					toolTipLine[numLines] = Lang.tip[48].Value + " " + player[myPlayer].setBonus;
+					tooltipNames[currentLine] = "SetBonus";
 					numLines++;
 				}
 			}
 
 			if (item.expert) {
 				toolTipLine[numLines] = Language.GetTextValue("GameUI.Expert");
+				tooltipNames[currentLine] = "Expert";
 				numLines++;
 			}
 
+			//patch file: num18
 			if (item.rare == -13) {
+					tooltipNames[currentLine] = "SpecialPrice";
 				toolTipLine[numLines] = Language.GetTextValue("GameUI.Master");
 				numLines++;
 			}
@@ -15488,7 +_,7 @@
 
 			if (bannerMouseOver) {
 				int num6 = 0;
-				for (int i = 0; i < 289; i++) {
+				for (int i = 0; i < NPCLoader.NPCCount; i++) {
 					if (Item.BannerToNPC(i) != 0 && player[myPlayer].HasNPCBannerBuff(i)) {
 						num6++;
 						string nPCNameValue = Lang.GetNPCNameValue(Item.BannerToNPC(i));
@@ -15513,6 +_,7 @@
 				}
 			}
 
+			BuffLoader.CustomBuffTipSize(buffString, list);
 			Vector2 zero = Vector2.Zero;
 			foreach (Vector2 item2 in list) {
 				if (zero.X < item2.X)
@@ -15530,7 +_,7 @@
 
 			for (int k = 0; k < 5; k++) {
 				int num11 = X;
-				int num12 = Y + (int)FontAssets.MouseText.Value.MeasureString(buffString).Y;
+				int num11 = Y + buffNameHeight;
 				Microsoft.Xna.Framework.Color color = Microsoft.Xna.Framework.Color.Black;
 				switch (k) {
 					case 0:
@@ -15599,9 +_,11 @@
 					spriteBatch.DrawString(FontAssets.MouseText.Value, text, new Vector2(num14, num15), color2, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 				}
 
-				if (flag)
+				if (flag) // Todo, BuffLoader.DrawCustomBuffTip here? This is new to fix too many banner buffs I think.
 					break;
 			}
+
+			BuffLoader.DrawCustomBuffTip(buffString, spriteBatch, X, Y + (int)fontMouseText.MeasureString(buffString).Y);
 		}
 
 		protected void DrawFPS() {
@@ -15836,7 +_,7 @@
 					continue;
 
 				bool flag = false;
-				if (((gore[i].type >= 706 && gore[i].type <= 717) || gore[i].type == 943 || gore[i].type == 1147 || (gore[i].type >= 1160 && gore[i].type <= 1162)) && (gore[i].frame < 7 || gore[i].frame > 9))
+				if (ModGore.DrawBackGore(gore[i]))
 					flag = true;
 
 				if (flag) {
@@ -15844,11 +_,11 @@
 					if (gore[i].Frame.ColumnCount > 1 || gore[i].Frame.RowCount > 1) {
 						Microsoft.Xna.Framework.Rectangle sourceRectangle = gore[i].Frame.GetSourceRectangle(TextureAssets.Gore[gore[i].type].Value);
 						Microsoft.Xna.Framework.Color alpha = gore[i].GetAlpha(Lighting.GetColor((int)((double)gore[i].position.X + (double)sourceRectangle.Width * 0.5) / 16, (int)(((double)gore[i].position.Y + (double)sourceRectangle.Height * 0.5) / 16.0)));
-						spriteBatch.Draw(TextureAssets.Gore[gore[i].type].Value, new Vector2(gore[i].position.X - screenPosition.X + (float)(sourceRectangle.Width / 2), gore[i].position.Y - screenPosition.Y + (float)(sourceRectangle.Height / 2) - 2f), sourceRectangle, alpha, gore[i].rotation, new Vector2(sourceRectangle.Width / 2, sourceRectangle.Height / 2), gore[i].scale, SpriteEffects.None, 0f);
+						spriteBatch.Draw(goreTexture[gore[i].type], new Vector2(gore[i].position.X + gore[i].drawOffset.X - screenPosition.X + (float)(goreTexture[gore[i].type].Width / 2), gore[i].position.Y + gore[i].drawOffset.Y - screenPosition.Y + num / 2 - 2f), new Microsoft.Xna.Framework.Rectangle(0, num * gore[i].frame, goreTexture[gore[i].type].Width, num), alpha, gore[i].rotation, new Vector2(goreTexture[gore[i].type].Width / 2, num / 2), gore[i].scale, SpriteEffects.None, 0f);
 					}
 					else {
 						Microsoft.Xna.Framework.Color alpha2 = gore[i].GetAlpha(Lighting.GetColor((int)((double)gore[i].position.X + (double)TextureAssets.Gore[gore[i].type].Width() * 0.5) / 16, (int)(((double)gore[i].position.Y + (double)TextureAssets.Gore[gore[i].type].Height() * 0.5) / 16.0)));
-						spriteBatch.Draw(TextureAssets.Gore[gore[i].type].Value, new Vector2(gore[i].position.X - screenPosition.X + (float)(TextureAssets.Gore[gore[i].type].Width() / 2), gore[i].position.Y - screenPosition.Y + (float)(TextureAssets.Gore[gore[i].type].Height() / 2)), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Gore[gore[i].type].Width(), TextureAssets.Gore[gore[i].type].Height()), alpha2, gore[i].rotation, new Vector2(TextureAssets.Gore[gore[i].type].Width() / 2, TextureAssets.Gore[gore[i].type].Height() / 2), gore[i].scale, SpriteEffects.None, 0f);
+						spriteBatch.Draw(goreTexture[gore[i].type], new Vector2(gore[i].position.X + gore[i].drawOffset.X - screenPosition.X + (float)(goreTexture[gore[i].type].Width / 2), gore[i].position.Y + gore[i].drawOffset.Y - screenPosition.Y + (float)(goreTexture[gore[i].type].Height / 2)), new Microsoft.Xna.Framework.Rectangle(0, 0, goreTexture[gore[i].type].Width, goreTexture[gore[i].type].Height), alpha2, gore[i].rotation, new Vector2(goreTexture[gore[i].type].Width / 2, goreTexture[gore[i].type].Height / 2), gore[i].scale, SpriteEffects.None, 0f);
 					}
 				}
 			}
@@ -15860,7 +_,7 @@
 				if (!gore[i].active || gore[i].type <= 0)
 					continue;
 
-				if (((gore[i].type >= 706 && gore[i].type <= 717) || gore[i].type == 943 || gore[i].type == 1147 || (gore[i].type >= 1160 && gore[i].type <= 1162)) && (gore[i].frame < 7 || gore[i].frame > 9)) {
+				if (ModGore.DrawBackGore(gore[i])) {
 					drawBackGore = true;
 					continue;
 				}
@@ -15873,18 +_,18 @@
 						value.Y += 4f;
 
 					Microsoft.Xna.Framework.Color alpha = gore[i].GetAlpha(Lighting.GetColor((int)((double)gore[i].position.X + (double)sourceRectangle.Width * 0.5) / 16, (int)(((double)gore[i].position.Y + (double)sourceRectangle.Height * 0.5) / 16.0)));
-					spriteBatch.Draw(TextureAssets.Gore[gore[i].type].Value, new Vector2(gore[i].position.X - screenPosition.X + (float)(sourceRectangle.Width / 2), gore[i].position.Y - screenPosition.Y + (float)(sourceRectangle.Height / 2) - 2f) + value, sourceRectangle, alpha, gore[i].rotation, new Vector2(sourceRectangle.Width / 2, sourceRectangle.Height / 2), gore[i].scale, SpriteEffects.None, 0f);
+					spriteBatch.Draw(goreTexture[gore[i].type], new Vector2(gore[i].position.X + gore[i].drawOffset.X - screenPosition.X + (float)(goreTexture[gore[i].type].Width / 2), gore[i].position.Y + gore[i].drawOffset.Y - screenPosition.Y + num / 2 - 2f), new Microsoft.Xna.Framework.Rectangle(0, num * gore[i].frame, goreTexture[gore[i].type].Width, num), alpha, gore[i].rotation, new Vector2(goreTexture[gore[i].type].Width / 2, num / 2), gore[i].scale, SpriteEffects.None, 0f);
 				}
 				else {
 					Microsoft.Xna.Framework.Color alpha2 = gore[i].GetAlpha(Lighting.GetColor((int)((double)gore[i].position.X + (double)TextureAssets.Gore[gore[i].type].Width() * 0.5) / 16, (int)(((double)gore[i].position.Y + (double)TextureAssets.Gore[gore[i].type].Height() * 0.5) / 16.0)));
-					spriteBatch.Draw(TextureAssets.Gore[gore[i].type].Value, new Vector2(gore[i].position.X - screenPosition.X + (float)(TextureAssets.Gore[gore[i].type].Width() / 2), gore[i].position.Y - screenPosition.Y + (float)(TextureAssets.Gore[gore[i].type].Height() / 2)), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Gore[gore[i].type].Width(), TextureAssets.Gore[gore[i].type].Height()), alpha2, gore[i].rotation, new Vector2(TextureAssets.Gore[gore[i].type].Width() / 2, TextureAssets.Gore[gore[i].type].Height() / 2), gore[i].scale, SpriteEffects.None, 0f);
+					spriteBatch.Draw(goreTexture[gore[i].type], new Vector2(gore[i].position.X + gore[i].drawOffset.X - screenPosition.X + (float)(goreTexture[gore[i].type].Width / 2), gore[i].position.Y + gore[i].drawOffset.Y - screenPosition.Y + (float)(goreTexture[gore[i].type].Height / 2)), new Microsoft.Xna.Framework.Rectangle(0, 0, goreTexture[gore[i].type].Width, goreTexture[gore[i].type].Height), alpha2, gore[i].rotation, new Vector2(goreTexture[gore[i].type].Width / 2, goreTexture[gore[i].type].Height / 2), gore[i].scale, SpriteEffects.None, 0f);
 				}
 			}
 
 			TimeLogger.DetailedDrawTime(24);
 		}
 
-		public void DrawHealthBar(float X, float Y, int Health, int MaxHealth, float alpha, float scale = 1f, bool noFlip = false) {
+		public void DrawHealthBar(float X, float Y, int Health, int MaxHealth, float alpha, float scale = 1f) {
 			if (Health <= 0)
 				return;
 
@@ -16018,6 +_,8 @@
 				num = 10f;
 			else if (theNPC.type == 152)
 				num = 6f;
+			else if (npc[i].modNPC != null)
+				num = npc[i].modNPC.drawOffsetY;
 			else if (theNPC.type == 153 || theNPC.type == 154)
 				num = 2f;
 			else if (theNPC.type == 165 || theNPC.type == 237 || theNPC.type == 238 || theNPC.type == 240 || theNPC.type == 531)
@@ -16056,8 +_,14 @@
 				if (theNPC.type == 637 || theNPC.type == 656)
 					num -= 10f;
 			}
+			}
+			catch (Exception e) {
+				Logging.Terraria.Error(e);
+			}
 
 			return num * theNPC.scale;
+
+			base.Update(gameTime); //Vanilla bug, moved from DoUpdate. Early returns fail to call base.Update, and prevent streaming audio from playing
 		}
 
 		protected void DrawProjectiles() {
@@ -16161,7 +_,7 @@
 			Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle((int)screenPosition.X - 800, (int)screenPosition.Y - 800, screenWidth + 1600, screenHeight + 1600);
 			for (int num = 199; num >= 0; num--) {
 				try {
-					if (npc[num].active && npc[num].type > 0 && npc[num].type < 663 && !npc[num].hide) {
+					if (npc[num].active && npc[num].type > 0 && !npc[num].hide) {
 						npc[num].position += npc[num].netOffset;
 						if (npc[num].behindTiles == behindTiles) {
 							if (npc[num].type == 125 || npc[num].type == 126) {
@@ -16274,12 +_,12 @@
 			}
 		}
 
-		protected void DrawNPCCheckAlt(NPC n) {
+		public void DrawNPCCheckAlt(NPC n) {
 			if (TownNPCProfiles.Instance.GetProfile(n.type, out ITownNPCProfile profile))
 				TextureAssets.Npc[n.type] = profile.GetTextureNPCShouldUse(n);
 		}
 
-		protected void DrawNPC(int iNPCIndex, bool behindTiles) {
+		public void DrawNPC(int iNPCIndex, bool behindTiles) {
 			NPC rCurrentNPC = npc[iNPCIndex];
 			Vector2 screenPos = screenPosition;
 			DrawNPCDirect(spriteBatch, rCurrentNPC, behindTiles, screenPos);
@@ -16694,6 +_,11 @@
 				mySpriteBatch.Draw(TextureAssets.Ninja.Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) + zero.X, rCurrentNPC.position.Y - screenPos.Y + (float)(rCurrentNPC.height / 2) + zero.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Ninja.Width(), TextureAssets.Ninja.Height()), npcColor, num34, new Vector2(TextureAssets.Ninja.Width() / 2, TextureAssets.Ninja.Height() / 2), 1f, SpriteEffects.None, 0f);
 			}
 
+			if (!NPCLoader.PreDraw(npc[iNPCIndex], spriteBatch, color9)) {
+				NPCLoader.PostDraw(npc[iNPCIndex], spriteBatch, color9);
+				return;
+			}
+
 			if (type == 71) {
 				Vector2 zero2 = Vector2.Zero;
 				float num35 = 0f;
@@ -16711,6 +_,8 @@
 
 				instance.LoadItem(327);
 				mySpriteBatch.Draw(TextureAssets.Item[327].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) + zero2.X, rCurrentNPC.position.Y - screenPos.Y + (float)(rCurrentNPC.height / 2) + zero2.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Item[327].Width(), TextureAssets.Item[327].Height()), npcColor, num35, new Vector2(TextureAssets.Item[327].Width() / 2, TextureAssets.Item[327].Height() / 2), 1f, SpriteEffects.None, 0f);
+
+				PlayerHooks.SendClientChanges(player[myPlayer], clientPlayer);
 			}
 
 			if (type == 69)
@@ -19993,6 +_,7 @@
 				}
 
 				instance.LoadItem(num8);
+				NPCLoader.DrawTownAttackGun(n, ref num6, ref num7, ref num8);
 				Texture2D value3 = TextureAssets.Item[num8].Value;
 				int num10 = (int)DrawPlayerItemPos(1f, num8).X - num9;
 				Vector2 origin2 = new Vector2(-num10, value3.Height / 2);
@@ -20058,6 +_,7 @@
 						zero.Y = 12f;
 				}
 
+				NPCLoader.DrawTownAttackSwing(n, ref texture2D6, ref num10, ref scaleFactor, ref zero);
 				Tuple<Vector2, float> swingStats = n.GetSwingStats(NPCID.Sets.AttackTime[n.type] * 2, (int)n.ai[1], n.spriteDirection, num11, num11);
 				Vector2 vector4 = swingStats.Item1 + (swingStats.Item1 - n.Center) * scaleFactor + zero;
 				Vector2 origin4 = value9.Size() * new Vector2((n.spriteDirection != 1) ? 1 : 0, 1f);
@@ -21452,6 +_,11 @@
 			if (projectile.type == 14)
 				color29 = Microsoft.Xna.Framework.Color.White;
 
+			if (!ProjectileLoader.PreDraw(projectile, spriteBatch, color25)) {
+				ProjectileLoader.PostDraw(projectile, spriteBatch, color25);
+				return;
+			}
+
 			int num135 = 0;
 			int num136 = 0;
 			if (projectile.type == 175)
@@ -21469,9 +_,11 @@
 			}
 
 			if (projectile.bobber)
+				//patch file: color9
 				num135 = 8;
 
 			if (projectile.type == 519) {
+				//patch file: num130, num131
 				num135 = 6;
 				num136 -= 6;
 			}
@@ -21638,6 +_,7 @@
 				num136 = 4;
 			}
 
+			//patch file: num132
 			float num137 = (float)(TextureAssets.Projectile[projectile.type].Width() - projectile.width) * 0.5f + (float)projectile.width * 0.5f;
 			if (projectile.type == 50 || projectile.type == 53 || projectile.type == 515 || projectile.type == 870)
 				num136 = -8;
@@ -21802,6 +_,7 @@
 			if (projectile.type == 398)
 				num135 = 8;
 
+			ProjectileLoader.DrawOffset(projectile, ref num131, ref num130, ref num132);
 			SpriteEffects spriteEffects = SpriteEffects.None;
 			if (projectile.spriteDirection == -1)
 				spriteEffects = SpriteEffects.FlipHorizontally;
@@ -24993,7 +_,7 @@
 				}
 
 				if (projectile.bobber) {
-					if (projectile.ai[1] > 0f && projectile.ai[1] < 5043f && projectile.ai[0] == 1f) {
+						if (projectile.ai[1] > 0f && projectile.ai[0] == 1f) {
 						int num385 = (int)projectile.ai[1];
 						Vector2 center5 = projectile.Center;
 						float rotation30 = projectile.rotation;
@@ -25038,6 +_,10 @@
 					if (projectile.type == 473)
 						EntitySpriteDraw(TextureAssets.Projectile[projectile.type].Value, new Vector2(projectile.position.X - screenPosition.X + num137 + (float)num136, projectile.position.Y - screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Projectile[projectile.type].Width(), TextureAssets.Projectile[projectile.type].Height()), new Microsoft.Xna.Framework.Color(255, 255, 0, 0), projectile.rotation, new Vector2(num137, projectile.height / 2 + num135), projectile.scale, spriteEffects, 0);
 
+						ModProjectile modProjectile = projectile.modProjectile;
+						if (modProjectile != null && ModContent.TryGetTexture(modProjectile.GlowTexture, out var glowTexture))
+							spriteBatch.Draw(glowTexture, new Vector2(projectile.position.X - screenPosition.X + num132 + num131, projectile.position.Y - screenPosition.Y + projectile.height / 2 + projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, projectileTexture[projectile.type].Width, projectileTexture[projectile.type].Height)), new Microsoft.Xna.Framework.Color(250, 250, 250, projectile.alpha), projectile.rotation, new Vector2(num132, projectile.height / 2 + num130), projectile.scale, spriteEffects, 0f);
+
 					if (projectile.type == 312) {
 						ulong seed3 = TileFrameSeed;
 						for (int num388 = 0; num388 < 4; num388++) {
@@ -27051,7 +_,7 @@
 			}
 		}
 
-		public void PrepareDrawnEntityDrawing(Entity entity, int intendedShader) {
+		public void DrawItem(Item item, int whoami) {
 			CurrentDrawnEntity = entity;
 			if (intendedShader != 0) {
 				if (CurrentDrawnEntityShader == 0 || CurrentDrawnEntityShader == -1) {
@@ -27151,6 +_,7 @@
 				else if (npc[i].type == 548) {
 					DrawCacheNPCsBehindNonSolidTiles.Add(i);
 				}
+				NPCLoader.DrawBehind(Main.npc[i], i);
 			}
 		}
 
@@ -27184,7 +_,7 @@
 					DrawCacheProjsBehindNPCs.Add(i);
 
 				if (projectile[i].type != 636 && projectile[i].type != 598)
-					continue;
+					goto postProjDrawCache;
 
 				bool flag = true;
 				if (projectile[i].ai[0] == 1f) {
@@ -27201,6 +_,9 @@
 
 				if (flag)
 					DrawCacheProjsBehindProjectiles.Add(i);
+				
+			postProjDrawCache:
+				ProjectileLoader.DrawBehind(projectile[i], i, DrawCacheProjsBehindNPCsAndTiles, DrawCacheProjsBehindNPCs, DrawCacheProjsBehindProjectiles, DrawCacheProjsOverWiresUI);
 			}
 		}
 
@@ -27637,6 +_,8 @@
 			for (int i = 0; i < 400; i++) {
 				DrawItem(item[i], i);
 			}
+
+			ItemLoader.PostDrawInWorld(item, spriteBatch, color, currentColor, num4, scale, whoami);
 		}
 
 		protected void DrawRain() {
@@ -27769,13 +_,19 @@
 					}
 
 					Microsoft.Xna.Framework.Color newColor = Lighting.GetColor((int)((double)dust.position.X + 4.0) / 16, (int)((double)dust.position.Y + 4.0) / 16);
-					if (dust.type == 6 || dust.type == 15 || (dust.type >= 59 && dust.type <= 64))
+					if (dust.type == 6 || dust.type == 15 || dust.type >= 59 && dust.type <= 64)//TODO: why this?
 						newColor = Microsoft.Xna.Framework.Color.White;
 
 					newColor = dust.GetAlpha(newColor);
 					if (dust.type == 213)
 						scale = 1f;
 
+						ModDust modDust = ModDust.GetDust(dust.type);
+						if (modDust != null) {
+							modDust.Draw(dust, newColor, scale);
+							continue;
+						}
+
 					spriteBatch.Draw(TextureAssets.Dust.Value, dust.position - screenPosition, dust.frame, newColor, dust.rotation, new Vector2(4f, 4f), scale, SpriteEffects.None, 0f);
 					if (dust.color.PackedValue != 0) {
 						Microsoft.Xna.Framework.Color color6 = dust.GetColor(newColor);
@@ -27801,6 +_,9 @@
 			if (player[myPlayer].statLifeMax > 100)
 				flag = true;
 
+			ItemLoader.DrawHair(drawPlayer, ref flag4, ref flag5);
+			drawInfo.drawHair = flag4;
+			drawInfo.drawAltHair = flag5;
 			bool flag2 = false;
 			if (player[myPlayer].statManaMax > 20)
 				flag2 = true;
@@ -28494,7 +_,11 @@
 			Microsoft.Xna.Framework.Color textColor = new Microsoft.Xna.Framework.Color(num, num, num, num);
 			bool flag = InGameUI.CurrentState is UIVirtualKeyboard && PlayerInput.UsingGamepad;
 			int lineAmount;
+			/*
 			string[] array = Utils.WordwrapString(npcChatText, FontAssets.MouseText.Value, 460, 10, out lineAmount);
+			*/
+			var snippets = Utils.WordwrapStringSmart(npcChatText, Microsoft.Xna.Framework.Color.White, fontMouseText, 460, 10);
+			lineAmount = snippets.Count;
 			if (editSign) {
 				textBlinkerCount++;
 				if (textBlinkerCount >= 20) {
@@ -28507,17 +_,35 @@
 				}
 
 				if (textBlinkerState == 1)
+					/*
 					array[lineAmount] += "|";
+					*/
+					snippets[lineAmount - 1].Add(new TextSnippet("|", Microsoft.Xna.Framework.Color.White, 1f));
 
 				instance.DrawWindowsIMEPanel(new Vector2(screenWidth / 2, 90f), 0.5f);
 			}
 
+			/*
 			lineAmount++;
+			*/
 			spriteBatch.Draw(TextureAssets.ChatBack.Value, new Vector2(screenWidth / 2 - TextureAssets.ChatBack.Width() / 2, 100f), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.ChatBack.Width(), (lineAmount + 1) * 30), color, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 			spriteBatch.Draw(TextureAssets.ChatBack.Value, new Vector2(screenWidth / 2 - TextureAssets.ChatBack.Width() / 2, 100 + (lineAmount + 1) * 30), new Microsoft.Xna.Framework.Rectangle(0, TextureAssets.ChatBack.Height() - 30, TextureAssets.ChatBack.Width(), 30), color, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
+			TextSnippet hoveredTextSnippet = null;
 			for (int i = 0; i < lineAmount; i++) {
+				/*
 				if (array[i] != null)
 					Utils.DrawBorderStringFourWay(spriteBatch, FontAssets.MouseText.Value, array[i], 170 + (screenWidth - 800) / 2, 120 + i * 30, textColor, Microsoft.Xna.Framework.Color.Black, Vector2.Zero);
+				*/
+				int hoveredSnippet;
+				ChatManager.DrawColorCodedStringWithShadow(spriteBatch, fontMouseText, snippets[i].ToArray(), new Vector2((float)(170 + (screenWidth - 800) / 2), (float)(120 + i * 30)), 0, Vector2.Zero, Vector2.One, out hoveredSnippet, -1);
+				if (hoveredSnippet > -1)
+					hoveredTextSnippet = snippets[i][hoveredSnippet];
+			}
+
+			if (hoveredTextSnippet != null) {
+				hoveredTextSnippet.OnHover();
+				if (mouseLeft && mouseLeftRelease)
+					hoveredTextSnippet.OnClick();
 			}
 
 			Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle(screenWidth / 2 - TextureAssets.ChatBack.Width() / 2, 100, TextureAssets.ChatBack.Width(), (lineAmount + 2) * 30);
@@ -28551,12 +_,16 @@
 			string focusText = "";
 			string focusText2 = "";
 			int num4 = player[myPlayer].statLifeMax2 - player[myPlayer].statLife;
-			for (int j = 0; j < 22; j++) {
+			for (int j = 0; j < Player.MaxBuffs; j++) {
 				int num5 = player[myPlayer].buffType[j];
-				if (debuff[num5] && player[myPlayer].buffTime[j] > 60 && num5 != 28 && num5 != 34 && num5 != 87 && num5 != 89 && num5 != 21 && num5 != 86 && num5 != 199)
+				if (debuff[num5] && player[myPlayer].buffTime[j] > 5 && BuffLoader.CanBeCleared(num5))
 					num4 += 100;
 			}
 
+			int health = player[myPlayer].statLifeMax2 - player[myPlayer].statLife;
+			bool removeDebuffs = true;
+			string reason = "";
+			bool canHeal = true;
 			if (NPC.downedGolemBoss)
 				num4 *= 200;
 			else if (NPC.downedPlantBoss)
@@ -28771,6 +_,7 @@
 				}
 			}
 
+			NPCLoader.SetChatButtons(ref focusText, ref focusText2);
 			if (!flag) {
 				DrawNPCChatButtons(num, textColor, lineAmount, focusText, focusText2);
 				if (text != null) {
@@ -28784,6 +_,8 @@
 				}
 			}
 
+			ProjectileLoader.PostDraw(projectile, spriteBatch, color25);
+
 			if (PlayerInput.IgnoreMouseInterface)
 				return;
 
@@ -28809,7 +_,12 @@
 				else if (NPCID.Sets.IsTownPet[npc[player[myPlayer].talkNPC].type]) {
 					player[myPlayer].PetAnimal(player[myPlayer].talkNPC);
 				}
+
+				if (!NPCLoader.PreChatButtonClicked(true))
+					return;
+
+				NPCLoader.OnChatButtonClicked(true);
-				else if (npc[player[myPlayer].talkNPC].type == 369) {
+				if (npc[player[myPlayer].talkNPC].type == 369) {
 					npcChatCornerItem = 0;
 					SoundEngine.PlaySound(12);
 					bool flag2 = false;
@@ -28977,10 +_,14 @@
 
 					SoundEngine.PlaySound(12);
 					if (num4 > 0) {
+						if (!canHeal) {
+							npcChatText = reason;
+							return;
+						}
 						if (player[myPlayer].BuyItem(num4)) {
 							AchievementsHelper.HandleNurseService(num4);
 							SoundEngine.PlaySound(SoundID.Item4);
-							player[myPlayer].HealEffect(player[myPlayer].statLifeMax2 - player[myPlayer].statLife);
+							player[myPlayer].HealEffect(health, true);
 							if ((double)player[myPlayer].statLife < (double)player[myPlayer].statLifeMax2 * 0.25)
 								npcChatText = Lang.dialog(227);
 							else if ((double)player[myPlayer].statLife < (double)player[myPlayer].statLifeMax2 * 0.5)
@@ -28990,14 +_,18 @@
 							else
 								npcChatText = Lang.dialog(230);
 
-							player[myPlayer].statLife = player[myPlayer].statLifeMax2;
-							for (int l = 0; l < 22; l++) {
+							player[myPlayer].statLife += health;
+							if (!removeDebuffs) // no indent for better patching
+								goto skipDebuffRemoval;
+							for (int k = 0; k < Player.MaxBuffs; k++) {
 								int num24 = player[myPlayer].buffType[l];
-								if (debuff[num24] && player[myPlayer].buffTime[l] > 0 && num24 != 28 && num24 != 34 && num24 != 87 && num24 != 89 && num24 != 21 && num24 != 86 && num24 != 199) {
+								if (debuff[num24] && player[myPlayer].buffTime[k] > 0 && BuffLoader.CanBeCleared(num24)) {
 									player[myPlayer].DelBuff(l);
 									l = -1;
 								}
 							}
+						skipDebuffRemoval:
+							PlayerHooks.PostNurseHeal(player[myPlayer], npc[player[myPlayer].talkNPC], health, removeDebuffs, num4);
 						}
 						else {
 							int num25 = rand.Next(3);
@@ -29039,6 +_,10 @@
 				if (!npcChatFocus3 || player[myPlayer].talkNPC < 0)
 					return;
 
+				if (!NPCLoader.PreChatButtonClicked(false))
+					return;
+
+				NPCLoader.OnChatButtonClicked(false);
 				if (npc[player[myPlayer].talkNPC].type == 20) {
 					SoundEngine.PlaySound(12);
 					npcChatText = Lang.GetDryadWorldStatusDialog();
@@ -29505,6 +_,7 @@
 			if (ShouldPVPDraw)
 				DrawPVPIcons();
 
+			drawInfo.legArmorShader = shader;
 			int num = 0;
 			int num2 = 0;
 			int num3 = screenWidth;
@@ -29622,6 +_,8 @@
 				}
 			}
 
+			goto layerLoopContinue;
+		altHairLayer:
 			if (armorHide) {
 				armorAlpha -= 0.1f;
 				if (armorAlpha < 0f)
@@ -29660,6 +_,8 @@
 				}
 			}
 
+			goto layerLoopContinue;
+		armorLayer:
 			if (EquipPage == 2) {
 				Microsoft.Xna.Framework.Point value2 = new Microsoft.Xna.Framework.Point(mouseX, mouseY);
 				Microsoft.Xna.Framework.Rectangle r = new Microsoft.Xna.Framework.Rectangle(0, 0, (int)((float)TextureAssets.InventoryBack.Width() * inventoryScale), (int)((float)TextureAssets.InventoryBack.Height() * inventoryScale));
@@ -29765,7 +_,7 @@
 					num29++;
 
 				int num31 = 46;
-				for (int n = 0; n < 22; n++) {
+				for (int n = 0; n < Player.MaxBuffs; n++) {
 					if (player[myPlayer].buffType[n] != 0) {
 						int num32 = num28 / num29;
 						int num33 = num28 % num29;
@@ -29788,10 +_,12 @@
 						if (num34 == 147)
 							bannerMouseOver = true;
 
+						int rare = 0;
 						if (meleeBuff[num34])
-							MouseTextHackZoom(buffName, -10, 0, buffTooltip);
-						else
-							MouseTextHackZoom(buffName, buffTooltip);
+							rare = -10;
+
+						BuffLoader.ModifyBuffTip(num28, ref buffString, ref rare);
+						MouseTextHackZoom(Lang.GetBuffName(num28), rare, 0);
 					}
 				}
 			}
@@ -30011,11 +_,17 @@
 					string text = Lang.inter[46].Value + ": ";
 					if (reforgeItem.type > 0) {
 						int num58 = reforgeItem.value;
-						if (player[myPlayer].discount)
+						bool canApplyDiscount = true;
+						if (!ItemLoader.ReforgePrice(reforgeItem, ref num60, ref canApplyDiscount))
+							goto skipVanillaPricing;
+						
+						if (canApplyDiscount && Main.player[myPlayer].discount)
 							num58 = (int)((double)num58 * 0.8);
 
 						num58 = (int)((double)num58 * player[myPlayer].currentShoppingSettings.PriceAdjustment);
 						num58 /= 3;
+						
+					skipVanillaPricing:
 						string text2 = "";
 						int num59 = 0;
 						int num60 = 0;
@@ -30073,13 +_,23 @@
 
 							mouseReforge = true;
 							player[myPlayer].mouseInterface = true;
-							if (mouseLeftRelease && mouseLeft && player[myPlayer].BuyItem(num58)) {
+							if (mouseLeftRelease && mouseLeft && player[myPlayer].CanBuyItem(num60) && ItemLoader.PreReforge(reforgeItem)) {
+								player[myPlayer].BuyItem(num60);
 								bool favorited = reforgeItem.favorited;
-								reforgeItem.netDefaults(reforgeItem.netID);
-								reforgeItem.Prefix(-2);
+								int stack = reforgeItem.stack; // keep the stack, stacked weps support (i.e. light discs)
+																	//vanilla doesnt have a good way of resetting prefix, so it creates a new item entirely
+																	//before we roll te prefix, we simply copy over the old mod data before doing so
+								Item r = new Item();
+								r.netDefaults(reforgeItem.netID);
+								//TODO: method only used here, probably a poor implementation - noted by CB
+								r = r.CloneWithModdedDataFrom(reforgeItem);
+								r.Prefix(-2);
+								reforgeItem = r.Clone();
 								reforgeItem.position.X = player[myPlayer].position.X + (float)(player[myPlayer].width / 2) - (float)(reforgeItem.width / 2);
 								reforgeItem.position.Y = player[myPlayer].position.Y + (float)(player[myPlayer].height / 2) - (float)(reforgeItem.height / 2);
 								reforgeItem.favorited = favorited;
+								reforgeItem.stack = stack;
+								ItemLoader.PostReforge(reforgeItem);
 								PopupText.NewText(PopupTextContext.ItemReforge, reforgeItem, reforgeItem.stack, noStack: true);
 								SoundEngine.PlaySound(SoundID.Item37);
 							}
@@ -30132,9 +_,9 @@
 				}
 			}
 
-			CreativeMenu.Draw(spriteBatch);
 			bool flag9 = CreativeMenu.Enabled && !CreativeMenu.Blocked;
 			if (!InReforgeMenu && !LocalPlayer.tileEntityAnchor.InUse && !flag9) {
+			if (!InReforgeMenu && !HidePlayerCraftingMenu) {
 				UILinkPointNavigator.Shortcuts.CRAFT_CurrentRecipeBig = -1;
 				UILinkPointNavigator.Shortcuts.CRAFT_CurrentRecipeSmall = -1;
 				if (numAvailableRecipes > 0)
@@ -30213,6 +_,7 @@
 					inventoryBack = color4;
 				}
 
+			HidePlayerCraftingMenu = false;
 				if (numAvailableRecipes > 0) {
 					UILinkPointNavigator.Shortcuts.CRAFT_CurrentRecipeBig = -1;
 					UILinkPointNavigator.Shortcuts.CRAFT_CurrentRecipeSmall = -1;
@@ -30295,6 +_,8 @@
 				}
 			}
 
+			goto layerLoopContinue;
+		postDraw:
 			if (recBigList && !flag9) {
 				UILinkPointNavigator.Shortcuts.CRAFT_CurrentRecipeBig = -1;
 				UILinkPointNavigator.Shortcuts.CRAFT_CurrentRecipeSmall = -1;
@@ -30548,6 +_,11 @@
 				}
 			}
 
+			Position.Y -= (int)num4 / 2;
+			goto layerLoopContinue;
+		balloonAccLayer:
+			Position.Y += (int)num4 / 2;
+
 			if (flag11 != inventorySortMouseOver) {
 				SoundEngine.PlaySound(12);
 				inventorySortMouseOver = flag11;
@@ -30864,6 +_,11 @@
 				inventoryScale = 0.755f;
 				num += 5;
 			}
+			else if ((player[myPlayer].chest == -1 || npcShop == -1) && trashSlotOffset != Point16.Zero) {
+				num += trashSlotOffset.X;
+				num2 += trashSlotOffset.Y;
+				inventoryScale = 0.755f;
+			}
 
 			new Microsoft.Xna.Framework.Color(150, 150, 150, 150);
 			if (mouseX >= num && (float)mouseX <= (float)num + (float)TextureAssets.InventoryBack.Width() * inventoryScale && mouseY >= num2 && (float)mouseY <= (float)num2 + (float)TextureAssets.InventoryBack.Height() * inventoryScale && !PlayerInput.IgnoreMouseInterface) {
@@ -31065,8 +_,11 @@
 			mouseItem.position.Y = player[myPlayer].position.Y + (float)(player[myPlayer].height / 2) - (float)(mouseItem.height / 2);
 			PopupText.NewText(PopupTextContext.ItemCraft, mouseItem, r.createItem.stack);
 			r.Create();
-			if (mouseItem.type > 0 || r.createItem.type > 0)
+			if (mouseItem.type > 0 || r.createItem.type > 0) {
+				RecipeHooks.OnCraft(mouseItem, r);
+				ItemLoader.OnCraft(mouseItem, r);
 				SoundEngine.PlaySound(7);
+			}
 		}
 
 		private static void DrawPVPIcons() {
@@ -31229,9 +_,10 @@
 					if (!item[i].active)
 						continue;
 
-					Microsoft.Xna.Framework.Rectangle drawHitbox = Item.GetDrawHitbox(item[i].type, null);
 					Vector2 bottom = item[i].Bottom;
 					Microsoft.Xna.Framework.Rectangle value = new Microsoft.Xna.Framework.Rectangle((int)(bottom.X - (float)drawHitbox.Width * 0.5f), (int)(bottom.Y - (float)drawHitbox.Height), drawHitbox.Width, drawHitbox.Height);
+					Microsoft.Xna.Framework.Rectangle value = itemAnimations[item[i].type]?.GetFrame(itemTexture[item[i].type]) ?? itemTexture[item[i].type].Bounds;
+					value.Location = new Microsoft.Xna.Framework.Point((int)(item[i].position.X + item[i].width * 0.5 - value.Width * 0.5), (int)(item[i].position.Y + item[i].height - value.Height));
 					if (rectangle.Intersects(value)) {
 						player[myPlayer].cursorItemIconEnabled = false;
 						string text = item[i].AffixName();
@@ -31289,7 +_,7 @@
 					bool flag2 = flag || (SmartInteractShowingGenuine && SmartInteractNPC == k);
 					if (flag2 && ((npc[k].type != 85 && npc[k].type != 341 && npc[k].type != 629 && npc[k].aiStyle != 87) || npc[k].ai[0] != 0f) && npc[k].type != 488) {
 						bool flag3 = SmartInteractShowingGenuine && SmartInteractNPC == k;
-						if (npc[k].townNPC || npc[k].type == 105 || npc[k].type == 106 || npc[k].type == 123 || npc[k].type == 354 || npc[k].type == 376 || npc[k].type == 579 || npc[k].type == 453 || npc[k].type == 589) {
+					if (NPCLoader.CanChat(npc[k], npc[k].townNPC || npc[k].type == 105 || npc[k].type == 106 || npc[k].type == 123 || npc[k].type == 354 || npc[k].type == 376 || npc[k].type == 579 || npc[k].type == 453)) {
 							Microsoft.Xna.Framework.Rectangle rectangle2 = new Microsoft.Xna.Framework.Rectangle((int)(player[myPlayer].position.X + (float)(player[myPlayer].width / 2) - (float)(Player.tileRangeX * 16)), (int)(player[myPlayer].position.Y + (float)(player[myPlayer].height / 2) - (float)(Player.tileRangeY * 16)), Player.tileRangeX * 16 * 2, Player.tileRangeY * 16 * 2);
 							Microsoft.Xna.Framework.Rectangle value4 = new Microsoft.Xna.Framework.Rectangle((int)npc[k].position.X, (int)npc[k].position.Y, npc[k].width, npc[k].height);
 							if (rectangle2.Intersects(value4))
@@ -31372,6 +_,9 @@
 						num7 = x;
 				}
 
+				reason = Language.GetTextValue("tModLoader.DefaultNurseCantHealChat");
+				canHeal = PlayerHooks.ModifyNurseHeal(player[myPlayer], npc[player[myPlayer].talkNPC], ref health, ref removeDebuffs, ref reason);
+				PlayerHooks.ModifyNursePrice(player[myPlayer], npc[player[myPlayer].talkNPC], health, removeDebuffs, ref num16);
 				if (num7 > 460f)
 					num7 = 460f;
 
@@ -31462,14 +_,14 @@
 			recBigList = false;
 			int num = -1;
 			int num2 = 11;
-			for (int i = 0; i < 22; i++) {
+			for (int i = 0; i < Player.MaxBuffs; i++) {
 				if (player[myPlayer].buffType[i] > 0) {
 					_ = player[myPlayer].buffType[i];
 					int x = 32 + i * 38;
 					int num3 = 76;
 					if (i >= num2) {
-						x = 32 + (i - num2) * 38;
-						num3 += 50;
+						x = 32 + Math.Abs(i % 11) * 38;
+						num3 += 50 * (i / 11);
 					}
 
 					num = DrawBuffIcon(num, i, x, num3);
@@ -31489,10 +_,9 @@
 				if (num4 == 147)
 					bannerMouseOver = true;
 
-				if (meleeBuff[num4])
-					MouseTextHackZoom(buffName, -10, 0, buffTooltip);
-				else
-					MouseTextHackZoom(buffName, buffTooltip);
+				int rare = meleeBuff[num4] ? -10 : 0;
+				BuffLoader.ModifyBuffTip(num4, ref buffString, ref rare);
+				MouseTextHackZoom(Lang.GetBuffName(num4), rare);
 			}
 		}
 
@@ -32093,6 +_,8 @@
 				}
 			}
 
+			goto layerLoopContinue;
+		hairLayer:
 			if (!mouseLeft) {
 				grabColorSlider = 0;
 				blockMouse = false;
@@ -32408,6 +_,9 @@
 				if (npcChatFocus2)
 					SoundEngine.PlaySound(12);
 
+				if (wasOpen)
+					Recipe.FindRecipes();
+
 				npcChatFocus2 = false;
 			}
 
@@ -32450,6 +_,8 @@
 				}
 			}
 
+			goto layerLoopContinue;
+		mountFrontLayer:
 			if (!mouseLeft) {
 				grabColorSlider = 0;
 				blockMouse = false;
@@ -32830,7 +_,9 @@
 				SetupDrawInterfaceLayers();
 
 			PlayerInput.SetZoom_UI();
+			List<GameInterfaceLayer> interfaceLayers = new List<GameInterfaceLayer>(_gameInterfaceLayers);
+			ModHooks.ModifyInterfaceLayers(interfaceLayers);
-			using (List<GameInterfaceLayer>.Enumerator enumerator = _gameInterfaceLayers.GetEnumerator()) {
+			using (List<GameInterfaceLayer>.Enumerator enumerator = interfaceLayers.GetEnumerator()) {
 				while (enumerator.MoveNext() && enumerator.Current.Draw()) {
 				}
 			}
@@ -33130,6 +_,8 @@
 		}
 
 		private void DrawInterface_33_MouseText() {
+			// TODO - UI Sorting and selective disable support -  move this to new one between 32 and 33
+			ModHooks.PostDrawInterface(spriteBatch);
 			if (mouseItem.stack <= 0)
 				mouseItem.type = 0;
 
@@ -33242,6 +_,8 @@
 			}
 			else {
 				mouseOver = false;
+
+				ModNet.DrawModDiagnoseNet();
 			}
 		}
 
@@ -33279,6 +_,7 @@
 
 		private static void DrawInterface_26_InterfaceLogic3() {
 			bool flag = playerInventory;
+			bool wasOpen = playerInventory;
 			if (player[myPlayer].dead)
 				playerInventory = false;
 
@@ -33611,6 +_,11 @@
 						if (type == 439 || type == 370)
 							scale = 1.5f;
 
+						if (!NPCLoader.DrawHealthBar(npc[num], ref scale)) {
+							npc[num].position -= npc[num].visualOffset;
+							continue;
+						}
+
 						if ((!expertMode || type != 266) && ((type != 439 && type != 440) || npc[num2].ai[0] != 5f)) {
 							if (type >= 134 && type <= 136) {
 								scale = 1.5f;
@@ -35754,7 +_,7 @@
 				if (selectedMenu >= 1) {
 					changeTheTitle = true;
 					LanguageManager.Instance.SetLanguage(selectedMenu);
-					menuMode = 0;
+					menuMode = Interface.loadModsID;
 					SoundEngine.PlaySound(10);
 					SaveSettings();
 				}
@@ -35892,7 +_,7 @@
 					menuMode = 14;
 				}
 			}
-			else if (netMode == 1 || menuMode == 14) {
+			else if (netMode == 1 && menuMode < 10000 && menuMode != 888 || menuMode == 14) {
 				num5 = 2;
 				array9[0] = statusText;
 				array[0] = true;
@@ -35994,10 +_,14 @@
 #endif
 					str = ((!ActiveWorldFileData.IsCloudSave) ? (str + " -world \"" + worldPathName + "\"") : (str + " -cloudworld \"" + worldPathName + "\""));
 					tServer = new Process();
+					str += " -modpath \"" + ModOrganizer.modPath + "\"";
+					if (showServerConsole)
+						str += " -showserverconsole";
+
 #if WINDOWS
-					tServer.StartInfo.FileName = "TerrariaServer.exe";
+					tServer.StartInfo.FileName = "tModLoaderServer.exe";
 #else
-					tServer.StartInfo.FileName = "TerrariaServer";
+					tServer.StartInfo.FileName = "tModLoaderServer";
 #endif
 					tServer.StartInfo.Arguments = str;
 					if (libPath != "") {
@@ -36006,7 +_,7 @@
 					}
 
 					tServer.StartInfo.UseShellExecute = false;
-					tServer.StartInfo.CreateNoWindow = true;
+					tServer.StartInfo.CreateNoWindow = !showServerConsole;
 					if (SocialAPI.Network != null)
 						SocialAPI.Network.LaunchLocalServer(tServer, MenuServerMode);
 					else
@@ -36027,7 +_,10 @@
 				array4[3] = 30;
 				array4[4] = 70;
 				array4[5] = 70;
+				array4[6] = 70;
-				num5 = 6;
+				num5 = 7;
+				array9[6] = Language.GetTextValue(showServerConsole ? "tModLoader.MPShowServerConsoleYes" : "tModLoader.MPShowServerConsoleNo");
+				array7[6] = 0.5f;
 				array9[0] = Lang.menu[135].Value;
 				array9[4] = Lang.menu[144].Value;
 				array9[5] = Lang.menu[5].Value;
@@ -36088,6 +_,10 @@
 						menuMode = 6;
 						SoundEngine.PlaySound(11);
 						break;
+					case 6:
+						showServerConsole = !showServerConsole;
+						PlaySound(12, -1, -1, 1, 1f, 0f);
+						break;
 				}
 			}
 			else if (menuMode == 15) {
@@ -36108,15 +_,22 @@
 			else if (menuMode == 200) {
 				num5 = 3;
 				array9[0] = Lang.menu[9].Value;
+				if (WorldIO.customDataFail != null)
+					array9[0] = WorldIO.customDataFail.modName + ": " + array9[0];
+
 				array[0] = true;
 				num2 -= 30;
 				array4[1] = 70;
 				array4[2] = 50;
 				array9[1] = Lang.menu[10].Value;
 				array9[2] = Lang.menu[6].Value;
+				if (WorldIO.customDataFail != null)
+					array9[2] = Language.GetTextValue("tModLoader.OpenLogs");
+
 				if (selectedMenu == 1) {
 					if (FileUtilities.Exists(worldPathName + ".bak", ActiveWorldFileData.IsCloudSave)) {
 						FileUtilities.Move(worldPathName + ".bak", worldPathName, ActiveWorldFileData.IsCloudSave);
+						WorldIO.LoadBackup(worldPathName, ActiveWorldFileData.IsCloudSave);
 						SoundEngine.PlaySound(10);
 						WorldGen.playWorld();
 						menuMode = 10;
@@ -36131,13 +_,24 @@
 				if (selectedMenu == 2 || flag5) {
 					flag5 = false;
 					SoundEngine.PlaySound(11);
+					if (WorldIO.customDataFail == null) {
-					menuMode = 0;
+						menuMode = 0;
+					}
+					else {
+						Logging.tML.Error(Language.GetTextValue("tModLoader.WorldIODataException"), WorldIO.customDataFail.InnerException);
+						PlaySound(SoundID.MenuOpen);
+						Process.Start(Logging.LogPath);
+					}
+
 					netMode = 0;
 				}
 			}
 			else if (menuMode == 201) {
 				num5 = 3;
 				array9[0] = Lang.menu[9].Value;
+				if (WorldIO.customDataFail != null)
+					array9[0] = WorldIO.customDataFail.modName + ": " + array9[0];
+
 				array[0] = true;
 				array[1] = true;
 				num2 -= 30;
@@ -36145,9 +_,21 @@
 				array4[2] = 50;
 				array9[1] = Lang.menu[11].Value;
 				array9[2] = Lang.menu[5].Value;
+				if (WorldIO.customDataFail != null)
+					array9[2] = Language.GetTextValue("tModLoader.OpenLogs");
+
 				if (selectedMenu == 2 || flag5) {
 					flag5 = false;
 					SoundEngine.PlaySound(11);
+					if (WorldIO.customDataFail == null) {
+						menuMode = 0;
+					}
+					else {
+						Logging.tML.Error(Language.GetTextValue("tModLoader.WorldIODataException"), WorldIO.customDataFail.InnerException);
+						PlaySound(SoundID.MenuOpen);
+						Process.Start(Logging.LogPath);
+					}
+
 					menuMode = 0;
 					netMode = 0;
 				}
@@ -36195,15 +_,18 @@
 					menuMode = 12;
 				}
 
+				if (!Steam.IsSteamApp) {
-				num11++;
+					num12++;
-				array9[num11] = Lang.menu[131].Value;
+					array9[num12] = Lang.menu[131].Value;
-				if (selectedMenu == num11) {
+					if (selectedMenu == num12) {
-					SoundEngine.PlaySound(10);
+						PlaySound(10);
-					MenuUI.SetState(AchievementsMenu);
+						MenuUI.SetState(AchievementsMenu);
-					menuMode = 888;
+						menuMode = 888;
+					}
 				}
 
 				num11++;
+				Interface.AddMenuButtons(this, selectedMenu, array9, array7, ref num2, ref num4, ref num12, ref num5);
 				array9[num11] = Language.GetText("UI.ResourcePacks").Value;
 				if (selectedMenu == num11) {
 					SoundEngine.PlaySound(10);
@@ -36821,6 +_,7 @@
 					num2 = 210;
 					num4 = 37;
 					num5 = 8;
+					num5++; // Room for tModLoader settings option.
 					array4[num5 - 1] = 8;
 					for (int num19 = 0; num19 < num5; num19++) {
 						array7[num19] = 0.75f;
@@ -36876,6 +_,13 @@
 					}
 
 					num20++;
+					array9[num21] = Language.GetTextValue("tModLoader.tModLoaderSettings");
+					if (selectedMenu == num21) {
+						PlaySound(SoundID.MenuOpen);
+						menuMode = Interface.tModLoaderSettingsID;
+					}
+
+					num21++;
 					array9[num20] = Lang.menu[5].Value;
 					if (selectedMenu == num20 || flag5) {
 						flag5 = false;
@@ -37909,6 +_,9 @@
 						netMode = 0;
 					}
 				}
+				else {
+					Interface.ModLoaderMenus(this, selectedMenu, array9, array7, array4, ref num2, ref num4, ref num5, ref flag5);
+				}
 			}
 
 			if (menuMode == 888) {
@@ -37935,7 +_,8 @@
 					mouseX = (mouseY = (PlayerInput.MouseX = (PlayerInput.MouseY = 0)));
 				}
 
-				for (int num46 = 0; num46 < maxMenuItems; num46++) {
+				for (int i = 0; i < WaterStyleLoader.WaterStyleCount; i++) {
+					if (i != 1 && i != 11 && liquidAlpha[i] > 0f)
 					menuItemScale[num46] = 0.8f;
 				}
 			}
@@ -38432,6 +_,7 @@
 
 			bool flag11 = false;
 			for (int num95 = 0; num95 < num5; num95++) {
+				//patch file: num5, array9, num93
 				if (array9[num95] == null)
 					continue;
 
@@ -38529,6 +_,7 @@
 
 					num104 *= array7[num95];
 					if (!array8[num95])
+						//patch file: array9, array7, array4, num2, num4
 						spriteBatch.DrawString(FontAssets.DeathText.Value, array9[num95], new Vector2(num3 + num102 + array5[num95], (float)(num2 + num4 * num95 + num103) + origin.Y * array7[num95] + (float)array4[num95]), color11, 0f, origin, num104, SpriteEffects.None, 0f);
 					else
 						spriteBatch.DrawString(FontAssets.DeathText.Value, array9[num95], new Vector2(num3 + num102 + array5[num95], (float)(num2 + num4 * num95 + num103) + origin.Y * array7[num95] + (float)array4[num95]), color11, 0f, new Vector2(0f, origin.Y), num104, SpriteEffects.None, 0f);
@@ -38643,6 +_,27 @@
 					Vector2 origin2 = FontAssets.MouseText.Value.MeasureString(versionNumber);
 					origin2.X *= 0.5f;
 					origin2.Y *= 0.5f;
+				if (menuMode == 0 && !ModCompile.DeveloperMode) {
+					origin2.Y *= 2;
+					var text = "Enable Developer Mode";
+					// measure and draw text from bottom right
+					var textSize = fontMouseText.MeasureString(text);
+					var pos = new Vector2(screenWidth - 10f + num106, screenHeight - 2f + num107);
+					var d_color = color12;
+					if (num105 == 4) // final draw
+					{
+						var rect = new Microsoft.Xna.Framework.Rectangle((int)(pos.X - textSize.X), (int)(pos.Y - textSize.Y), (int)textSize.X, (int)textSize.Y);
+						bool mouseover = rect.Contains(mouseX, mouseY);
+						d_color = mouseover ? highVersionColor : new Microsoft.Xna.Framework.Color(120, 120, 120, 76);
+						if (mouseover && mouseLeftRelease && mouseLeft) {
+							PlaySound(SoundID.MenuOpen);
+							menuMode = Interface.developerModeHelpID;
+						}
+					}
+
+					spriteBatch.DrawString(fontMouseText, text, pos, d_color, 0f, textSize, 1f, SpriteEffects.None, 0f);
+				}
+
 					spriteBatch.DrawString(FontAssets.MouseText.Value, versionNumber, new Vector2(origin2.X + (float)num108 + 10f, (float)screenHeight - origin2.Y + (float)num109 - 2f), color12, 0f, origin2, 1f, SpriteEffects.None, 0f);
 				}
 			}
@@ -38673,6 +_,21 @@
 			else
 				mouseRightRelease = true;
 
+			if (mouseMiddle)
+				mouseMiddleRelease = false;
+			else
+				mouseMiddleRelease = true;
+
+			if (mouseXButton1)
+				mouseXButton1Release = false;
+			else
+				mouseXButton1Release = true;
+
+			if (mouseXButton2)
+				mouseXButton2Release = false;
+			else
+				mouseXButton2Release = true;
+
 			if (menuMode == num)
 				GamepadMainMenuHandler.LastDrew = num;
 		}
@@ -39258,6 +_,7 @@
 			if (SceneMetrics.MushroomTileCount > SceneMetrics.MushroomTileMax)
 				num8 = 2;
 
+			UgBgStyleLoader.ChooseStyle(ref num8);
 			if (num8 != undergroundBackground) {
 				oldUndergroundBackground = undergroundBackground;
 				undergroundBackground = num8;
@@ -39463,6 +_,7 @@
 					array3[5] = 127;
 
 				array3[6] = 185 + hellBackStyle;
+				UgBgStyleLoader.FillTextureArray(num9, array3);
 				LoadBackground(array3[0]);
 				LoadBackground(array3[1]);
 				LoadBackground(array3[2]);
@@ -41360,9 +_,12 @@
 						}
 
 						spriteBatch.Draw(TextureAssets.MagicPixel.Value, new Vector2(num14, num15), new Microsoft.Xna.Framework.Rectangle(0, 0, num17, num16), mapTileXnaColor, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
+
+						WallLoader.PostDraw(j, i, wall, spriteBatch);
 					}
 				}
 			}
+			// extra context
 
 			for (int num19 = 0; num19 < MapHelper.numUpdateTile; num19++) {
 				int num20 = MapHelper.updateTileX[num19];
@@ -41695,6 +_,20 @@
 					_lastPingMousePosition = MouseScreen;
 				}
 
+				/* Map texture drawing replaced by an adaptive drawing below, as mod worlds sometimes aren't regular sizes.
+				*/
+				int x = (int)(num + mapFullscreenScale * 10);
+				int y = (int)(num2 + mapFullscreenScale * 10);
+				int width = (int)((maxTilesX - 40) * mapFullscreenScale);
+				int height = (int)((maxTilesY - 40) * mapFullscreenScale);
+				var destinationRectangle = new Microsoft.Xna.Framework.Rectangle(x, y, width, height);
+				spriteBatch.Draw(mapTexture, destinationRectangle, new Microsoft.Xna.Framework.Rectangle(40, 4, 848, 240), Microsoft.Xna.Framework.Color.White);
+				int edgeWidth = (int)(40 * mapFullscreenScale * 5);
+				int edgeHeight = (int)(4 * mapFullscreenScale * 5);
+				destinationRectangle = new Microsoft.Xna.Framework.Rectangle(x - edgeWidth, y - edgeHeight, edgeWidth, height + 2 * edgeHeight);
+				spriteBatch.Draw(mapTexture, destinationRectangle, new Microsoft.Xna.Framework.Rectangle(0, 0, 40, 248), Microsoft.Xna.Framework.Color.White);
+				destinationRectangle = new Microsoft.Xna.Framework.Rectangle(x + width, y - edgeHeight, edgeWidth, height + 2 * edgeHeight);
+				spriteBatch.Draw(mapTexture, destinationRectangle, new Microsoft.Xna.Framework.Rectangle(888, 0, 40, 248), Microsoft.Xna.Framework.Color.White);
 				if (num5 < 1f) {
 					spriteBatch.End();
 					spriteBatch.Begin();
@@ -41799,7 +_,7 @@
 			float num40 = (float)textureMaxHeight * num5;
 			float num41 = num;
 			float num42 = 0f;
-			for (int k = 0; k <= 4; k++) {
+			for (int k = 0; k <= mapTargetX - 1; k++) {
 				if (!((float)((k + 1) * textureMaxWidth) > num7) || !((float)(k * textureMaxWidth) < num7 + num9))
 					continue;
 
@@ -41859,6 +_,7 @@
 			}
 
 			if (!mapFullscreen) {
+				for (int num21 = 0; num21 < bgAlpha2.Length; num21++) {
 				if (mapStyle == 2) {
 					float num53 = (num5 * 0.2f * 2f + 1f) / 3f;
 					if (num53 > 1f)
@@ -42177,6 +_,7 @@
 						}
 					}
 					else if (type >= num99 && type < num99 + num100) {
+						//patch file: num91, num92
 						Tile tile5 = Main.tile[num91, num92];
 						if (tile5 != null) {
 							int num109 = num92;
@@ -42190,6 +_,7 @@
 					}
 					else {
 						text = Lang.GetMapObjectName(type);
+						text = Lang._mapLegendCache.FromTile(Map[num91, num92], num91, num92);
 					}
 				}
 
@@ -42229,6 +_,7 @@
 						}
 					}
 
+					ushort wall = tile.wall;
 					if (!npc[num112].active || npc[num112].GetBossHeadTextureIndex() == -1)
 						continue;
 
@@ -42355,6 +_,7 @@
 				}
 
 				spriteBatch.Draw(TextureAssets.MapIcon[num138].Value, new Vector2(num136, num137), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.MapIcon[num138].Width(), TextureAssets.MapIcon[num138].Height()), new Microsoft.Xna.Framework.Color(num139, num139, num139, num139), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
+				ModHooks.PostDrawFullscreenMap(ref text);
 				DrawCursor(DrawThickCursor());
 			}
 
@@ -42588,6 +_,8 @@
 						spriteBatch.Draw(tex, position + value2, rect, black, rotation, origin, scale, effects, 0f);
 					}
 				}
+
+				WaterStyleLoader.UpdateLiquidAlphas();
 			}
 
 			num2 = 1;
@@ -43139,9 +_,12 @@
 			}
 
 			DrawWater(isBackground, waterStyle, flag ? liquidAlpha[waterStyle] : 1f);
+			
+		postWaterDraw:
+			WaterStyleLoader.DrawWatersToScreen(bg);
 		}
 
-		protected void DrawWater(bool bg = false, int Style = 0, float Alpha = 1f) {
+		protected internal void DrawWater(bool bg = false, int Style = 0, float Alpha = 1f) {
 			if (!Lighting.NotRetro) {
 				oldDrawWater(bg, Style, Alpha);
 				return;
@@ -44337,7 +_,7 @@
 			}
 
 			if (netMode == 1 || (netMode != 2 && gameMenu) || (!enabled && LanternNight.LanternsUp))
-				return;
+				goto postWaterDraw;
 
 			if (!enabled) {
 				windCounter--;
@@ -44461,7 +_,9 @@
 		}
 
 		public void LoadBackground(int i) {
-			if (i >= 0 && TextureAssets.Background[i].State == AssetState.NotLoaded) {
+			// sometimes when updating GraphicsProfile from Reach to HiDef, the device is re-created rather than reset
+			// This happens early, and the background loading texture may be disposed
+			if (i >= 0 && (!backgroundLoaded[i] || backgroundTexture[i].IsDisposed)) {
 				Assets.Request<Texture2D>(TextureAssets.Background[i].Name);
 				backgroundWidth[i] = TextureAssets.Background[i].Width();
 				backgroundHeight[i] = TextureAssets.Background[i].Height();
@@ -44795,6 +_,7 @@
 					color.G = (byte)((float)(int)color.G * num16);
 					color.B = (byte)((float)(int)color.B * num16);
 					color.A = (byte)((float)(int)color.A * num16 * 0.8f);
+						// extra context
 					if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0) {
 						LoadBackground(18);
 						LoadBackground(19);
@@ -44802,6 +_,8 @@
 							spriteBatch.Draw(TextureAssets.Background[18].Value, new Vector2(bgStartX + bgWidthScaled * m, bgTopY), new Microsoft.Xna.Framework.Rectangle(0, 0, backgroundWidth[18], backgroundHeight[18]), color, 0f, default(Vector2), bgScale, SpriteEffects.None, 0f);
 							spriteBatch.Draw(TextureAssets.Background[19].Value, new Vector2(bgStartX + bgWidthScaled * m + 1900, bgTopY + 100), new Microsoft.Xna.Framework.Rectangle(0, 0, backgroundWidth[19], backgroundHeight[19]), color, 0f, default(Vector2), bgScale * 0.9f, SpriteEffects.None, 0f);
 						}
+
+						SurfaceBgStyleLoader.DrawMiddleTexture();
 					}
 				}
 
@@ -46252,6 +_,7 @@
 					bgStartX -= 80;
 				}
 
+				WaterStyleLoader.ChooseWaterStyle(ref waterStyle);
 				if (bgTexIndexes[1] == 51)
 					bgTopY -= 50;
 
@@ -46351,7 +_,7 @@
 
 				bool flag2 = false;
 				bool flag3 = false;
-				if (tile[x, y].type == 10) {
+				if (TileLoader.IsClosedDoor(tile[x, y])) {
 					flag2 = false;
 				}
 				else if (tileSolid[tile[x, y].type] && !tileSolidTop[tile[x, y].type]) {
@@ -46416,6 +_,7 @@
 		}
 
 		protected override void Draw(GameTime gameTime) {
+			try {
 			if (!_isDrawingOrUpdating && IsGraphicsDeviceAvailable) {
 				_isDrawingOrUpdating = true;
 				EnsureRenderTargetContent();
@@ -46426,6 +_,11 @@
 				Assets.TransferCompletedAssets();
 				_isDrawingOrUpdating = false;
 			}
+			}
+			catch (Exception e) {
+				Logging.Terraria.Error(e);
+				throw;
+			}
 		}
 
 		private void DoDraw(GameTime gameTime) {
@@ -46503,6 +_,9 @@
 					}
 
 					stackCounter = 0;
+				
+				finishDrawCloseBackground:
+					SurfaceBgStyleLoader.DrawCloseBackground(num21);
 				}
 			}
 
@@ -46726,9 +_,9 @@
 			UpdateAtmosphereTransparencyToSkyColor();
 			base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Black);
 			base.Draw(gameTime);
-			float val = (float)screenWidth / MinimumZoomComparerX;
-			float val2 = (float)screenHeight / MinimumZoomComparerY;
 			ForcedMinimumZoom = Math.Max(Math.Max(1f, val), val2);
+			float val = screenWidth / (ModLoader.ModLoader.removeForcedMinimumZoom ? 1920f : 8192f);
+			float val2 = screenHeight / (ModLoader.ModLoader.removeForcedMinimumZoom ? 1200f : 8192f);
 			GameViewMatrix.Effects = ((!gameMenu && player[myPlayer].gravDir != 1f) ? SpriteEffects.FlipVertically : SpriteEffects.None);
 			BackgroundViewMatrix.Effects = GameViewMatrix.Effects;
 			BackgroundViewMatrix.Zoom = new Vector2(ForcedMinimumZoom);
@@ -46738,6 +_,7 @@
 			else
 				Rasterizer = RasterizerState.CullClockwise;
 
+			ModHooks.ModifyTransformMatrix(ref GameViewMatrix);
 			bool flag = !drawToScreen && netMode != 2 && !gameMenu && !mapFullscreen && Lighting.NotRetro && Terraria.Graphics.Effects.Filters.Scene.CanCapture();
 			if (flag)
 				Terraria.Graphics.Effects.Filters.Scene.BeginCapture(screenTarget, Microsoft.Xna.Framework.Color.Black);
@@ -46796,7 +_,7 @@
 			spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, Rasterizer, null, GameViewMatrix.TransformationMatrix);
 			DrawBackgroundBlackFill();
 			spriteBatch.End();
-			Overlays.Scene.Draw(spriteBatch, RenderLayers.Landscape);
+			Overlays.Scene.Draw(spriteBatch, RenderLayers.Landscape, true);
 			spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, Rasterizer, null, UIScaleMatrix);
 			if (gameMenu || netMode == 2) {
 				spriteBatch.End();
@@ -46892,6 +_,7 @@
 
 			TimeLogger.DetailedDrawReset();
 			spriteBatch.End();
+			WorldHooks.PostDrawTiles();
 			TimeLogger.DetailedDrawTime(35);
 			HasInteractibleObjectThatIsNotATile = false;
 			SortDrawCacheWorms();
@@ -46963,7 +_,7 @@
 			ScreenObstruction.Draw(spriteBatch);
 			TimeLogger.DetailedDrawReset();
 			spriteBatch.End();
-			Overlays.Scene.Draw(spriteBatch, RenderLayers.All);
+			Overlays.Scene.Draw(spriteBatch, RenderLayers.All, true);
 			if (flag)
 				Terraria.Graphics.Effects.Filters.Scene.EndCapture(null, screenTarget, screenTargetSwap, Microsoft.Xna.Framework.Color.Black);
 
@@ -47183,6 +_,21 @@
 			else
 				mouseRightRelease = true;
 
+			if (mouseMiddle)
+				mouseMiddleRelease = false;
+			else
+				mouseMiddleRelease = true;
+
+			if (mouseXButton1)
+				mouseXButton1Release = false;
+			else
+				mouseXButton1Release = true;
+
+			if (mouseXButton2)
+				mouseXButton2Release = false;
+			else
+				mouseXButton2Release = true;
+
 			if (!PlayerInput.Triggers.Current.MouseRight && !PlayerInput.Triggers.Current.MouseLeft && !preventStackSplitReset)
 				stackSplit = 0;
 
@@ -47259,6 +_,7 @@
 						else if (player.scope)
 							num5 = 0.5f;
 
+							PlayerHooks.ModifyZoom(Main.player[myPlayer], ref num6);
 						Vector2 vector3 = (MouseScreen - new Vector2(screenWidth, screenHeight) / 2f) / (new Vector2(screenWidth, screenHeight) / 2f);
 						num4 = 48f;
 						if (vector3 != Vector2.Zero && num5 != -1f) {
@@ -47284,8 +_,10 @@
 					if (num7 < 0)
 						num7 = 0;
 
-					vector2.X = (float)(num6 - screenWidth / 2) / 1.25f;
-					vector2.Y = (float)(num7 - screenHeight / 2) / 1.25f;
+						float zoom = .8f;
+						PlayerHooks.ModifyZoom(player[myPlayer], ref zoom);
+						num3 = (num7 - screenWidth / 2) * zoom;
+						num4 = (num8 - screenHeight / 2) * zoom;
 					flag = true;
 				}
 				else if (Main.player[myPlayer].inventory[Main.player[myPlayer].selectedItem].type == 1254 && mouseRight) {
@@ -47303,8 +_,10 @@
 					if (num9 < 0)
 						num9 = 0;
 
-					vector2.X = (float)(num8 - screenWidth / 2) / 1.5f;
-					vector2.Y = (float)(num9 - screenHeight / 2) / 1.5f;
+						float zoom = 0.6666667f;
+						PlayerHooks.ModifyZoom(player[myPlayer], ref zoom);
+						num3 = (num9 - screenWidth / 2) * zoom;
+						num4 = (num10 - screenHeight / 2) * zoom;
 					flag = true;
 				}
 				else if (Main.player[myPlayer].inventory[Main.player[myPlayer].selectedItem].type == 1299 && Main.player[myPlayer].selectedItem != 58) {
@@ -47322,8 +_,10 @@
 					if (num11 < 0)
 						num11 = 0;
 
-					vector2.X = (float)(num10 - screenWidth / 2) / 1.5f;
-					vector2.Y = (float)(num11 - screenHeight / 2) / 1.5f;
+						float zoom = 0.6666667f;
+						PlayerHooks.ModifyZoom(player[myPlayer], ref zoom);
+						num3 = (num11 - screenWidth / 2) * zoom;
+						num4 = (num12 - screenHeight / 2) * zoom;
 					flag = true;
 				}
 				else if (Main.player[myPlayer].scope && mouseRight) {
@@ -47341,8 +_,32 @@
 					if (num13 < 0)
 						num13 = 0;
 
-					vector2.X = (float)(num12 - screenWidth / 2) / 2f;
-					vector2.Y = (float)(num13 - screenHeight / 2) / 2f;
+						float zoom = 0.5f;
+						PlayerHooks.ModifyZoom(player[myPlayer], ref zoom);
+						num3 = (num13 - screenWidth / 2) * zoom;
+						num4 = (num14 - screenHeight / 2) * zoom;
+					}
+					else {
+						int mouseXClamped = mouseX;
+						int mouseYClamped = mouseY;
+						if (mouseXClamped > screenWidth)
+							mouseXClamped = screenWidth;
+
+						if (mouseXClamped < 0)
+							mouseXClamped = 0;
+
+						if (mouseYClamped > screenHeight)
+							mouseYClamped = screenHeight;
+
+						if (mouseYClamped < 0)
+							mouseYClamped = 0;
+
+						float zoom = -1f;
+						PlayerHooks.ModifyZoom(player[myPlayer], ref zoom);
+						if (zoom != -1f) {
+							num3 = (mouseXClamped - screenWidth / 2) * zoom;
+							num4 = (mouseYClamped - screenHeight / 2) * zoom;
+						}
 					flag = true;
 				}
 			}
@@ -47388,6 +_,7 @@
 
 			screenPosition.X = (int)screenPosition.X;
 			screenPosition.Y = (int)screenPosition.Y;
+				PlayerHooks.ModifyScreenPosition(player[myPlayer]);
 			ClampScreenPositionToWorld();
 		}
 
@@ -47590,6 +_,8 @@
 		}
 
 		private static void UpdateAtmosphereTransparencyToSkyColor() {
+			// TODO: Add in white and white2 as sunColor and moonColor
+			ModHooks.ModifySunLight(ref tileColor, ref bgColor);
 			float num = maxTilesX / 4200;
 			num *= num;
 			atmo = (float)((double)((screenPosition.Y + (float)(screenHeight / 2)) / 16f - (65f + 10f * num)) / (worldSurface / 5.0));
@@ -47765,6 +_,15 @@
 				return;
 
 			drawBackGore = false;
+			if (bgStyle < SurfaceBgStyleLoader.vanillaSurfaceBgStyleCount) {
+				for (int i = SurfaceBgStyleLoader.vanillaSurfaceBgStyleCount; i < bgAlpha2.Length /*SurfaceBackgroundStyleLoader.SurfaceStyleCount*/; i++) {
+					bgAlpha2[i] -= tranSpeed;
+					if (bgAlpha2[i] < 0f)
+						bgAlpha2[i] = 0f;
+				}
+			}
+
+			SurfaceBgStyleLoader.ModifyFarFades(bgStyle, bgAlpha2, tranSpeed);
 			if (ignoreErrors) {
 				try {
 					DrawGoreBehind();
@@ -48378,6 +_,14 @@
 			}
 		}
 
+		public static void NewText(string newText, Microsoft.Xna.Framework.Color color, bool force = false) {
+			NewText(newText, color.R, color.G, color.B, force);
+		}
+
+		public static void NewText(object o, Microsoft.Xna.Framework.Color color = default, bool force = false) {
+			NewText(o.ToString(), color.R, color.G, color.B, force);
+		}
+
 		public static int GetPreferredBGStyleForPlayer() {
 			int num = bgStyle;
 			int num2 = (int)((screenPosition.X + (float)(screenWidth / 2)) / 16f);
@@ -49019,6 +_,7 @@
 							}
 						}
 
+						SurfaceBgStyleLoader.DrawFarTexture();
 						WorldGen.spawnHardBoss = 0;
 					}
 				}
@@ -49334,7 +_,7 @@
 					num++;
 			}
 
-			for (int j = 0; j < 663; j++) {
+			for (int j = 0; j < townNPCCanSpawn.Length; j++) {
 				townNPCCanSpawn[j] = false;
 			}
 
@@ -49484,6 +_,7 @@
 						continue;
 
 					if (num32 < 2000000000) {
+						//patch file: num27
 						if (player[l].inventory[m].type == 71)
 							num32 += player[l].inventory[m].stack;
 
@@ -49702,6 +_,9 @@
 				num36 = 633;
 
 			WorldGen.prioritizedTownNPCType = num36;
+
+			// TODO, see what changed and see if we need to do anything to integrate mod npc
+			NPCLoader.CanTownNPCSpawn(num26, num27);
 		}
 
 		public static int DamageVar(float dmg, float luck = 0f) {
@@ -49885,7 +_,9 @@
 			}
 
 #if WINDOWS
+			// appears redundant. Just causes the window to fight the user when attempting to resize too small
+			// with this disabled, the window will just snap back to minimum size when released
-			if (!fullscreen && !flag2) {
+			/*if (!fullscreen && !flag2) {
 				if (form.ClientSize.Width < graphics.PreferredBackBufferWidth) {
 					width = form.ClientSize.Width;
 					flag2 = true;
@@ -49895,11 +_,12 @@
 					height = form.ClientSize.Height;
 					flag2 = true;
 				}
-			}
 
+			}*/
 #endif
-			width &= 0x7FFFFFFE;
-			height &= 0x7FFFFFFE;
+			// unknown justification for preventing odd window sizes. Causes excessive device resets.
+			// width &= 2147483646;
+			// height &= 2147483646;
 			width = Math.Max(width, minScreenW);
 			height = Math.Max(height, minScreenH);
 			if (graphics.IsFullScreen != fullscreen) {
@@ -49918,7 +_,9 @@
 				screenHeight = height;
 				graphics.PreferredBackBufferWidth = screenWidth;
 				graphics.PreferredBackBufferHeight = screenHeight;
+				if (width != num3 || height != num4) //avoid resetting the device when it doesn't need resizing
-				graphics.ApplyChanges();
+					graphics.ApplyChanges();
+
 				PlayerInput.CacheOriginalScreenDimensions();
 				FixUIScale();
 				if (Main.OnResolutionChanged != null)
