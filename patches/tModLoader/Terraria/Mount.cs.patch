--- src/Terraria\Terraria\Mount.cs
+++ src/tModLoader\Terraria\Mount.cs
@@ -6,6 +_,7 @@
 using Terraria.GameContent.Achievements;
 using Terraria.Graphics.Shaders;
 using Terraria.ID;
+using Terraria.ModLoader;
 
 namespace Terraria
 {
@@ -39,8 +_,13 @@
 			}
 		}
 
-		private class MountData
+		public class MountData
 		{
+			public ModMountData modMountData {
+				get;
+				set;
+			}
+
 			public Texture2D backTexture;
 			public Texture2D backTextureGlow;
 			public Texture2D backTextureExtra;
@@ -138,7 +_,7 @@
 		public const float drillRotationChange = 0.05235988f;
 		public const float maxDrillLength = 48f;
 		public static int currentShader = 0;
-		private static MountData[] mounts;
+		public static MountData[] mounts;
 		private static Vector2[] scutlixEyePositions;
 		private static Vector2 scutlixTextureSize;
 		public static Vector2 drillDiodePoint1 = new Vector2(36f, -6f);
@@ -147,28 +_,28 @@
 		public static int drillPickPower = 210;
 		public static int drillPickTime = 6;
 		public static int drillBeamCooldownMax = 1;
-		private MountData _data;
+		public MountData _data;
-		private int _type;
+		public int _type;
-		private bool _flipDraw;
+		public bool _flipDraw;
-		private int _frame;
+		public int _frame;
-		private float _frameCounter;
+		public float _frameCounter;
-		private int _frameExtra;
+		public int _frameExtra;
-		private float _frameExtraCounter;
+		public float _frameExtraCounter;
-		private int _frameState;
+		public int _frameState;
-		private int _flyTime;
+		public int _flyTime;
-		private int _idleTime;
+		public int _idleTime;
-		private int _idleTimeNext;
+		public int _idleTimeNext;
-		private float _fatigue;
+		public float _fatigue;
-		private float _fatigueMax;
+		public float _fatigueMax;
-		private bool _abilityCharging;
+		public bool _abilityCharging;
-		private int _abilityCharge;
+		public int _abilityCharge;
-		private int _abilityCooldown;
+		public int _abilityCooldown;
-		private int _abilityDuration;
+		public int _abilityDuration;
-		private bool _abilityActive;
+		public bool _abilityActive;
-		private bool _aiming;
+		public bool _aiming;
 		public List<DrillDebugDraw> _debugDraw;
-		private object _mountSpecificData;
+		public object _mountSpecificData;
-		private bool _active;
+		public bool _active;
 
 		public bool Active {
 			get {
@@ -1252,13 +_,13 @@
 		}
 
 		public static int GetHeightBoost(int MountType) {
-			if (MountType <= -1 || MountType >= 15)
+			if (MountType <= -1 || MountType >= mounts.Length)
 				return 0;
 
 			return mounts[MountType].heightBoost;
 		}
 
-		public int JumpHeight(float xVelocity) {
+		public int JumpHeight(Player player, float xVelocity) {
 			int num = _data.jumpHeight;
 			switch (_type) {
 				case 0:
@@ -1273,10 +_,11 @@
 					break;
 			}
 
+			MountLoader.JumpHeight(player, _data, ref num, xVelocity);
 			return num;
 		}
 
-		public float JumpSpeed(float xVelocity) {
+		public float JumpSpeed(Player player, float xVelocity) {
 			float num = _data.jumpSpeed;
 			switch (_type) {
 				case 0:
@@ -1289,6 +_,7 @@
 					break;
 			}
 
+			MountLoader.JumpSpeed(player, _data, ref num, xVelocity);
 			return num;
 		}
 
@@ -1638,6 +_,9 @@
 		}
 
 		public void UpdateFrame(Player mountedPlayer, int state, Vector2 velocity) {
+			if (!MountLoader.UpdateFrame(mountedPlayer, state, velocity))
+				return;
+
 			if (_frameState != state) {
 				_frameState = state;
 				_frameCounter = 0f;
@@ -2039,6 +_,7 @@
 
 		public void UpdateEffects(Player mountedPlayer) {
 			mountedPlayer.autoJump = AutoJump;
+			MountLoader.UpdateEffects(mountedPlayer);
 			switch (_type) {
 				case 8:
 					if (mountedPlayer.ownedProjectileCounts[453] < 1) {
@@ -2186,11 +_,14 @@
 						else
 							Lighting.AddLight(mountedPlayer.Center + Vector2.UnitX * (float)mountedPlayer.direction * 20f, value3.X, value3.Y, value3.Z);
 
+						mountedPlayer.allDamage += 0.15f;
+						/*
 						mountedPlayer.meleeDamage += 0.15f;
 						mountedPlayer.rangedDamage += 0.15f;
 						mountedPlayer.magicDamage += 0.15f;
 						mountedPlayer.minionDamage += 0.15f;
 						mountedPlayer.thrownDamage += 0.15f;
+						*/
 					}
 					if (mountedPlayer.statLife <= mountedPlayer.statLifeMax2 / 2)
 						mountedPlayer.MountFishronSpecialCounter = 60f;
@@ -2235,7 +_,7 @@
 			if (_type == -1)
 				return;
 
-			for (int i = 0; i < 22; i++) {
+			for (int i = 0; i < Player.MaxBuffs; i++) {
 				if (mountedPlayer.buffType[i] == _data.buff)
 					return;
 
@@ -2286,6 +_,7 @@
 
 		public bool AimAbility(Player mountedPlayer, Vector2 mousePosition) {
 			_aiming = true;
+			MountLoader.AimAbility(this, mountedPlayer, mousePosition);
 			switch (_type) {
 				case 8: {
 						Vector2 vector = ClampToDeadZone(mountedPlayer, mousePosition);
@@ -2552,6 +_,7 @@
 			bool flag2 = false;
 
 			int type5 = _type;
+			flag2 = !MountLoader.Draw(this, playerDrawData, drawType, drawPlayer, ref texture2D, ref texture2D2, ref Position, ref value, ref drawColor, ref color, ref num5, ref effect, ref origin, ref scale2, shadow);
 			if (!flag2) {
 				DrawData item = new DrawData(texture2D, Position, new Rectangle?(value), drawColor, num5, origin, scale2, effect, 0);
 				item.shader = currentShader;
@@ -2612,6 +_,8 @@
 			bool cart = Cart;
 			_active = false;
 			mountedPlayer.ClearBuff(_data.buff);
+			bool skipDust = false;
+			MountLoader.Dismount(this, mountedPlayer, ref skipDust);
 			_mountSpecificData = null;
 			if (cart) {
 				mountedPlayer.ClearBuff(_data.extraBuff);
@@ -2621,7 +_,7 @@
 
 			mountedPlayer.fullRotation = 0f;
 			mountedPlayer.fullRotationOrigin = Vector2.Zero;
-			if (Main.netMode != 2) {
+			if (Main.netMode != 2 && !skipDust) {
 				for (int i = 0; i < 100; i++) {
 					if (_type == 6 || _type == 11 || _type == 13) {
 						if (i % 10 == 0) {
@@ -2659,7 +_,7 @@
 		}
 
 		public void SetMount(int m, Player mountedPlayer, bool faceLeft = false) {
-			if (_type == m || m <= -1 || m >= 15)
+			if (_type == m || m <= -1 || m >= mounts.Length)
 				return;
 
 			if (m == 5 && mountedPlayer.wet)
@@ -2718,7 +_,9 @@
 			if (_type == 8)
 				_mountSpecificData = new DrillMountData();
 
-			if (Main.netMode != 2) {
+			bool skipDust = false;
+			MountLoader.SetMount(this, mountedPlayer, ref skipDust);
+			if (Main.netMode != 2 && !skipDust) {
 				for (int k = 0; k < 100; k++) {
 					if (_type == 6 || _type == 11 || _type == 13) {
 						if (k % 10 == 0) {
