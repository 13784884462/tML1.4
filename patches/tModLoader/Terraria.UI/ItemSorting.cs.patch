--- src/Terraria\Terraria.UI\ItemSorting.cs
+++ src/tModLoader\Terraria.UI\ItemSorting.cs
@@ -2,6 +_,7 @@
 using System.Collections.Generic;
 using System.Linq;
 using Terraria.ID;
+using Terraria.ModLoader;
 
 namespace Terraria.UI
 {
@@ -44,7 +_,7 @@
 				list.Sort(delegate (int x, int y) {
 					int num = inv[y].rare.CompareTo(inv[x].rare);
 					if (num == 0)
-						num = x == y ? 0 : -1;
+						num = x.CompareTo(y);
 
 					return num;
 				});
@@ -64,7 +_,7 @@
 				list.Sort(delegate (int x, int y) {
 					int num = inv[y].rare.CompareTo(inv[x].rare);
 					if (num == 0)
-						num = x == y ? 0 : -1;
+						num = x.CompareTo(y);
 
 					return num;
 				});
@@ -84,7 +_,7 @@
 				list.Sort(delegate (int x, int y) {
 					int num = inv[y].rare.CompareTo(inv[x].rare);
 					if (num == 0)
-						num = x == y ? 0 : -1;
+						num = x.CompareTo(y);
 
 					return num;
 				});
@@ -104,7 +_,7 @@
 				list.Sort(delegate (int x, int y) {
 					int num = inv[y].rare.CompareTo(inv[x].rare);
 					if (num == 0)
-						num = x == y ? 0 : -1;
+						num = x.CompareTo(y);
 
 					return num;
 				});
@@ -124,7 +_,7 @@
 				list.Sort(delegate (int x, int y) {
 					int num = inv[y].rare.CompareTo(inv[x].rare);
 					if (num == 0)
-						num = x == y ? 0 : -1;
+						num = x.CompareTo(y);
 
 					return num;
 				});
@@ -144,7 +_,7 @@
 				list.Sort(delegate (int x, int y) {
 					int num = inv[y].rare.CompareTo(inv[x].rare);
 					if (num == 0)
-						num = x == y ? 0 : -1;
+						num = x.CompareTo(y);
 
 					return num;
 				});
@@ -164,7 +_,7 @@
 				list.Sort(delegate (int x, int y) {
 					int num = inv[y].rare.CompareTo(inv[x].rare);
 					if (num == 0)
-						num = x == y ? 0 : -1;
+						num = x.CompareTo(y);
 
 					return num;
 				});
@@ -252,7 +_,7 @@
 						num = inv[y].stack.CompareTo(inv[x].stack);
 
 					if (num == 0)
-						num = x == y ? 0 : -1;
+						num = x.CompareTo(y);
 
 					return num;
 				});
@@ -272,7 +_,7 @@
 				list.Sort(delegate (int x, int y) {
 					int num = inv[y].rare.CompareTo(inv[x].rare);
 					if (num == 0)
-						num = x == y ? 0 : -1;
+						num = x.CompareTo(y);
 
 					return num;
 				});
@@ -358,7 +_,7 @@
 						num = inv[x].netID.CompareTo(inv[y].netID);
 
 					if (num == 0)
-						num = x == y ? 0 : -1;
+						num = x.CompareTo(y);
 
 					return num;
 				});
@@ -381,7 +_,7 @@
 						num = inv[x].netID.CompareTo(inv[y].netID);
 
 					if (num == 0)
-						num = x == y ? 0 : -1;
+						num = x.CompareTo(y);
 
 					return num;
 				});
@@ -404,7 +_,7 @@
 						num = inv[x].netID.CompareTo(inv[y].netID);
 
 					if (num == 0)
-						num = x == y ? 0 : -1;
+						num = x.CompareTo(y);
 
 					return num;
 				});
@@ -427,7 +_,7 @@
 						num = inv[x].netID.CompareTo(inv[y].netID);
 
 					if (num == 0)
-						num = x == y ? 0 : -1;
+						num = x.CompareTo(y);
 
 					return num;
 				});
@@ -450,7 +_,7 @@
 						num = inv[x].netID.CompareTo(inv[y].netID);
 
 					if (num == 0)
-						num = x == y ? 0 : -1;
+						num = x.CompareTo(y);
 
 					return num;
 				});
@@ -515,7 +_,7 @@
 						num = inv[y].stack.CompareTo(inv[x].stack);
 
 					if (num == 0)
-						num = x == y ? 0 : -1;
+						num = x.CompareTo(y);
 
 					return num;
 				});
@@ -541,7 +_,7 @@
 						num = inv[y].stack.CompareTo(inv[x].stack);
 
 					if (num == 0)
-						num = x == y ? 0 : -1;
+						num = x.CompareTo(y);
 
 					return num;
 				});
@@ -567,7 +_,7 @@
 						num = inv[y].stack.CompareTo(inv[x].stack);
 
 					if (num == 0)
-						num = x == y ? 0 : -1;
+						num = x.CompareTo(y);
 
 					return num;
 				});
@@ -590,7 +_,7 @@
 						num = inv[y].stack.CompareTo(inv[x].stack);
 
 					if (num == 0)
-						num = x == y ? 0 : -1;
+						num = x.CompareTo(y);
 
 					return num;
 				});
@@ -619,7 +_,7 @@
 						num = inv[y].stack.CompareTo(inv[x].stack);
 
 					if (num == 0)
-						num = x == y ? 0 : -1;
+						num = x.CompareTo(y);
 
 					return num;
 				});
@@ -671,7 +_,7 @@
 						num = inv[y].stack.CompareTo(inv[x].stack);
 
 					if (num == 0)
-						num = x == y ? 0 : -1;
+						num = x.CompareTo(y);
 
 					return num;
 				});
@@ -710,7 +_,7 @@
 						num = inv[y].stack.CompareTo(inv[x].stack);
 
 					if (num == 0)
-						num = x == y ? 0 : -1;
+						num = x.CompareTo(y);
 
 					return num;
 				});
@@ -733,7 +_,7 @@
 						num = inv[y].stack.CompareTo(inv[x].stack);
 
 					if (num == 0)
-						num = x == y ? 0 : -1;
+						num = x.CompareTo(y);
 
 					return num;
 				});
@@ -756,7 +_,7 @@
 						num = inv[y].stack.CompareTo(inv[x].stack);
 
 					if (num == 0)
-						num = x == y ? 0 : -1;
+						num = x.CompareTo(y);
 
 					return num;
 				});
@@ -782,7 +_,7 @@
 						num = inv[y].stack.CompareTo(inv[x].stack);
 
 					if (num == 0)
-						num = x == y ? 0 : -1;
+						num = x.CompareTo(y);
 
 					return num;
 				});
@@ -802,7 +_,7 @@
 						num = inv[y].stack.CompareTo(inv[x].stack);
 
 					if (num == 0)
-						num = x == y ? 0 : -1;
+						num = x.CompareTo(y);
 
 					return num;
 				});
@@ -858,7 +_,7 @@
 			list.Add(ItemSortingLayers.LastTilesCommon);
 			list.Add(ItemSortingLayers.LastNotTrash);
 			list.Add(ItemSortingLayers.LastTrash);
-			for (int i = -48; i < 3930; i++) {
+			for (int i = -48; i < ItemLoader.ItemCount; i++) {
 				Item item = new Item();
 				item.netDefaults(i);
 				list2.Add(item);
