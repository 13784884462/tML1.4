--- src/Terraria\Terraria.ID\ItemID.cs
+++ src/tModLoader\Terraria.ID\ItemID.cs
@@ -1,6 +_,7 @@
 using ReLogic.Reflection;
 using System;
 using System.Collections.Generic;
+using Terraria.ModLoader;
 
 namespace Terraria.ID
 {
@@ -294,7 +_,7 @@
 				1103,
 				0,
 				3347,
-				1
+				3347
 			});
 			public static int[] StaffMinionSlotsRequired = Factory.CreateIntSet(1, new int[0]);
 			public static bool[] ExoticPlantsForDyeTrade = Factory.CreateBoolSet(new int[] {
@@ -857,6 +_,7 @@
 				431,
 				432
 			});
+			public static bool[] IsAMaterial = Factory.CreateBoolSet();
 		}
 
 		public const short YellowPhasesaberOld = -24;
@@ -5643,6 +_,37 @@
 				return result;
 
 			return 0;
+		}
+
+		public static string GetUniqueKey(int type) {
+			if (type < 0 || type >= ItemLoader.ItemCount)
+				throw new ArgumentOutOfRangeException("Invalid type: " + type);
+
+			if (type < Count)
+				return "Terraria " + Search.GetName(type);
+
+			var modItem = ItemLoader.GetItem(type);
+			return $"{modItem.mod.Name} {modItem.Name}";
+		}
+
+		public static string GetUniqueKey(Item item) => GetUniqueKey(item.type);
+
+		public static int TypeFromUniqueKey(string key) {
+			string[] parts = key.Split(new char[] { ' ' }, 2);
+			if (parts.Length != 2)
+				return 0;
+
+			return TypeFromUniqueKey(parts[0], parts[1]);
+		}
+		public static int TypeFromUniqueKey(string mod, string name) {
+			if (mod == "Terraria") {
+				if (!Search.ContainsName(name))
+					return 0;
+
+				return Search.GetId(name);
+			}
+
+			return ModLoader.ModLoader.GetMod(mod)?.ItemType(name) ?? 0;
 		}
 	}
 }
