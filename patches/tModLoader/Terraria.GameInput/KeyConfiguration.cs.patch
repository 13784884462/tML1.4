--- src/Terraria\Terraria.GameInput\KeyConfiguration.cs
+++ src/tModLoader\Terraria.GameInput\KeyConfiguration.cs
@@ -1,12 +_,15 @@
 using System;
 using System.Collections.Generic;
 using System.Linq;
+using Terraria.ModLoader;
 
 namespace Terraria.GameInput
 {
 	public class KeyConfiguration
 	{
+		// Make readonly so dicts aren't set to null or whatever, .Clear() is allowed
-		public Dictionary<string, List<string>> KeyStatus = new Dictionary<string, List<string>>();
+		public readonly Dictionary<string, List<string>> KeyStatus = new Dictionary<string, List<string>>();
+		public readonly Dictionary<string, List<string>> UnloadedModKeyStatus = new Dictionary<string, List<string>>();
 
 		public bool DoGrappleAndInteractShareTheSameKey {
 			get {
@@ -19,6 +_,10 @@
 			foreach (string current in PlayerInput.KnownTriggers) {
 				KeyStatus.Add(current, new List<string>());
 			}
+
+			foreach (var current in HotKeyLoader.HotKeys) {
+				KeyStatus.Add(current.uniqueName, new List<string>());
+			}
 		}
 
 		public void Processkey(TriggersSet set, string newKey) {
@@ -37,35 +_,37 @@
 					newSet.KeyStatus[current.Key] = oldSet.KeyStatus[current.Key];
 			}
 		}
-
 		public void ReadPreferences(Dictionary<string, List<string>> dict) {
+			UnloadedModKeyStatus.Clear();
 			foreach (KeyValuePair<string, List<string>> current in dict) {
-				if (KeyStatus.ContainsKey(current.Key)) {
-					KeyStatus[current.Key].Clear();
-					foreach (string current2 in current.Value) {
-						KeyStatus[current.Key].Add(current2);
-					}
-				}
+				if (KeyStatus.ContainsKey(current.Key))
+					KeyStatus[current.Key] = new List<string>(current.Value);
+				else if (current.Key.Contains(":")) // This preserves unloaded mod hotkey values
+					UnloadedModKeyStatus[current.Key] = new List<string>(current.Value);
 			}
 		}
 
 		public Dictionary<string, List<string>> WritePreferences() {
 			Dictionary<string, List<string>> dictionary = new Dictionary<string, List<string>>();
-			foreach (KeyValuePair<string, List<string>> current in KeyStatus) {
-				if (current.Value.Count > 0)
-					dictionary.Add(current.Key, current.Value.ToList());
+			// Make sure to use indexer and not dict.Add, as some keys are sometimes already added (Vanilla bug, problem for modded)
+			foreach (KeyValuePair<string, List<string>> current in KeyStatus.Where(x => x.Value.Count > 0)) {
+				dictionary[current.Key] = current.Value.ToList();
+			}
+
+			foreach (KeyValuePair<string, List<string>> current in UnloadedModKeyStatus.Where(x => x.Value.Count > 0)) {
+				dictionary[current.Key] = current.Value.ToList();
 			}
 
 			if (!dictionary.ContainsKey("MouseLeft") || dictionary["MouseLeft"].Count == 0) {
-				dictionary.Add("MouseLeft", new List<string> {
+				dictionary["MouseLeft"] = new List<string> {
 					"Mouse1"
-				});
+				};
 			}
 
 			if (!dictionary.ContainsKey("Inventory") || dictionary["Inventory"].Count == 0) {
-				dictionary.Add("Inventory", new List<string> {
+				dictionary["Inventory"] = new List<string> {
 					"Escape"
-				});
+				};
 			}
 
 			return dictionary;
