--- src/decompiled\Terraria\Main.cs
+++ src/merged\Terraria\Main.cs
@@ -4,6 +_,9 @@
 using Microsoft.Xna.Framework.Content;
 using Microsoft.Xna.Framework.Graphics;
 using Microsoft.Xna.Framework.Input;
+#if MAC
+using SDL2;
+#endif
 using ReLogic.Graphics;
 using ReLogic.Localization.IME;
 using ReLogic.OS;
@@ -11,10 +_,15 @@
 using System;
 using System.Collections.Generic;
 using System.Diagnostics;
+#if WINDOWS
 using System.Drawing;
+#endif
 using System.IO;
 using System.Linq;
 using System.Reflection;
+#if !WINDOWS
+using System.Runtime.CompilerServices;
+#endif
 using System.Runtime.InteropServices;
 using System.Text;
 using System.Threading;
@@ -51,10 +_,17 @@
 using Terraria.UI.Gamepad;
 using Terraria.Utilities;
 using Terraria.World.Generation;
+#if SERVER
+using Terraria.Server;
+#endif
 
 namespace Terraria
 {
+#if CLIENT
 	public class Main : Game
+#else
+	public class Main : Terraria.Server.Game
+#endif
 	{
 		public delegate void OnPlayerSelected(PlayerFileData player);
 
@@ -4155,6 +_,7 @@
 				LockOnHelper.UseMode = LockOnHelper.LockOnMode.ThreeDS;
 
 			Configuration.Get("InvisibleCursorForGamepad", ref InvisibleCursorForGamepad);
+#if CLIENT && WINDOWS
 			Form form = (Form)Control.FromHandle(instance.Window.Handle);
 			if (screenBorderless) {
 				form.Location = new System.Drawing.Point(0, 0);
@@ -4168,6 +_,7 @@
 				form.FormBorderStyle = FormBorderStyle.Sizable;
 			}
 
+#endif
 			SetDisplayMode(currentValue3, currentValue4, currentValue2);
 			Configuration.Get("SettingsUnlock_WorldEvil", ref SettingsUnlock_WorldEvil);
 			Configuration.Get("SettingsEnabled_MinersWobble", ref SettingsEnabled_MinersWobble);
@@ -4354,9 +_,13 @@
 							if (num >= 2)
 								terrariasFixedTiming = binaryReader.ReadBoolean();
 
-							if (num >= 91 && binaryReader.ReadBoolean())
+							if (num >= 91 && binaryReader.ReadBoolean()) {
+#if CLIENT && WINDOWS
 								((Form)Control.FromHandle(base.Window.Handle)).WindowState = FormWindowState.Maximized;
 
+#endif
+							}
+
 							if (num >= 4) {
 								int width = binaryReader.ReadInt32();
 								int height = binaryReader.ReadInt32();
@@ -4450,8 +_,13 @@
 		private static void EraseWorld(int i) {
 			try {
 				if (!WorldList[i].IsCloudSave) {
+#if WINDOWS
 					FileOperationAPIWrapper.MoveToRecycleBin(WorldList[i].Path);
 					FileOperationAPIWrapper.MoveToRecycleBin(WorldList[i].Path + ".bak");
+#else
+					File.Delete(Main.WorldList[i].Path);
+					File.Delete(Main.WorldList[i].Path + ".bak");
+#endif
 				}
 				else if (SocialAPI.Cloud != null) {
 					SocialAPI.Cloud.Delete(WorldList[i].Path);
@@ -4723,15 +_,10 @@
 
 		public void DedServ() {
 			rand = new UnifiedRandom();
-			if (autoShutdown) {
+			if (autoShutdown)
 				string lpWindowName = Console.Title = "terraria" + rand.Next(int.MaxValue);
-				IntPtr intPtr = FindWindow(null, lpWindowName);
-				if (intPtr != IntPtr.Zero)
-					ShowWindow(intPtr, 0);
-			}
-			else {
+			else
 				Console.Title = "Terraria Server " + versionNumber2;
-			}
 
 			dedServ = true;
 			showSplash = false;
@@ -5439,13 +_,17 @@
 
 		public Main() {
 			instance = this;
+#if CLIENT
 			graphics = new GraphicsDeviceManager(this);
 			base.Content.RootDirectory = "Content";
+#endif
 		}
 
 		protected void SetTitle() {
+#if CLIENT
 			_cachedTitle = Lang.GetRandomGameTitle();
 			Platform.Current.SetWindowUnicodeTitle(base.Window, _cachedTitle);
+#endif
 		}
 
 		public static void InitLifeBytes() {
@@ -5499,6 +_,9 @@
 		}
 
 		protected override void Initialize() {
+#if SERVER
+			netMode = 2;
+#endif
 			LocalFavoriteData.Load();
 			CloudFavoritesData.Load();
 			FindAnnouncementBoxStatus();
@@ -5513,9 +_,14 @@
 			TileEntity.InitializeAll();
 			Projectile.InitializeStaticThings();
 			InitializeItemAnimations();
+#if CLIENT
 			Lighting.Initialize();
 			MapHelper.Initialize();
 			TimeLogger.Initialize();
+#else
+			Mount.Initialize();
+			Minecart.Initialize();
+#endif
 			WorldGen.RandomizeBackgrounds();
 			WorldGen.RandomizeCaveBackgrounds();
 			WorldGen.RandomizeMoonState();
@@ -7918,13 +_,18 @@
 				ActivePlayerFileData.StartPlayTimer();
 				Player.Hooks.EnterWorld(myPlayer);
 			}
+
+#if CLIENT && WINDOWS
 			else {
 				IntPtr systemMenu = GetSystemMenu(base.Window.Handle, bRevert: false);
 				int menuItemCount = GetMenuItemCount(systemMenu);
 				RemoveMenu(systemMenu, menuItemCount - 1, 1024);
 			}
 
+#endif
+#if CLIENT
 			ClientInitialize();
+#endif
 		}
 
 		private void ClientInitialize() {
@@ -7964,6 +_,7 @@
 			OpenRecent();
 			Star.SpawnStars();
 			WorldGen.RandomizeWeather();
+#if CLIENT
 			_achievements = new AchievementManager();
 			AchievementInitializer.Load();
 			DyeInitializer.Load();
@@ -7971,6 +_,7 @@
 			AchievementCompleteUI.Initialize();
 			UILinksInitializer.Load();
 			ItemSorting.SetupWhiteLists();
+#endif
 			foreach (DisplayMode supportedDisplayMode in GraphicsAdapter.DefaultAdapter.SupportedDisplayModes) {
 				if (supportedDisplayMode.Width < minScreenW || supportedDisplayMode.Height < minScreenH || supportedDisplayMode.Width > maxScreenW || supportedDisplayMode.Height > maxScreenH)
 					continue;
@@ -8637,6 +_,25 @@
 		}
 
 		protected void UpdateAudio() {
+#if !WINDOWS
+			if (Main.engine != null)
+				Main.engine.Update();
+
+			lock (Main._audioLock) {
+				for (int i = 0; i < Main.ActiveSoundInstances.Count; i++) {
+					if (Main.ActiveSoundInstances[i] == null) {
+						Main.ActiveSoundInstances.RemoveAt(i);
+						i--;
+					}
+					else if (Main.ActiveSoundInstances[i].State == SoundState.Stopped) {
+						Main.ActiveSoundInstances[i].Dispose();
+						Main.ActiveSoundInstances.RemoveAt(i);
+						i--;
+					}
+				}
+			}
+
+#endif
 			if (!dedServ) {
 				bool flag = (!hasFocus || gamePaused) && netMode == 0;
 				if (flag) {
@@ -11159,9 +_,11 @@
 			PlayerInput.SetZoom_Unscaled();
 			MouseOversTryToClear();
 			PlayerInput.ResetInputsOnActiveStateChange();
+#if CLIENT
 			if (Main.OnTick != null)
 				Main.OnTick();
 
+#endif
 			if (_hasPendingNetmodeChange) {
 				netMode = _targetNetMode;
 				_hasPendingNetmodeChange = false;
@@ -12951,6 +_,7 @@
 		public static extern short GetKeyState(int keyCode);
 
 		public static string GetInputText(string oldString) {
+#if CLIENT
 			if (!hasFocus)
 				return oldString;
 
@@ -13039,6 +_,9 @@
 			}
 
 			return text;
+#else
+			return "";
+#endif
 		}
 
 		public void MouseTextHackZoom(string text) {
@@ -36138,8 +_,13 @@
 
 		protected void QuitGame() {
 			SaveSettings();
+#if CLIENT
 			SocialAPI.Shutdown();
+#endif
 			Exit();
+#if MAC
+			SDL.SDL_DestroyWindow(base.Window.Handle);
+#endif
 		}
 
 		protected Microsoft.Xna.Framework.Color randColor() {
@@ -36763,8 +_,15 @@
 				}
 				else if (selectedMenu == 2 || inputTextEnter || autoPass) {
 					string str = "-autoshutdown -password \"" + Netplay.ServerPassword + "\" -lang " + Language.ActiveCulture.LegacyId;
+#if LINUX
+					str += IntPtr.Size == 8 ? " -x64": " -x86";
+#endif
 					str = ((!ActiveWorldFileData.IsCloudSave) ? (str + " -world \"" + worldPathName + "\"") : (str + " -cloudworld \"" + worldPathName + "\""));
+#if WINDOWS
 					tServer.StartInfo.FileName = "TerrariaServer.exe";
+#else
+					tServer.StartInfo.FileName = "TerrariaServer";
+#endif
 					tServer.StartInfo.Arguments = str;
 					if (libPath != "") {
 						ProcessStartInfo startInfo = tServer.StartInfo;
@@ -37993,11 +_,13 @@
 					}
 
 					bool flag7 = false;
+#if WINDOWS
 					flag7 = true;
 					System.Drawing.Rectangle bounds = Screen.FromPoint(((Form)Control.FromHandle(instance.Window.Handle)).Location).Bounds;
 					if (bounds.Width > maxScreenW || bounds.Height > maxScreenH)
 						flag7 = false;
 
+#endif
 					num2 = 210;
 					num4 = 55;
 					int num28 = 0;
@@ -41550,7 +_,11 @@
 			base.GraphicsDevice.SetRenderTarget(backWaterTarget);
 			base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Transparent);
 			spriteBatch.Begin();
+#if WINDOWS
 			tileBatch.Begin();
+#else
+			tileBatch.Begin(SpriteSortMode.Texture, BlendState.AlphaBlend);
+#endif
 			try {
 				drawWaters(bg: true);
 			}
@@ -47079,6 +_,7 @@
 		}
 
 		private static void CheckMonoliths() {
+#if CLIENT
 			bool flag = player[myPlayer].ZoneTowerVortex || player[myPlayer].ZoneTowerNebula || player[myPlayer].ZoneTowerStardust || player[myPlayer].ZoneTowerSolar;
 			for (int i = 0; i < MonolithFilterNames.Length; i++) {
 				if (!flag && i == monolithType) {
@@ -47096,6 +_,7 @@
 						SkyManager.Instance.Deactivate(MonolithSkyNames[i]);
 				}
 			}
+#endif
 		}
 
 		private void GraphicsDeviceLost(object sender, EventArgs evt) {
@@ -47150,7 +_,9 @@
 			if (!base.IsActive)
 				maxQ = true;
 
+#if CLIENT
 			UpdateDisplaySettings();
+#endif
 			if (Main.OnPreDraw != null)
 				Main.OnPreDraw(gameTime);
 
@@ -49544,6 +_,7 @@
 			BirthdayParty.UpdateTime();
 			Sandstorm.UpdateTime();
 			DD2Event.UpdateTime();
+#if CLIENT
 			if (NPC.MoonLordCountdown > 0) {
 				float num4 = MathHelper.Clamp((float)Math.Sin((float)NPC.MoonLordCountdown / 60f * 0.5f) * 2f, 0f, 1f);
 				num4 *= 0.75f - 0.5f * ((float)NPC.MoonLordCountdown / 3600f);
@@ -49556,6 +_,7 @@
 				Filters.Scene.Deactivate("MoonLordShake");
 			}
 
+#endif
 			if (NPC.MoonLordCountdown > 0) {
 				NPC.MoonLordCountdown--;
 				if (NPC.MoonLordCountdown <= 0 && netMode != 1)
@@ -50219,6 +_,9 @@
 
 		public static void PlaySoundInstance(SoundEffectInstance sound) {
 			sound.Play();
+#if !WINDOWS
+			ActiveSoundInstances.Add(sound);
+#endif
 		}
 
 		public static ActiveSound GetActiveSound(SlotId id) {
@@ -50270,6 +_,11 @@
 		}
 
 		public static SoundEffectInstance PlaySound(int type, int x = -1, int y = -1, int Style = 1, float volumeScale = 1f, float pitchOffset = 0f) {
+#if !WINDOWS
+			// lock statement without creating a block. Formatter wants to indent the whole method if we wrap it with another block.
+			// could create another method _PlaySound or do_PlaySound, but we try to avoid annoying people who want to hook methods
+			Monitor.Enter(Main._audioLock);
+#endif
 			int num = Style;
 			try {
 				if (dedServ)
@@ -50843,6 +_,12 @@
 			}
 			catch {
 			}
+#if !WINDOWS
+			finally {
+				Monitor.Exit(Main._audioLock);
+			}
+
+#endif
 
 			return null;
 		}
@@ -50906,6 +_,7 @@
 
 			bool flag = false;
 			Form form = null;
+#if WINDOWS
 			screenMaximized = (((Form)Control.FromHandle(instance.Window.Handle)).WindowState == FormWindowState.Maximized);
 			if (screenBorderless && screenMaximized && !graphics.IsFullScreen) {
 				screenMaximized = false;
@@ -50914,6 +_,9 @@
 
 			form = (Form)Control.FromHandle(instance.Window.Handle);
 			flag = (form.FormBorderStyle == FormBorderStyle.None);
+#else
+			Main.screenMaximized = false;
+#endif
 			if (!instance.IsActive && (screenBorderless || screenMaximized || graphics.IsFullScreen))
 				return;
 
@@ -50921,6 +_,7 @@
 			int num3;
 			int num4;
 			if (screenBorderless || screenMaximized || graphics.IsFullScreen) {
+#if WINDOWS
 				form.MinimumSize = new Size(0, 0);
 				if (screenBorderless && !graphics.IsFullScreen && screenBorderlessPendingResizes > 0) {
 					screenBorderlessPendingResizes--;
@@ -50929,6 +_,7 @@
 					height = bounds.Height;
 				}
 
+#endif
 				if (width > maxScreenW) {
 					float num = (float)height / (float)width;
 					width = maxScreenW;
@@ -50953,12 +_,14 @@
 				}
 			}
 			else {
+#if WINDOWS
 				form.MinimumSize = new Size(minScreenW, minScreenH);
 				if (flag) {
 					width = displayWidth[0];
 					height = displayHeight[0];
 				}
 
+#endif
 				width = Math.Min(width, maxScreenW);
 				height = Math.Min(height, maxScreenH);
 				num3 = graphics.GraphicsDevice.Viewport.Width;
@@ -50966,6 +_,7 @@
 				flag2 = (graphics.PreferredBackBufferWidth != graphics.GraphicsDevice.Viewport.Width || graphics.PreferredBackBufferHeight != graphics.GraphicsDevice.Viewport.Height);
 			}
 
+#if WINDOWS
 			if (!fullscreen && !flag2) {
 				if (form.ClientSize.Width < graphics.PreferredBackBufferWidth) {
 					width = form.ClientSize.Width;
@@ -50978,6 +_,7 @@
 				}
 			}
 
+#endif
 			width &= 0x7FFFFFFE;
 			height &= 0x7FFFFFFE;
 			width = Math.Max(width, minScreenW);
@@ -51000,6 +_,7 @@
 				PendingResolutionWidth = screenWidth;
 				PendingResolutionHeight = screenHeight;
 				PlayerInput.CacheOriginalScreenDimensions();
+#if WINDOWS
 				if (!fullscreen) {
 					form.SendToBack();
 					form.BringToFront();
@@ -51018,6 +_,7 @@
 					}
 				}
 
+#endif
 				Lighting.Initialize(resize: true);
 				if (!drawToScreen)
 					instance.InitTargets();
