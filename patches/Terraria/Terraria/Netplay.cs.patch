--- src/decompiled/Terraria/Netplay.cs
+++ src/Terraria/Terraria/Netplay.cs
@@ -3,7 +_,10 @@
 using System.Linq;
 using System.Net;
 using System.Net.Sockets;
+#if !WINDOWS
+using System.Runtime.CompilerServices;
+#endif
 using System.Threading;
 using Terraria.Audio;
 using Terraria.IO;
 using Terraria.Localization;
@@ -12,6 +_,12 @@
 using Terraria.Net.Sockets;
 using Terraria.Social;
 using Terraria.Utilities;
+#if !WINDOWS
+using Terraria.Social.Base;
+#endif
+#if SERVER
+using NATUPNPLib;
+#endif
 
 namespace Terraria
 {
@@ -40,6 +_,10 @@
 		public static bool SpamCheck = false;
 		public static bool HasClients;
 		private static Thread _serverThread;
+#if SERVER
+		public static UPnPNAT _upnpnat;
+		public static IStaticPortMappingCollection _mappings;
+#endif
 		public static MessageBuffer fullBuffer = new MessageBuffer();
 		private static int _currentRequestId;
 		private static UdpClient BroadcastClient = null;
@@ -120,7 +_,35 @@
 		private static void OpenPort(int port) {
+#if SERVER
+			if (Netplay.upnpnat == null)
+			{
+				Netplay.upnpnat = (UPnPNAT)Activator.CreateInstance(Type.GetTypeFromCLSID(new Guid("AE1E00AA-3FD5-403C-8A27-2BBDC30CD0E1")));
+				Netplay.mappings = Netplay.upnpnat.StaticPortMappingCollection;
+			}
+			if (Netplay.mappings != null)
+			{
+				foreach (IStaticPortMapping staticPortMapping in Netplay.mappings)
+				{
+					if (staticPortMapping.InternalPort == Netplay.portForwardPort && staticPortMapping.InternalClient == Netplay.portForwardIP && staticPortMapping.Protocol == "TCP")
+					{
+						Netplay.portForwardOpen = true;
+					}
+				}
+				if (!Netplay.portForwardOpen)
+				{
+					Netplay.mappings.Add(Netplay.portForwardPort, "TCP", Netplay.portForwardPort, Netplay.portForwardIP, true, "Terraria Server");
+					Netplay.portForwardOpen = true;
+				}
+			}
+#endif
 		}
 
 		private static void ClosePort(int port) {
+#if SERVER
+			if (Netplay.portForwardOpen)
+			{
+				Netplay.mappings.Remove(Netplay.portForwardPort, "TCP");
+			}
+#endif
 		}
 
 		private static void ServerFullWriteCallBack(object state) {
@@ -370,6 +_,11 @@
 					flag = false;
 				}
 				catch {
+#if MAC
+					Thread.Sleep(200);
+					Netplay.Connection.Socket.Close();
+					Netplay.Connection.Socket = new TcpSocket();
+#endif
 					if (!Disconnect && Main.gameMenu)
 						flag = true;
 				}
@@ -621,7 +_,19 @@
 		}
 
 		public static void Initialize() {
+#if CLIENT
 			NetMessage.buffer[256] = new MessageBuffer();
 			NetMessage.buffer[256].whoAmI = 256;
+#else
+			for (int i = 0; i < 257; i++)
+			{
+				if (i < 256)
+				{
+					Netplay.Clients[i] = new RemoteClient();
+				}
+				NetMessage.buffer[i] = new MessageBuffer();
+				NetMessage.buffer[i].whoAmI = i;
+			}
+#endif
 		}
 
