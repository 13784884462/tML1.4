--- src/decompiled/Terraria/Main.cs
+++ src/Terraria/Terraria/Main.cs
@@ -6,6 +_,9 @@
 using Microsoft.Xna.Framework.Input;
 using ReLogic.Content;
 using ReLogic.Content.Sources;
+#if MAC
+using SDL2;
+#endif
 using ReLogic.Graphics;
 using ReLogic.Localization.IME;
 using ReLogic.OS;
@@ -16,10 +_,15 @@
 using System.Collections.Concurrent;
 using System.Collections.Generic;
 using System.Diagnostics;
+#if WINDOWS
 using System.Drawing;
+#endif
 using System.IO;
 using System.Linq;
 using System.Reflection;
+#if !WINDOWS
+using System.Runtime.CompilerServices;
+#endif
 using System.Runtime.InteropServices;
 using System.Text;
 using System.Threading;
@@ -67,10 +_,17 @@
 using Terraria.UI.Gamepad;
 using Terraria.Utilities;
 using Terraria.WorldBuilding;
+#if SERVER
+using Terraria.Server;
+#endif
 
 namespace Terraria
 {
+#if CLIENT
 	public class Main : Game
+#else
+	public class Main : Terraria.Server.Game
+#endif
 	{
 		public delegate void OnPlayerSelected(PlayerFileData player);
 
@@ -3254,6 +_,7 @@
 				base.InactiveSleepTime = TimeSpan.FromMilliseconds(flag2 ? 20 : 0);
 			}
 
+#if CLIENT && WINDOWS
 			Form form = (Form)Control.FromHandle(instance.Window.Handle);
 			if (screenBorderless) {
 				SetBorderlessFormStyle(form);
@@ -3266,6 +_,7 @@
 				form.FormBorderStyle = FormBorderStyle.Sizable;
 			}
 
+#endif
 			Control.FromHandle(instance.Window.Handle).BringToFront();
 			if (!flag)
 				Configuration.Get("Support4K", ref Support4K);
@@ -3456,9 +_,13 @@
 							if (num >= 2)
 								terrariasFixedTiming = binaryReader.ReadBoolean();
 
-							if (num >= 91 && binaryReader.ReadBoolean())
+							if (num >= 91 && binaryReader.ReadBoolean()) {
+#if CLIENT && WINDOWS
 								((Form)Control.FromHandle(base.Window.Handle)).WindowState = FormWindowState.Maximized;
 
+#endif
+							}
+
 							if (num >= 4) {
 								int width = binaryReader.ReadInt32();
 								int height = binaryReader.ReadInt32();
@@ -3549,8 +_,13 @@
 		private static void EraseWorld(int i) {
 			try {
 				if (!WorldList[i].IsCloudSave) {
+#if WINDOWS
 					FileOperationAPIWrapper.MoveToRecycleBin(WorldList[i].Path);
 					FileOperationAPIWrapper.MoveToRecycleBin(WorldList[i].Path + ".bak");
+#else
+					File.Delete(Main.WorldList[i].Path);
+					File.Delete(Main.WorldList[i].Path + ".bak");
+#endif
 				}
 				else if (SocialAPI.Cloud != null) {
 					SocialAPI.Cloud.Delete(WorldList[i].Path);
@@ -3860,9 +_,11 @@
 			rand = new UnifiedRandom();
 			if (autoShutdown) {
 				string lpWindowName = Console.Title = "terraria" + rand.Next(int.MaxValue);
+#if WINDOWS
 				IntPtr intPtr = FindWindow(null, lpWindowName);
 				if (intPtr != IntPtr.Zero)
 					ShowWindow(intPtr, 0);
+#endif
 			}
 			else {
 				Console.Title = "Terraria Server " + versionNumber2;
@@ -4623,12 +_,16 @@
 			if (graphicsAdapter != null)
 				e.GraphicsDeviceInformation.Adapter = graphicsAdapter;
 
+#if CLIENT
 			graphics.PreparingDeviceSettings -= SetMonitorOnce;
+#endif
 		}
 
 		protected void SetTitle() {
+#if CLIENT
 			_cachedTitle = Lang.GetRandomGameTitle();
 			Platform.Get<IWindowService>().SetUnicodeTitle(base.Window, _cachedTitle);
+#endif
 		}
 
 		private static void SetTileValue() {
@@ -4667,6 +_,9 @@
 		}
 
 		protected override void Initialize() {
+#if SERVER
+			netMode = 2;
+#endif
 			musicFade[50] = 1f;
 			for (int i = 0; i < 10; i++) {
 				recentWorld[i] = "";
@@ -4742,9 +_,14 @@
 			ItemDropSolver = new ItemDropResolver(itemDropDatabase);
 			ShopHelper = new ShopHelper();
 			CreativeItemSacrificesCatalog.Instance.Initialize();
+#if CLIENT
 			BestiaryUI = new UIBestiaryTest(BestiaryDB);
 			Lighting.Initialize();
 			MapHelper.Initialize();
+#else
+			Mount.Initialize();
+			Minecart.Initialize();
+#endif
 			WorldGen.RandomizeBackgrounds(rand);
 			if (treeBGSet1[0] == 173)
 				WorldGen.RandomizeBackgrounds(rand);
@@ -4817,15 +_,20 @@
 				ActivePlayerFileData.StartPlayTimer();
 				Player.Hooks.EnterWorld(myPlayer);
 			}
+
+#if CLIENT && WINDOWS
 			else {
 				IntPtr systemMenu = GetSystemMenu(base.Window.Handle, bRevert: false);
 				int menuItemCount = GetMenuItemCount(systemMenu);
 				RemoveMenu(systemMenu, menuItemCount - 1, 1024);
 			}
 
+#endif
+#if CLIENT
 			SoundID.FillAccessMap();
 			Star.SpawnStars();
 			ItemSorting.SetupWhiteLists();
+#endif
 		}
 
 		private void Initialize_Entities() {
@@ -12160,6 +_,25 @@
 		}
 
 		public void UpdateViewZoomKeys() {
+#if !WINDOWS
+			if (Main.engine != null)
+				Main.engine.Update();
+
+			lock (Main._audioLock) {
+				for (int i = 0; i < Main.ActiveSoundInstances.Count; i++) {
+					if (Main.ActiveSoundInstances[i] == null) {
+						Main.ActiveSoundInstances.RemoveAt(i);
+						i--;
+					}
+					else if (Main.ActiveSoundInstances[i].State == SoundState.Stopped) {
+						Main.ActiveSoundInstances[i].Dispose();
+						Main.ActiveSoundInstances.RemoveAt(i);
+						i--;
+					}
+				}
+			}
+
+#endif
 			if (!inFancyUI) {
 				float num = 0.01f;
 				if (PlayerInput.Triggers.Current.ViewZoomIn)
@@ -12218,9 +_,11 @@
 			PlayerInput.SetZoom_Unscaled();
 			MouseOversTryToClear();
 			PlayerInput.ResetInputsOnActiveStateChange();
+#if CLIENT
 			if (Main.OnTickForThirdPartySoftwareOnly != null)
 				Main.OnTickForThirdPartySoftwareOnly();
 
+#endif
 			if (_hasPendingNetmodeChange) {
 				netMode = _targetNetMode;
 				_hasPendingNetmodeChange = false;
@@ -14387,6 +_,7 @@
 		public static extern short GetKeyState(int keyCode);
 
 		public static string GetInputText(string oldString, bool allowMultiLine = false) {
+#if CLIENT
 			if (!hasFocus)
 				return oldString;
 
@@ -14473,6 +_,9 @@
 			}
 
 			return text;
+#else
+			return "";
+#endif
 		}
 
 		public void MouseTextHackZoom(string text, string buffTooltip = null) {
@@ -35350,8 +_,13 @@
 
 		protected void QuitGame() {
 			SaveSettings();
+#if CLIENT
 			SocialAPI.Shutdown();
+#endif
 			Exit();
+#if MAC
+			SDL.SDL_DestroyWindow(base.Window.Handle);
+#endif
 		}
 
 		protected Microsoft.Xna.Framework.Color randColor() {
@@ -36030,9 +_,16 @@
 				}
 				else if (selectedMenu == 2 || inputTextEnter || autoPass) {
 					string str = "-autoshutdown -password \"" + ConvertToSafeArgument(Netplay.ServerPassword) + "\" -lang " + Language.ActiveCulture.LegacyId;
+#if LINUX
+					str += IntPtr.Size == 8 ? " -x64": " -x86";
+#endif
 					str = ((!ActiveWorldFileData.IsCloudSave) ? (str + " -world \"" + worldPathName + "\"") : (str + " -cloudworld \"" + worldPathName + "\""));
 					tServer = new Process();
+#if WINDOWS
 					tServer.StartInfo.FileName = "TerrariaServer.exe";
+#else
+					tServer.StartInfo.FileName = "TerrariaServer";
+#endif
 					tServer.StartInfo.Arguments = str;
 					if (libPath != "") {
 						ProcessStartInfo startInfo = tServer.StartInfo;
@@ -41233,7 +_,11 @@
 			base.GraphicsDevice.SetRenderTarget(backWaterTarget);
 			base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Transparent);
 			spriteBatch.Begin();
+#if WINDOWS
 			tileBatch.Begin();
+#else
+			tileBatch.Begin(SpriteSortMode.Texture, BlendState.AlphaBlend);
+#endif
 			try {
 				DrawWaters(isBackground: true);
 			}
@@ -46795,6 +_,7 @@
 		}
 
 		private static void CheckMonoliths() {
+#if CLIENT
 			bool flag = player[myPlayer].ZoneTowerVortex || player[myPlayer].ZoneTowerNebula || player[myPlayer].ZoneTowerStardust || player[myPlayer].ZoneTowerSolar;
 			for (int i = 0; i < MonolithFilterNames.Length; i++) {
 				if (!flag && i == SceneMetrics.ActiveMonolithType) {
@@ -46812,6 +_,7 @@
 						SkyManager.Instance.Deactivate(MonolithSkyNames[i]);
 				}
 			}
+#endif
 		}
 
 		private void GraphicsDeviceLost(object sender, EventArgs evt) {
@@ -46880,7 +_,9 @@
 			if (!base.IsActive)
 				maxQ = true;
 
+#if CLIENT
 			UpdateDisplaySettings();
+#endif
 			if (Main.OnPreDraw != null)
 				Main.OnPreDraw(gameTime);
 
@@ -49324,6 +_,7 @@
 			DD2Event.UpdateTime();
 			WorldGen.mysticLogsEvent.UpdateTime();
 			PylonSystem.Update();
+#if CLIENT
 			if (NPC.MoonLordCountdown > 0) {
 				float num4 = MathHelper.Clamp((float)Math.Sin((float)NPC.MoonLordCountdown / 60f * 0.5f) * 2f, 0f, 1f);
 				num4 *= 0.75f - 0.5f * ((float)NPC.MoonLordCountdown / 3600f);
@@ -49336,6 +_,7 @@
 				Terraria.Graphics.Effects.Filters.Scene.Deactivate("MoonLordShake");
 			}
 
+#endif
 			if (NPC.MoonLordCountdown > 0) {
 				NPC.MoonLordCountdown--;
 				if (NPC.MoonLordCountdown <= 0 && netMode != 1)
@@ -50218,22 +_,28 @@
 		public static void SetDisplayMode(int width, int height, bool fullscreen) {
 			bool flag = false;
 			Form form = null;
+#if WINDOWS
 			screenMaximized = (((Form)Control.FromHandle(instance.Window.Handle)).WindowState == FormWindowState.Maximized);
 			if (screenBorderless && screenMaximized && !graphics.IsFullScreen) {
 				screenMaximized = false;
 				((Form)Control.FromHandle(instance.Window.Handle)).WindowState = FormWindowState.Normal;
 			}
 
+#else
+			Main.screenMaximized = false;
+#endif
 			form = (Form)Control.FromHandle(instance.Window.Handle);
 			flag = (form.FormBorderStyle == FormBorderStyle.None);
 			bool flag2 = false;
 			int num3;
 			int num4;
 			if (screenBorderless || screenMaximized || graphics.IsFullScreen || fullscreen) {
+#if WINDOWS
 				form.MinimumSize = new Size(0, 0);
 				if (!fullscreen)
 					SetDisplayModeAsBorderless(ref width, ref height, form);
 
+#endif
 				if (width > maxScreenW) {
 					float num = (float)height / (float)width;
 					width = maxScreenW;
@@ -50260,12 +_,14 @@
 			}
 			else {
 				PlayerInput.RawMouseScale = Vector2.One;
+#if WINDOWS
 				form.MinimumSize = new Size(minScreenW, minScreenH);
 				if (flag) {
 					width = displayWidth[0];
 					height = displayHeight[0];
 				}
 
+#endif
 				width = Math.Min(width, maxScreenW);
 				height = Math.Min(height, maxScreenH);
 				num3 = graphics.GraphicsDevice.Viewport.Width;
@@ -50273,6 +_,7 @@
 				flag2 = (graphics.PreferredBackBufferWidth != graphics.GraphicsDevice.Viewport.Width || graphics.PreferredBackBufferHeight != graphics.GraphicsDevice.Viewport.Height);
 			}
 
+#if WINDOWS
 			if (!fullscreen && !flag2) {
 				if (form.ClientSize.Width < graphics.PreferredBackBufferWidth) {
 					width = form.ClientSize.Width;
@@ -50285,6 +_,7 @@
 				}
 			}
 
+#endif
 			width &= 0x7FFFFFFE;
 			height &= 0x7FFFFFFE;
 			width = Math.Max(width, minScreenW);
@@ -50314,6 +_,7 @@
 				PendingResolutionWidth = screenWidth;
 				PendingResolutionHeight = screenHeight;
 				PlayerInput.CacheOriginalScreenDimensions();
+#if WINDOWS
 				if (!fullscreen) {
 					if (screenBorderless) {
 						ApplyBorderlessResolution(form);
@@ -50327,6 +_,7 @@
 					form.BringToFront();
 				}
 
+#endif
 				Lighting.Initialize();
 				if (!drawToScreen)
 					instance.InitTargets();
